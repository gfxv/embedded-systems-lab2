
embedded-systems-lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008090  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  08008240  08008240  00009240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009090  08009090  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009090  08009090  0000a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009098  08009098  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800909c  0800909c  0000a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080090a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b068  2**0
                  CONTENTS
 10 .bss          00000750  20000068  20000068  0000b068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007b8  200007b8  0000b068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a7e  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a04  00000000  00000000  00020b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00024520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f22  00000000  00000000  000258c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026232  00000000  00000000  000267e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b6b9  00000000  00000000  0004ca14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0f50  00000000  00000000  000680cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014901d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005498  00000000  00000000  00149060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0014e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008228 	.word	0x08008228

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08008228 	.word	0x08008228

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Buzzer_Init>:

#include "buzzer.h"
#include "tim.h"


void Buzzer_Init (void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim2,TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <Buzzer_Init+0x18>)
 8000598:	f006 f8ae 	bl	80066f8 <HAL_TIM_OC_Start>
	HAL_TIM_PWM_Init(&htim2);
 800059c:	4802      	ldr	r0, [pc, #8]	@ (80005a8 <Buzzer_Init+0x18>)
 800059e:	f006 f973 	bl	8006888 <HAL_TIM_PWM_Init>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200005c8 	.word	0x200005c8

080005ac <Buzzer_Set_Freq>:

void Buzzer_Set_Freq (uint16_t freq) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
	TIM2->PSC = ((2 * HAL_RCC_GetPCLK1Freq()) / (2 * BUZZER_VOLUME_MAX * freq)) - 1;
 80005b6:	f005 fb4b 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 80005ba:	4603      	mov	r3, r0
 80005bc:	0059      	lsls	r1, r3, #1
 80005be:	88fa      	ldrh	r2, [r7, #6]
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80005cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005d0:	3b01      	subs	r3, #1
 80005d2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <Buzzer_Set_Volume>:

void Buzzer_Set_Volume (uint16_t volume) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	if (volume > BUZZER_VOLUME_MAX)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	2b0a      	cmp	r3, #10
 80005ea:	d901      	bls.n	80005f0 <Buzzer_Set_Volume+0x14>
		volume = BUZZER_VOLUME_MAX;
 80005ec:	230a      	movs	r3, #10
 80005ee:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = volume;
 80005f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <MX_DMA_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <MX_DMA_Init+0x4c>)
 8000614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <MX_DMA_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	200b      	movs	r0, #11
 800062c:	f001 fbf1 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000630:	200b      	movs	r0, #11
 8000632:	f001 fc0a 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	2011      	movs	r0, #17
 800063c:	f001 fbe9 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000640:	2011      	movs	r0, #17
 8000642:	f001 fc02 	bl	8001e4a <HAL_NVIC_EnableIRQ>

}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800

08000654 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <MX_GPIO_Init+0xd4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a2d      	ldr	r2, [pc, #180]	@ (8000728 <MX_GPIO_Init+0xd4>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b2b      	ldr	r3, [pc, #172]	@ (8000728 <MX_GPIO_Init+0xd4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_GPIO_Init+0xd4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a26      	ldr	r2, [pc, #152]	@ (8000728 <MX_GPIO_Init+0xd4>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_GPIO_Init+0xd4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0308 	and.w	r3, r3, #8
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a18      	ldr	r2, [pc, #96]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a11      	ldr	r2, [pc, #68]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80006fc:	480b      	ldr	r0, [pc, #44]	@ (800072c <MX_GPIO_Init+0xd8>)
 80006fe:	f002 f885 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000702:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_GPIO_Init+0xd8>)
 800071c:	f001 feca 	bl	80024b4 <HAL_GPIO_Init>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40020c00 	.word	0x40020c00

08000730 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_I2C1_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	@ (80007a8 <MX_I2C1_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_I2C1_Init+0x74>)
 800073c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ac <MX_I2C1_Init+0x7c>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_I2C1_Init+0x74>)
 800074e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076c:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <MX_I2C1_Init+0x74>)
 800076e:	f002 f867 	bl	8002840 <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 fb30 	bl	8000ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <MX_I2C1_Init+0x74>)
 8000780:	f004 fd6b 	bl	800525a <HAL_I2CEx_ConfigAnalogFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800078a:	f000 fb27 	bl	8000ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_I2C1_Init+0x74>)
 8000792:	f004 fd9e 	bl	80052d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 fb1e 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000084 	.word	0x20000084
 80007a8:	40005400 	.word	0x40005400
 80007ac:	000186a0 	.word	0x000186a0

080007b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a50      	ldr	r2, [pc, #320]	@ (8000910 <HAL_I2C_MspInit+0x160>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	f040 8099 	bne.w	8000906 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000914 <HAL_I2C_MspInit+0x164>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007dc:	4a4d      	ldr	r2, [pc, #308]	@ (8000914 <HAL_I2C_MspInit+0x164>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e4:	4b4b      	ldr	r3, [pc, #300]	@ (8000914 <HAL_I2C_MspInit+0x164>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f6:	2312      	movs	r3, #18
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000802:	2304      	movs	r3, #4
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4842      	ldr	r0, [pc, #264]	@ (8000918 <HAL_I2C_MspInit+0x168>)
 800080e:	f001 fe51 	bl	80024b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b3f      	ldr	r3, [pc, #252]	@ (8000914 <HAL_I2C_MspInit+0x164>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	4a3e      	ldr	r2, [pc, #248]	@ (8000914 <HAL_I2C_MspInit+0x164>)
 800081c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000820:	6413      	str	r3, [r2, #64]	@ 0x40
 8000822:	4b3c      	ldr	r3, [pc, #240]	@ (8000914 <HAL_I2C_MspInit+0x164>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800082e:	4b3b      	ldr	r3, [pc, #236]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000830:	4a3b      	ldr	r2, [pc, #236]	@ (8000920 <HAL_I2C_MspInit+0x170>)
 8000832:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000834:	4b39      	ldr	r3, [pc, #228]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000836:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800083a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800083c:	4b37      	ldr	r3, [pc, #220]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 800083e:	2240      	movs	r2, #64	@ 0x40
 8000840:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000842:	4b36      	ldr	r3, [pc, #216]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000848:	4b34      	ldr	r3, [pc, #208]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 800084a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800084e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000850:	4b32      	ldr	r3, [pc, #200]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000856:	4b31      	ldr	r3, [pc, #196]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800085c:	4b2f      	ldr	r3, [pc, #188]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000862:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000868:	4b2c      	ldr	r3, [pc, #176]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800086e:	482b      	ldr	r0, [pc, #172]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000870:	f001 fb06 	bl	8001e80 <HAL_DMA_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800087a:	f000 faaf 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a26      	ldr	r2, [pc, #152]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000882:	635a      	str	r2, [r3, #52]	@ 0x34
 8000884:	4a25      	ldr	r2, [pc, #148]	@ (800091c <HAL_I2C_MspInit+0x16c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 800088c:	4a26      	ldr	r2, [pc, #152]	@ (8000928 <HAL_I2C_MspInit+0x178>)
 800088e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 8000892:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000896:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008aa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80008ca:	4816      	ldr	r0, [pc, #88]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008cc:	f001 fad8 	bl	8001e80 <HAL_DMA_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80008d6:	f000 fa81 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008de:	639a      	str	r2, [r3, #56]	@ 0x38
 80008e0:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <HAL_I2C_MspInit+0x174>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	201f      	movs	r0, #31
 80008ec:	f001 fa91 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008f0:	201f      	movs	r0, #31
 80008f2:	f001 faaa 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	2020      	movs	r0, #32
 80008fc:	f001 fa89 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000900:	2020      	movs	r0, #32
 8000902:	f001 faa2 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	200000d8 	.word	0x200000d8
 8000920:	400260a0 	.word	0x400260a0
 8000924:	20000138 	.word	0x20000138
 8000928:	40026010 	.word	0x40026010

0800092c <Set_Keyboard>:
#include "keyboard.h"
#include "usart.h"

#define KBRD_ADDR 0xE2

HAL_StatusTypeDef Set_Keyboard( void ) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	buf = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	461a      	mov	r2, r3
 800093e:	2102      	movs	r1, #2
 8000940:	20e2      	movs	r0, #226	@ 0xe2
 8000942:	f000 f92b 	bl	8000b9c <PCA9538_Write_Register>
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <Set_Keyboard+0x2c>
		UART_Transmit((uint8_t*)"Error write polarity\n");
 8000950:	480d      	ldr	r0, [pc, #52]	@ (8000988 <Set_Keyboard+0x5c>)
 8000952:	f000 fd0f 	bl	8001374 <UART_Transmit>
		goto exit;
 8000956:	e011      	b.n	800097c <Set_Keyboard+0x50>
	}

	buf = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	461a      	mov	r2, r3
 8000960:	2101      	movs	r1, #1
 8000962:	20e2      	movs	r0, #226	@ 0xe2
 8000964:	f000 f91a 	bl	8000b9c <PCA9538_Write_Register>
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <Set_Keyboard+0x4e>
		UART_Transmit((uint8_t*)"Error write output\n");
 8000972:	4806      	ldr	r0, [pc, #24]	@ (800098c <Set_Keyboard+0x60>)
 8000974:	f000 fcfe 	bl	8001374 <UART_Transmit>
 8000978:	e000      	b.n	800097c <Set_Keyboard+0x50>
	}

exit:
 800097a:	bf00      	nop
	return ret;
 800097c:	79fb      	ldrb	r3, [r7, #7]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08008240 	.word	0x08008240
 800098c:	08008258 	.word	0x08008258

08000990 <get_pressed_keys>:

pressed_keys get_pressed_keys(void) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b089      	sub	sp, #36	@ 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	pressed_keys result = {0};
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
	HAL_StatusTypeDef ret = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	77bb      	strb	r3, [r7, #30]
	uint8_t buf;
	uint8_t kbd_in;
	uint8_t row_code[4] = {ROW1, ROW2, ROW3, ROW4};
 80009a8:	4b68      	ldr	r3, [pc, #416]	@ (8000b4c <get_pressed_keys+0x1bc>)
 80009aa:	60bb      	str	r3, [r7, #8]

	for (uint8_t row_ind = 0; row_ind < 4; ++row_ind) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	77fb      	strb	r3, [r7, #31]
 80009b0:	e0bb      	b.n	8000b2a <get_pressed_keys+0x19a>
		ret = Set_Keyboard();
 80009b2:	f7ff ffbb 	bl	800092c <Set_Keyboard>
 80009b6:	4603      	mov	r3, r0
 80009b8:	77bb      	strb	r3, [r7, #30]
		if( ret != HAL_OK ) {
 80009ba:	7fbb      	ldrb	r3, [r7, #30]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <get_pressed_keys+0x36>
			UART_Transmit((uint8_t*)"Error write init\n");
 80009c0:	4863      	ldr	r0, [pc, #396]	@ (8000b50 <get_pressed_keys+0x1c0>)
 80009c2:	f000 fcd7 	bl	8001374 <UART_Transmit>
		}
		buf = row_code[row_ind];
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	3320      	adds	r3, #32
 80009ca:	443b      	add	r3, r7
 80009cc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80009d0:	73fb      	strb	r3, [r7, #15]
		ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 80009d2:	f107 030f 	add.w	r3, r7, #15
 80009d6:	461a      	mov	r2, r3
 80009d8:	2103      	movs	r1, #3
 80009da:	20e2      	movs	r0, #226	@ 0xe2
 80009dc:	f000 f8de 	bl	8000b9c <PCA9538_Write_Register>
 80009e0:	4603      	mov	r3, r0
 80009e2:	77bb      	strb	r3, [r7, #30]
		if( ret != HAL_OK ) {
 80009e4:	7fbb      	ldrb	r3, [r7, #30]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <get_pressed_keys+0x60>
			UART_Transmit((uint8_t*)"Error write config\n");
 80009ea:	485a      	ldr	r0, [pc, #360]	@ (8000b54 <get_pressed_keys+0x1c4>)
 80009ec:	f000 fcc2 	bl	8001374 <UART_Transmit>
		}

		ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 80009f0:	f107 030f 	add.w	r3, r7, #15
 80009f4:	4619      	mov	r1, r3
 80009f6:	20e2      	movs	r0, #226	@ 0xe2
 80009f8:	f000 f8f0 	bl	8000bdc <PCA9538_Read_Inputs>
 80009fc:	4603      	mov	r3, r0
 80009fe:	77bb      	strb	r3, [r7, #30]
		if( ret != HAL_OK ) {
 8000a00:	7fbb      	ldrb	r3, [r7, #30]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <get_pressed_keys+0x7c>
			UART_Transmit((uint8_t*)"Read error\n");
 8000a06:	4854      	ldr	r0, [pc, #336]	@ (8000b58 <get_pressed_keys+0x1c8>)
 8000a08:	f000 fcb4 	bl	8001374 <UART_Transmit>
		}
		kbd_in = buf & 0x70;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000a12:	777b      	strb	r3, [r7, #29]
		if( kbd_in != 0x70) {
 8000a14:	7f7b      	ldrb	r3, [r7, #29]
 8000a16:	2b70      	cmp	r3, #112	@ 0x70
 8000a18:	f000 8084 	beq.w	8000b24 <get_pressed_keys+0x194>
			if( !(kbd_in & 0x10) ) {
 8000a1c:	7f7b      	ldrb	r3, [r7, #29]
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d126      	bne.n	8000a74 <get_pressed_keys+0xe4>
				switch (row_code[row_ind]) {
 8000a26:	7ffb      	ldrb	r3, [r7, #31]
 8000a28:	3320      	adds	r3, #32
 8000a2a:	443b      	add	r3, r7
 8000a2c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a30:	3bf7      	subs	r3, #247	@ 0xf7
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	d81e      	bhi.n	8000a74 <get_pressed_keys+0xe4>
 8000a36:	a201      	add	r2, pc, #4	@ (adr r2, 8000a3c <get_pressed_keys+0xac>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000a6f 	.word	0x08000a6f
 8000a40:	08000a75 	.word	0x08000a75
 8000a44:	08000a75 	.word	0x08000a75
 8000a48:	08000a75 	.word	0x08000a75
 8000a4c:	08000a69 	.word	0x08000a69
 8000a50:	08000a75 	.word	0x08000a75
 8000a54:	08000a63 	.word	0x08000a63
 8000a58:	08000a5d 	.word	0x08000a5d
					case ROW1:
						result.keys[0] = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	743b      	strb	r3, [r7, #16]
						break;
 8000a60:	e008      	b.n	8000a74 <get_pressed_keys+0xe4>
					case ROW2:
						result.keys[3] = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	74fb      	strb	r3, [r7, #19]
						break;
 8000a66:	e005      	b.n	8000a74 <get_pressed_keys+0xe4>
					case ROW3:
						result.keys[6] = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	75bb      	strb	r3, [r7, #22]
						break;
 8000a6c:	e002      	b.n	8000a74 <get_pressed_keys+0xe4>
					case ROW4:
						result.keys[9] = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	767b      	strb	r3, [r7, #25]
						break;
 8000a72:	bf00      	nop
				}
			}
			if( !(kbd_in & 0x20) ) {
 8000a74:	7f7b      	ldrb	r3, [r7, #29]
 8000a76:	f003 0320 	and.w	r3, r3, #32
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d126      	bne.n	8000acc <get_pressed_keys+0x13c>
				switch (row_code[row_ind]) {
 8000a7e:	7ffb      	ldrb	r3, [r7, #31]
 8000a80:	3320      	adds	r3, #32
 8000a82:	443b      	add	r3, r7
 8000a84:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a88:	3bf7      	subs	r3, #247	@ 0xf7
 8000a8a:	2b07      	cmp	r3, #7
 8000a8c:	d81e      	bhi.n	8000acc <get_pressed_keys+0x13c>
 8000a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a94 <get_pressed_keys+0x104>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000ac7 	.word	0x08000ac7
 8000a98:	08000acd 	.word	0x08000acd
 8000a9c:	08000acd 	.word	0x08000acd
 8000aa0:	08000acd 	.word	0x08000acd
 8000aa4:	08000ac1 	.word	0x08000ac1
 8000aa8:	08000acd 	.word	0x08000acd
 8000aac:	08000abb 	.word	0x08000abb
 8000ab0:	08000ab5 	.word	0x08000ab5
					case ROW1:
						result.keys[1] = 1;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	747b      	strb	r3, [r7, #17]
						break;
 8000ab8:	e008      	b.n	8000acc <get_pressed_keys+0x13c>
					case ROW2:
						result.keys[4] = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	753b      	strb	r3, [r7, #20]
						break;
 8000abe:	e005      	b.n	8000acc <get_pressed_keys+0x13c>
					case ROW3:
						result.keys[7] = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	75fb      	strb	r3, [r7, #23]
						break;
 8000ac4:	e002      	b.n	8000acc <get_pressed_keys+0x13c>
					case ROW4:
						result.keys[10] = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	76bb      	strb	r3, [r7, #26]
						break;
 8000aca:	bf00      	nop
				}
			}
			if( !(kbd_in & 0x40) ) {
 8000acc:	7f7b      	ldrb	r3, [r7, #29]
 8000ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d126      	bne.n	8000b24 <get_pressed_keys+0x194>
				switch (row_code[row_ind]) {
 8000ad6:	7ffb      	ldrb	r3, [r7, #31]
 8000ad8:	3320      	adds	r3, #32
 8000ada:	443b      	add	r3, r7
 8000adc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ae0:	3bf7      	subs	r3, #247	@ 0xf7
 8000ae2:	2b07      	cmp	r3, #7
 8000ae4:	d81e      	bhi.n	8000b24 <get_pressed_keys+0x194>
 8000ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8000aec <get_pressed_keys+0x15c>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000b1f 	.word	0x08000b1f
 8000af0:	08000b25 	.word	0x08000b25
 8000af4:	08000b25 	.word	0x08000b25
 8000af8:	08000b25 	.word	0x08000b25
 8000afc:	08000b19 	.word	0x08000b19
 8000b00:	08000b25 	.word	0x08000b25
 8000b04:	08000b13 	.word	0x08000b13
 8000b08:	08000b0d 	.word	0x08000b0d
					case ROW1:
						result.keys[2] = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	74bb      	strb	r3, [r7, #18]
						break;
 8000b10:	e008      	b.n	8000b24 <get_pressed_keys+0x194>
					case ROW2:
						result.keys[5] = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	757b      	strb	r3, [r7, #21]
						break;
 8000b16:	e005      	b.n	8000b24 <get_pressed_keys+0x194>
					case ROW3:
						result.keys[8] = 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	763b      	strb	r3, [r7, #24]
						break;
 8000b1c:	e002      	b.n	8000b24 <get_pressed_keys+0x194>
					case ROW4:
						result.keys[11] = 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	76fb      	strb	r3, [r7, #27]
						break;
 8000b22:	bf00      	nop
	for (uint8_t row_ind = 0; row_ind < 4; ++row_ind) {
 8000b24:	7ffb      	ldrb	r3, [r7, #31]
 8000b26:	3301      	adds	r3, #1
 8000b28:	77fb      	strb	r3, [r7, #31]
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	f67f af40 	bls.w	80009b2 <get_pressed_keys+0x22>
				}
			}
		}
	}

	return result;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	461c      	mov	r4, r3
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b3c:	6020      	str	r0, [r4, #0]
 8000b3e:	6061      	str	r1, [r4, #4]
 8000b40:	60a2      	str	r2, [r4, #8]

}
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	3724      	adds	r7, #36	@ 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	f7fbfdfe 	.word	0xf7fbfdfe
 8000b50:	0800826c 	.word	0x0800826c
 8000b54:	08008280 	.word	0x08008280
 8000b58:	08008294 	.word	0x08008294

08000b5c <PCA9538_Read_Register>:

	return Nkey;
}


HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af04      	add	r7, sp, #16
 8000b62:	4603      	mov	r3, r0
 8000b64:	603a      	str	r2, [r7, #0]
 8000b66:	80fb      	strh	r3, [r7, #6]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	b299      	uxth	r1, r3
 8000b74:	797b      	ldrb	r3, [r7, #5]
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	2364      	movs	r3, #100	@ 0x64
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2301      	movs	r3, #1
 8000b86:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <PCA9538_Read_Register+0x3c>)
 8000b88:	f002 f8ae 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000084 	.word	0x20000084

08000b9c <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af04      	add	r7, sp, #16
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	603a      	str	r2, [r7, #0]
 8000ba6:	80fb      	strh	r3, [r7, #6]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	b299      	uxth	r1, r3
 8000bb4:	797b      	ldrb	r3, [r7, #5]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <PCA9538_Write_Register+0x3c>)
 8000bc8:	f001 ff94 	bl	8002af4 <HAL_I2C_Mem_Write>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000084 	.word	0x20000084

08000bdc <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ffb4 	bl	8000b5c <PCA9538_Read_Register>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <get_pressed_key>:

key_e get_pressed_key() {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
	pressed_keys pressed = get_pressed_keys();
 8000c04:	463b      	mov	r3, r7
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fec2 	bl	8000990 <get_pressed_keys>
	for (size_t i = 0; i < 12; i++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e00b      	b.n	8000c2a <get_pressed_key+0x2c>
		if (pressed.keys[i]) { return (key_e)i; }
 8000c12:	463a      	mov	r2, r7
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <get_pressed_key+0x26>
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	e006      	b.n	8000c32 <get_pressed_key+0x34>
	for (size_t i = 0; i < 12; i++) {
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b0b      	cmp	r3, #11
 8000c2e:	d9f0      	bls.n	8000c12 <get_pressed_key+0x14>
	}
	return NONE_KEY;
 8000c30:	230c      	movs	r3, #12
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <main>:
  * @retval int
  */

uint32_t last_time;
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f000 ff75 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f857 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4a:	f7ff fd03 	bl	8000654 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4e:	f7ff fcd9 	bl	8000604 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c52:	f7ff fd6d 	bl	8000730 <MX_I2C1_Init>
  MX_RTC_Init();
 8000c56:	f000 fad7 	bl	8001208 <MX_RTC_Init>
  MX_USART6_UART_Init();
 8000c5a:	f000 fecd 	bl	80019f8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000c5e:	f000 fc67 	bl	8001530 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  oled_Init();
 8000c62:	f000 f8d9 	bl	8000e18 <oled_Init>
  Buzzer_Init();
 8000c66:	f7ff fc93 	bl	8000590 <Buzzer_Init>
  last_time = HAL_GetTick();
 8000c6a:	f000 ffc7 	bl	8001bfc <HAL_GetTick>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf0 <main+0xb4>)
 8000c72:	6013      	str	r3, [r2, #0]
  Buzzer_Set_Freq(370);
 8000c74:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8000c78:	f7ff fc98 	bl	80005ac <Buzzer_Set_Freq>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  update_timer_time();
 8000c7c:	f000 fe9a 	bl	80019b4 <update_timer_time>
	  if (HAL_GetTick() - last_time >= 1000) {
 8000c80:	f000 ffbc 	bl	8001bfc <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <main+0xb4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c90:	d306      	bcc.n	8000ca0 <main+0x64>
		  last_time = HAL_GetTick();
 8000c92:	f000 ffb3 	bl	8001bfc <HAL_GetTick>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <main+0xb4>)
 8000c9a:	6013      	str	r3, [r2, #0]
		  timer_tick();
 8000c9c:	f000 fd9e 	bl	80017dc <timer_tick>
	  }

	  oled_Fill(Black);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f925 	bl	8000ef0 <oled_Fill>
	  oled_SetCursor(0, 0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 fa7b 	bl	80011a4 <oled_SetCursor>

	  key_e key = get_pressed_key();
 8000cae:	f7ff ffa6 	bl	8000bfe <get_pressed_key>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	  handle_key_click(&key);
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fdd7 	bl	800186c <handle_key_click>

	  time_s time = seconds_to_time(get_time());
 8000cbe:	f000 fdc9 	bl	8001854 <get_time>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fd0b 	bl	80016e0 <seconds_to_time>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	713a      	strb	r2, [r7, #4]
 8000cd0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000cd4:	717a      	strb	r2, [r7, #5]
 8000cd6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000cda:	71bb      	strb	r3, [r7, #6]

	  oled_WriteTime(&time, Font_11x18, White);
 8000cdc:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <main+0xb8>)
 8000cde:	1d38      	adds	r0, r7, #4
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	ca06      	ldmia	r2, {r1, r2}
 8000ce4:	f000 fa76 	bl	80011d4 <oled_WriteTime>
	  oled_UpdateScreen();
 8000ce8:	f000 f926 	bl	8000f38 <oled_UpdateScreen>
  {
 8000cec:	e7c6      	b.n	8000c7c <main+0x40>
 8000cee:	bf00      	nop
 8000cf0:	20000198 	.word	0x20000198
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	@ 0x50
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	2230      	movs	r2, #48	@ 0x30
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f006 fe0e 	bl	8007928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <SystemClock_Config+0xdc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	4a2b      	ldr	r2, [pc, #172]	@ (8000dd4 <SystemClock_Config+0xdc>)
 8000d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2c:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <SystemClock_Config+0xdc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <SystemClock_Config+0xe0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a25      	ldr	r2, [pc, #148]	@ (8000dd8 <SystemClock_Config+0xe0>)
 8000d42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <SystemClock_Config+0xe0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d54:	2309      	movs	r3, #9
 8000d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d70:	23d8      	movs	r3, #216	@ 0xd8
 8000d72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	4618      	mov	r0, r3
 8000d82:	f004 fb35 	bl	80053f0 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d8c:	f000 f826 	bl	8000ddc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d90:	f004 fade 	bl	8005350 <HAL_PWREx_EnableOverDrive>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d9a:	f000 f81f 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2302      	movs	r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000daa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	2105      	movs	r1, #5
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 fd8f 	bl	80058e0 <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dc8:	f000 f808 	bl	8000ddc <Error_Handler>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3750      	adds	r7, #80	@ 0x50
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8000df2:	230a      	movs	r3, #10
 8000df4:	9302      	str	r3, [sp, #8]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2200      	movs	r2, #0
 8000e02:	2178      	movs	r1, #120	@ 0x78
 8000e04:	4803      	ldr	r0, [pc, #12]	@ (8000e14 <oled_WriteCommand+0x2c>)
 8000e06:	f001 fe75 	bl	8002af4 <HAL_I2C_Mem_Write>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000084 	.word	0x20000084

08000e18 <oled_Init>:


uint8_t oled_Init(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000e1c:	2064      	movs	r0, #100	@ 0x64
 8000e1e:	f000 fef9 	bl	8001c14 <HAL_Delay>

	oled_WriteCommand(0xAE);
 8000e22:	20ae      	movs	r0, #174	@ 0xae
 8000e24:	f7ff ffe0 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8000e28:	2020      	movs	r0, #32
 8000e2a:	f7ff ffdd 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8000e2e:	2010      	movs	r0, #16
 8000e30:	f7ff ffda 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 8000e34:	20b0      	movs	r0, #176	@ 0xb0
 8000e36:	f7ff ffd7 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 8000e3a:	20c8      	movs	r0, #200	@ 0xc8
 8000e3c:	f7ff ffd4 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff ffd1 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x10);
 8000e46:	2010      	movs	r0, #16
 8000e48:	f7ff ffce 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x40);
 8000e4c:	2040      	movs	r0, #64	@ 0x40
 8000e4e:	f7ff ffcb 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x81);
 8000e52:	2081      	movs	r0, #129	@ 0x81
 8000e54:	f7ff ffc8 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 8000e58:	20ff      	movs	r0, #255	@ 0xff
 8000e5a:	f7ff ffc5 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 8000e5e:	20a1      	movs	r0, #161	@ 0xa1
 8000e60:	f7ff ffc2 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 8000e64:	20a6      	movs	r0, #166	@ 0xa6
 8000e66:	f7ff ffbf 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 8000e6a:	20a8      	movs	r0, #168	@ 0xa8
 8000e6c:	f7ff ffbc 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 8000e70:	203f      	movs	r0, #63	@ 0x3f
 8000e72:	f7ff ffb9 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 8000e76:	20a4      	movs	r0, #164	@ 0xa4
 8000e78:	f7ff ffb6 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 8000e7c:	20d3      	movs	r0, #211	@ 0xd3
 8000e7e:	f7ff ffb3 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff ffb0 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 8000e88:	20d5      	movs	r0, #213	@ 0xd5
 8000e8a:	f7ff ffad 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 8000e8e:	20f0      	movs	r0, #240	@ 0xf0
 8000e90:	f7ff ffaa 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 8000e94:	20d9      	movs	r0, #217	@ 0xd9
 8000e96:	f7ff ffa7 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8000e9a:	2022      	movs	r0, #34	@ 0x22
 8000e9c:	f7ff ffa4 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 8000ea0:	20da      	movs	r0, #218	@ 0xda
 8000ea2:	f7ff ffa1 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x12);
 8000ea6:	2012      	movs	r0, #18
 8000ea8:	f7ff ff9e 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 8000eac:	20db      	movs	r0, #219	@ 0xdb
 8000eae:	f7ff ff9b 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8000eb2:	2020      	movs	r0, #32
 8000eb4:	f7ff ff98 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 8000eb8:	208d      	movs	r0, #141	@ 0x8d
 8000eba:	f7ff ff95 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0x14);
 8000ebe:	2014      	movs	r0, #20
 8000ec0:	f7ff ff92 	bl	8000de8 <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 8000ec4:	20af      	movs	r0, #175	@ 0xaf
 8000ec6:	f7ff ff8f 	bl	8000de8 <oled_WriteCommand>

	oled_Fill(Black);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f810 	bl	8000ef0 <oled_Fill>

	oled_UpdateScreen();
 8000ed0:	f000 f832 	bl	8000f38 <oled_UpdateScreen>

	OLED.CurrentX = 0;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <oled_Init+0xd4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <oled_Init+0xd4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	805a      	strh	r2, [r3, #2]

	OLED.Initialized = 1;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	@ (8000eec <oled_Init+0xd4>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	715a      	strb	r2, [r3, #5]

	return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000059c 	.word	0x2000059c

08000ef0 <oled_Fill>:

void oled_Fill(OLED_COLOR color) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	e00d      	b.n	8000f1c <oled_Fill+0x2c>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <oled_Fill+0x1a>
 8000f06:	2100      	movs	r1, #0
 8000f08:	e000      	b.n	8000f0c <oled_Fill+0x1c>
 8000f0a:	21ff      	movs	r1, #255	@ 0xff
 8000f0c:	4a09      	ldr	r2, [pc, #36]	@ (8000f34 <oled_Fill+0x44>)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4413      	add	r3, r2
 8000f12:	460a      	mov	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f22:	d3ed      	bcc.n	8000f00 <oled_Fill+0x10>
	}
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2000019c 	.word	0x2000019c

08000f38 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	e01d      	b.n	8000f80 <oled_UpdateScreen+0x48>
		oled_WriteCommand(0xB0 + i);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	3b50      	subs	r3, #80	@ 0x50
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff4c 	bl	8000de8 <oled_WriteCommand>
		oled_WriteCommand(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff ff49 	bl	8000de8 <oled_WriteCommand>
		oled_WriteCommand(0x10);
 8000f56:	2010      	movs	r0, #16
 8000f58:	f7ff ff46 	bl	8000de8 <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,25);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	01db      	lsls	r3, r3, #7
 8000f60:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <oled_UpdateScreen+0x58>)
 8000f62:	4413      	add	r3, r2
 8000f64:	2219      	movs	r2, #25
 8000f66:	9202      	str	r2, [sp, #8]
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	9201      	str	r2, [sp, #4]
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2240      	movs	r2, #64	@ 0x40
 8000f72:	2178      	movs	r1, #120	@ 0x78
 8000f74:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <oled_UpdateScreen+0x5c>)
 8000f76:	f001 fdbd 	bl	8002af4 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	d9de      	bls.n	8000f44 <oled_UpdateScreen+0xc>
	}
}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000019c 	.word	0x2000019c
 8000f94:	20000084 	.word	0x20000084

08000f98 <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	71bb      	strb	r3, [r7, #6]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db48      	blt.n	8001044 <oled_DrawPixel+0xac>
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fb6:	d845      	bhi.n	8001044 <oled_DrawPixel+0xac>
		return;
	}

	if (OLED.Inverted) {
 8000fb8:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <oled_DrawPixel+0xb8>)
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <oled_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 8000fc0:	797b      	ldrb	r3, [r7, #5]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2301      	moveq	r3, #1
 8000fc8:	2300      	movne	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	717b      	strb	r3, [r7, #5]
	}

	if (color == White) {
 8000fce:	797b      	ldrb	r3, [r7, #5]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d11a      	bne.n	800100a <oled_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	b2d8      	uxtb	r0, r3
 8000fdc:	4603      	mov	r3, r0
 8000fde:	01db      	lsls	r3, r3, #7
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8001054 <oled_DrawPixel+0xbc>)
 8000fe4:	5cd3      	ldrb	r3, [r2, r3]
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b259      	sxtb	r1, r3
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	01db      	lsls	r3, r3, #7
 8001000:	4413      	add	r3, r2
 8001002:	b2c9      	uxtb	r1, r1
 8001004:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <oled_DrawPixel+0xbc>)
 8001006:	54d1      	strb	r1, [r2, r3]
 8001008:	e01d      	b.n	8001046 <oled_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	b2d8      	uxtb	r0, r3
 8001012:	4603      	mov	r3, r0
 8001014:	01db      	lsls	r3, r3, #7
 8001016:	4413      	add	r3, r2
 8001018:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <oled_DrawPixel+0xbc>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	b25a      	sxtb	r2, r3
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	b25b      	sxtb	r3, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	b25b      	sxtb	r3, r3
 8001030:	4013      	ands	r3, r2
 8001032:	b259      	sxtb	r1, r3
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	4603      	mov	r3, r0
 8001038:	01db      	lsls	r3, r3, #7
 800103a:	4413      	add	r3, r2
 800103c:	b2c9      	uxtb	r1, r1
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <oled_DrawPixel+0xbc>)
 8001040:	54d1      	strb	r1, [r2, r3]
 8001042:	e000      	b.n	8001046 <oled_DrawPixel+0xae>
		return;
 8001044:	bf00      	nop
	}
}
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	2000059c 	.word	0x2000059c
 8001054:	2000019c 	.word	0x2000019c

08001058 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b089      	sub	sp, #36	@ 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	4604      	mov	r4, r0
 8001060:	1d38      	adds	r0, r7, #4
 8001062:	e880 0006 	stmia.w	r0, {r1, r2}
 8001066:	461a      	mov	r2, r3
 8001068:	4623      	mov	r3, r4
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	4613      	mov	r3, r2
 800106e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8001070:	4b38      	ldr	r3, [pc, #224]	@ (8001154 <oled_WriteChar+0xfc>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	793b      	ldrb	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	2b7f      	cmp	r3, #127	@ 0x7f
 800107c:	dc06      	bgt.n	800108c <oled_WriteChar+0x34>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 800107e:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <oled_WriteChar+0xfc>)
 8001080:	885b      	ldrh	r3, [r3, #2]
 8001082:	461a      	mov	r2, r3
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8001088:	2b3f      	cmp	r3, #63	@ 0x3f
 800108a:	dd01      	ble.n	8001090 <oled_WriteChar+0x38>
		return 0;
 800108c:	2300      	movs	r3, #0
 800108e:	e05c      	b.n	800114a <oled_WriteChar+0xf2>
	}

	for (i = 0; i < Font.FontHeight; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e04c      	b.n	8001130 <oled_WriteChar+0xd8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	3b20      	subs	r3, #32
 800109c:	7979      	ldrb	r1, [r7, #5]
 800109e:	fb01 f303 	mul.w	r3, r1, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	440b      	add	r3, r1
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	e034      	b.n	8001120 <oled_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d012      	beq.n	80010ec <oled_WriteChar+0x94>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 80010c6:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <oled_WriteChar+0xfc>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	b2d8      	uxtb	r0, r3
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <oled_WriteChar+0xfc>)
 80010d6:	885b      	ldrh	r3, [r3, #2]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4413      	add	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	7bba      	ldrb	r2, [r7, #14]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff ff57 	bl	8000f98 <oled_DrawPixel>
 80010ea:	e016      	b.n	800111a <oled_WriteChar+0xc2>
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <oled_WriteChar+0xfc>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b2d8      	uxtb	r0, r3
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <oled_WriteChar+0xfc>)
 80010fc:	885b      	ldrh	r3, [r3, #2]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b2d9      	uxtb	r1, r3
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	f7ff ff3f 	bl	8000f98 <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	3301      	adds	r3, #1
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	793b      	ldrb	r3, [r7, #4]
 8001122:	461a      	mov	r2, r3
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	4293      	cmp	r3, r2
 8001128:	d3c5      	bcc.n	80010b6 <oled_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++) {
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	797b      	ldrb	r3, [r7, #5]
 8001132:	461a      	mov	r2, r3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	4293      	cmp	r3, r2
 8001138:	d3ad      	bcc.n	8001096 <oled_WriteChar+0x3e>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <oled_WriteChar+0xfc>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	793a      	ldrb	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <oled_WriteChar+0xfc>)
 8001146:	801a      	strh	r2, [r3, #0]

	return ch;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	bf00      	nop
 8001154:	2000059c 	.word	0x2000059c

08001158 <oled_WriteString>:

char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	1d38      	adds	r0, r7, #4
 8001162:	e880 0006 	stmia.w	r0, {r1, r2}
 8001166:	70fb      	strb	r3, [r7, #3]
	while (*str) {
 8001168:	e012      	b.n	8001190 <oled_WriteString+0x38>
		if (oled_WriteChar(*str, Font, color) != *str) {
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	7818      	ldrb	r0, [r3, #0]
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	1d3a      	adds	r2, r7, #4
 8001172:	ca06      	ldmia	r2, {r1, r2}
 8001174:	f7ff ff70 	bl	8001058 <oled_WriteChar>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d002      	beq.n	800118a <oled_WriteString+0x32>
			return *str;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	e008      	b.n	800119c <oled_WriteString+0x44>
		}
		str++;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e8      	bne.n	800116a <oled_WriteString+0x12>
	}
	return *str;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	781b      	ldrb	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <oled_SetCursor+0x2c>)
 80011ba:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <oled_SetCursor+0x2c>)
 80011c2:	805a      	strh	r2, [r3, #2]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	2000059c 	.word	0x2000059c

080011d4 <oled_WriteTime>:
		}
	}
}


void oled_WriteTime(const time_s *time, FontDef Font, OLED_COLOR color) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	1d38      	adds	r0, r7, #4
 80011de:	e880 0006 	stmia.w	r0, {r1, r2}
 80011e2:	70fb      	strb	r3, [r7, #3]
	char time_repr [REPRESENTATION_SIZE];
	time_to_string(time, time_repr);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f000 fac8 	bl	8001780 <time_to_string>

	oled_WriteString(time_repr, Font, color);
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	f107 0014 	add.w	r0, r7, #20
 80011f6:	1d3a      	adds	r2, r7, #4
 80011f8:	ca06      	ldmia	r2, {r1, r2}
 80011fa:	f7ff ffad 	bl	8001158 <oled_WriteString>
}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b090      	sub	sp, #64	@ 0x40
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800120e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2228      	movs	r2, #40	@ 0x28
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fb7d 	bl	8007928 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800122e:	4b3a      	ldr	r3, [pc, #232]	@ (8001318 <MX_RTC_Init+0x110>)
 8001230:	4a3a      	ldr	r2, [pc, #232]	@ (800131c <MX_RTC_Init+0x114>)
 8001232:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001234:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <MX_RTC_Init+0x110>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800123a:	4b37      	ldr	r3, [pc, #220]	@ (8001318 <MX_RTC_Init+0x110>)
 800123c:	227f      	movs	r2, #127	@ 0x7f
 800123e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001240:	4b35      	ldr	r3, [pc, #212]	@ (8001318 <MX_RTC_Init+0x110>)
 8001242:	22ff      	movs	r2, #255	@ 0xff
 8001244:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001246:	4b34      	ldr	r3, [pc, #208]	@ (8001318 <MX_RTC_Init+0x110>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800124c:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <MX_RTC_Init+0x110>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001252:	4b31      	ldr	r3, [pc, #196]	@ (8001318 <MX_RTC_Init+0x110>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001258:	482f      	ldr	r0, [pc, #188]	@ (8001318 <MX_RTC_Init+0x110>)
 800125a:	f004 fee1 	bl	8006020 <HAL_RTC_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001264:	f7ff fdba 	bl	8000ddc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800127a:	2300      	movs	r3, #0
 800127c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001282:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	4823      	ldr	r0, [pc, #140]	@ (8001318 <MX_RTC_Init+0x110>)
 800128c:	f004 ff4b 	bl	8006126 <HAL_RTC_SetTime>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001296:	f7ff fda1 	bl	8000ddc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b6:	2201      	movs	r2, #1
 80012b8:	4619      	mov	r1, r3
 80012ba:	4817      	ldr	r0, [pc, #92]	@ (8001318 <MX_RTC_Init+0x110>)
 80012bc:	f004 ffcd 	bl	800625a <HAL_RTC_SetDate>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80012c6:	f7ff fd89 	bl	8000ddc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80012f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	2201      	movs	r2, #1
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_RTC_Init+0x110>)
 8001302:	f005 f82e 	bl	8006362 <HAL_RTC_SetAlarm>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800130c:	f7ff fd66 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3740      	adds	r7, #64	@ 0x40
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200005a4 	.word	0x200005a4
 800131c:	40002800 	.word	0x40002800

08001320 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	@ 0x38
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	2230      	movs	r2, #48	@ 0x30
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f006 faf9 	bl	8007928 <memset>
  if(rtcHandle->Instance==RTC)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a0c      	ldr	r2, [pc, #48]	@ (800136c <HAL_RTC_MspInit+0x4c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d111      	bne.n	8001364 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001340:	2320      	movs	r3, #32
 8001342:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4618      	mov	r0, r3
 8001350:	f004 fca6 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800135a:	f7ff fd3f 	bl	8000ddc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <HAL_RTC_MspInit+0x50>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001364:	bf00      	nop
 8001366:	3738      	adds	r7, #56	@ 0x38
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40002800 	.word	0x40002800
 8001370:	42470e3c 	.word	0x42470e3c

08001374 <UART_Transmit>:
#include "sdk_uart.h"
#include "usart.h"
#include <string.h>


void UART_Transmit(uint8_t data[]){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, data, strlen((const char*)data), 1000);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7fe ff37 	bl	80001f0 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4803      	ldr	r0, [pc, #12]	@ (800139c <UART_Transmit+0x28>)
 800138e:	f005 fedb 	bl	8007148 <HAL_UART_Transmit>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000624 	.word	0x20000624

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <HAL_MspInit+0x4c>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	4a08      	ldr	r2, [pc, #32]	@ (80013ec <HAL_MspInit+0x4c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 fbc5 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <DMA1_Stream0_IRQHandler+0x10>)
 8001456:	f000 fde3 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000138 	.word	0x20000138

08001464 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001468:	4802      	ldr	r0, [pc, #8]	@ (8001474 <DMA1_Stream6_IRQHandler+0x10>)
 800146a:	f000 fdd9 	bl	8002020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200000d8 	.word	0x200000d8

08001478 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <I2C1_EV_IRQHandler+0x10>)
 800147e:	f001 fe65 	bl	800314c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000084 	.word	0x20000084

0800148c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <I2C1_ER_IRQHandler+0x10>)
 8001492:	f001 ffae 	bl	80033f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000084 	.word	0x20000084

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	@ (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f006 fa32 	bl	8007938 <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20030000 	.word	0x20030000
 8001500:	00000400 	.word	0x00000400
 8001504:	200005c4 	.word	0x200005c4
 8001508:	200007b8 	.word	0x200007b8

0800150c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <SystemInit+0x20>)
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001516:	4a05      	ldr	r2, [pc, #20]	@ (800152c <SystemInit+0x20>)
 8001518:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800151c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <MX_TIM2_Init+0xac>)
 8001554:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001558:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <MX_TIM2_Init+0xac>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <MX_TIM2_Init+0xac>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_TIM2_Init+0xac>)
 8001568:	220a      	movs	r2, #10
 800156a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_TIM2_Init+0xac>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_TIM2_Init+0xac>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001578:	4818      	ldr	r0, [pc, #96]	@ (80015dc <MX_TIM2_Init+0xac>)
 800157a:	f005 f985 	bl	8006888 <HAL_TIM_PWM_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001584:	f7ff fc2a 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4619      	mov	r1, r3
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <MX_TIM2_Init+0xac>)
 8001598:	f005 fd0a 	bl	8006fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80015a2:	f7ff fc1b 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	@ 0x60
 80015a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4807      	ldr	r0, [pc, #28]	@ (80015dc <MX_TIM2_Init+0xac>)
 80015be:	f005 f9b3 	bl	8006928 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80015c8:	f7ff fc08 	bl	8000ddc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80015cc:	4803      	ldr	r0, [pc, #12]	@ (80015dc <MX_TIM2_Init+0xac>)
 80015ce:	f000 f827 	bl	8001620 <HAL_TIM_MspPostInit>

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200005c8 	.word	0x200005c8

080015e0 <HAL_TIM_PWM_MspInit>:
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f0:	d10d      	bne.n	800160e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <HAL_TIM_PWM_MspInit+0x3c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a08      	ldr	r2, [pc, #32]	@ (800161c <HAL_TIM_PWM_MspInit+0x3c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_TIM_PWM_MspInit+0x3c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800

08001620 <HAL_TIM_MspPostInit>:
  /* USER CODE END TIM7_MspInit 1 */
  }
}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001640:	d11d      	bne.n	800167e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a21      	ldr	r2, [pc, #132]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
	/**TIM2 GPIO Configuration
	PA5     ------> TIM2_CH1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800165e:	2320      	movs	r3, #32
 8001660:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800166e:	2301      	movs	r3, #1
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4816      	ldr	r0, [pc, #88]	@ (80016d4 <HAL_TIM_MspPostInit+0xb4>)
 800167a:	f000 ff1b 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

  if(timHandle->Instance==TIM4)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a15      	ldr	r2, [pc, #84]	@ (80016d8 <HAL_TIM_MspPostInit+0xb8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d11e      	bne.n	80016c6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6313      	str	r3, [r2, #48]	@ 0x30
 8001698:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <HAL_TIM_MspPostInit+0xb0>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016a4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b2:	2302      	movs	r3, #2
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016b6:	2302      	movs	r3, #2
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4806      	ldr	r0, [pc, #24]	@ (80016dc <HAL_TIM_MspPostInit+0xbc>)
 80016c2:	f000 fef7 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	@ 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40000800 	.word	0x40000800
 80016dc:	40020c00 	.word	0x40020c00

080016e0 <seconds_to_time>:

#define HOUR 3600
#define MINUTE 60


time_s seconds_to_time(size_t time) {
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	time_s result; // Declare a variable of type time_s
	result.hours = (time / HOUR) % 24;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <seconds_to_time+0x94>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0ad9      	lsrs	r1, r3, #11
 80016f2:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <seconds_to_time+0x98>)
 80016f4:	fba3 2301 	umull	r2, r3, r3, r1
 80016f8:	091a      	lsrs	r2, r3, #4
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	1aca      	subs	r2, r1, r3
 8001704:	b2d3      	uxtb	r3, r2
 8001706:	723b      	strb	r3, [r7, #8]
	result.minutes = (time % HOUR) / MINUTE;
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <seconds_to_time+0x94>)
 800170c:	fba3 1302 	umull	r1, r3, r3, r2
 8001710:	0adb      	lsrs	r3, r3, #11
 8001712:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4a17      	ldr	r2, [pc, #92]	@ (800177c <seconds_to_time+0x9c>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	b2db      	uxtb	r3, r3
 8001726:	727b      	strb	r3, [r7, #9]
	result.seconds = time % MINUTE;
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <seconds_to_time+0x9c>)
 800172c:	fba3 2301 	umull	r2, r3, r3, r1
 8001730:	095a      	lsrs	r2, r3, #5
 8001732:	4613      	mov	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	1aca      	subs	r2, r1, r3
 800173c:	b2d3      	uxtb	r3, r2
 800173e:	72bb      	strb	r3, [r7, #10]
	return result; // Return the result
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	f107 0208 	add.w	r2, r7, #8
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	4611      	mov	r1, r2
 800174c:	8019      	strh	r1, [r3, #0]
 800174e:	3302      	adds	r3, #2
 8001750:	0c12      	lsrs	r2, r2, #16
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	2300      	movs	r3, #0
 8001756:	7b3a      	ldrb	r2, [r7, #12]
 8001758:	f362 0307 	bfi	r3, r2, #0, #8
 800175c:	7b7a      	ldrb	r2, [r7, #13]
 800175e:	f362 230f 	bfi	r3, r2, #8, #8
 8001762:	7bba      	ldrb	r2, [r7, #14]
 8001764:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	91a2b3c5 	.word	0x91a2b3c5
 8001778:	aaaaaaab 	.word	0xaaaaaaab
 800177c:	88888889 	.word	0x88888889

08001780 <time_to_string>:

void time_to_string(const time_s *time, char *dest) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af02      	add	r7, sp, #8
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	snprintf(dest, REPRESENTATION_SIZE, "%02d:%02d:%02d", time->hours, time->minutes, time->seconds);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	9200      	str	r2, [sp, #0]
 800179e:	460b      	mov	r3, r1
 80017a0:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <time_to_string+0x34>)
 80017a2:	2109      	movs	r1, #9
 80017a4:	6838      	ldr	r0, [r7, #0]
 80017a6:	f006 f88b 	bl	80078c0 <sniprintf>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	080082d0 	.word	0x080082d0

080017b8 <handle_time_end>:
static size_t time_hour = 0;
static size_t time_min = 0;
static size_t time_sec = 0;
static size_t mojno = 0;

static void handle_time_end() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	Buzzer_Set_Volume(BUZZER_VOLUME_MAX);
 80017bc:	200a      	movs	r0, #10
 80017be:	f7fe ff0d 	bl	80005dc <Buzzer_Set_Volume>
	HAL_Delay(3000);
 80017c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017c6:	f000 fa25 	bl	8001c14 <HAL_Delay>
	Buzzer_Set_Volume(BUZZER_VOLUME_MUTE);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7fe ff06 	bl	80005dc <Buzzer_Set_Volume>
	HAL_Delay(1000);
 80017d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017d4:	f000 fa1e 	bl	8001c14 <HAL_Delay>

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <timer_tick>:

void timer_tick() {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
//	if (time_left) {
//		time_left--;
//		handle_time_end();
	if (time_sec == 0) {
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <timer_tick+0x68>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d126      	bne.n	8001836 <timer_tick+0x5a>
		if (time_min == 0) {
 80017e8:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <timer_tick+0x6c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d119      	bne.n	8001824 <timer_tick+0x48>
			if (time_hour > 0) {
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <timer_tick+0x70>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00b      	beq.n	8001810 <timer_tick+0x34>
				time_hour--;
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <timer_tick+0x70>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a13      	ldr	r2, [pc, #76]	@ (800184c <timer_tick+0x70>)
 8001800:	6013      	str	r3, [r2, #0]
				time_sec = 59;
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <timer_tick+0x68>)
 8001804:	223b      	movs	r2, #59	@ 0x3b
 8001806:	601a      	str	r2, [r3, #0]
				time_min = 59;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <timer_tick+0x6c>)
 800180a:	223b      	movs	r2, #59	@ 0x3b
 800180c:	601a      	str	r2, [r3, #0]
		}
	} else {
		time_sec--;
	}
//	}
}
 800180e:	e017      	b.n	8001840 <timer_tick+0x64>
				if (mojno == 1) {
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <timer_tick+0x74>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d113      	bne.n	8001840 <timer_tick+0x64>
					mojno=0;
 8001818:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <timer_tick+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
					handle_time_end();
 800181e:	f7ff ffcb 	bl	80017b8 <handle_time_end>
}
 8001822:	e00d      	b.n	8001840 <timer_tick+0x64>
			time_min--;
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <timer_tick+0x6c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <timer_tick+0x6c>)
 800182c:	6013      	str	r3, [r2, #0]
			time_sec = 59;
 800182e:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <timer_tick+0x68>)
 8001830:	223b      	movs	r2, #59	@ 0x3b
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	e004      	b.n	8001840 <timer_tick+0x64>
		time_sec--;
 8001836:	4b03      	ldr	r3, [pc, #12]	@ (8001844 <timer_tick+0x68>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3b01      	subs	r3, #1
 800183c:	4a01      	ldr	r2, [pc, #4]	@ (8001844 <timer_tick+0x68>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000061c 	.word	0x2000061c
 8001848:	20000618 	.word	0x20000618
 800184c:	20000614 	.word	0x20000614
 8001850:	20000620 	.word	0x20000620

08001854 <get_time>:

size_t get_time() {
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
	return time;
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <get_time+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000610 	.word	0x20000610

0800186c <handle_key_click>:

static key_e last_key = NONE_KEY;

void handle_key_click(const key_e *key) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	if (*key == last_key) return;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	4b49      	ldr	r3, [pc, #292]	@ (80019a0 <handle_key_click+0x134>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	f000 8089 	beq.w	8001994 <handle_key_click+0x128>
	last_key = *key;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b46      	ldr	r3, [pc, #280]	@ (80019a0 <handle_key_click+0x134>)
 8001888:	701a      	strb	r2, [r3, #0]

	switch (*key) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b0b      	cmp	r3, #11
 8001890:	d875      	bhi.n	800197e <handle_key_click+0x112>
 8001892:	a201      	add	r2, pc, #4	@ (adr r2, 8001898 <handle_key_click+0x2c>)
 8001894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001898:	080018dd 	.word	0x080018dd
 800189c:	080018f7 	.word	0x080018f7
 80018a0:	08001911 	.word	0x08001911
 80018a4:	0800192b 	.word	0x0800192b
 80018a8:	08001947 	.word	0x08001947
 80018ac:	08001963 	.word	0x08001963
 80018b0:	0800197f 	.word	0x0800197f
 80018b4:	0800197f 	.word	0x0800197f
 80018b8:	0800197f 	.word	0x0800197f
 80018bc:	0800197f 	.word	0x0800197f
 80018c0:	0800197f 	.word	0x0800197f
 80018c4:	080018c9 	.word	0x080018c9
	case START_KEY:
//		timer_start();
		break;
	case DELETE_KEY:
		time_hour = 0;
 80018c8:	4b36      	ldr	r3, [pc, #216]	@ (80019a4 <handle_key_click+0x138>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
		time_min = 0;
 80018ce:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <handle_key_click+0x13c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
		time_sec = 0;
 80018d4:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <handle_key_click+0x140>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
		break;
 80018da:	e057      	b.n	800198c <handle_key_click+0x120>
	case ONE_KEY:
		time_hour++;
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <handle_key_click+0x138>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	4a30      	ldr	r2, [pc, #192]	@ (80019a4 <handle_key_click+0x138>)
 80018e4:	6013      	str	r3, [r2, #0]
		if (time_hour > 23) {
 80018e6:	4b2f      	ldr	r3, [pc, #188]	@ (80019a4 <handle_key_click+0x138>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b17      	cmp	r3, #23
 80018ec:	d949      	bls.n	8001982 <handle_key_click+0x116>
			time_hour = 0;
 80018ee:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <handle_key_click+0x138>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
		}
		break;
 80018f4:	e045      	b.n	8001982 <handle_key_click+0x116>
	case TWO_KEY:
		time_min++;
 80018f6:	4b2c      	ldr	r3, [pc, #176]	@ (80019a8 <handle_key_click+0x13c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <handle_key_click+0x13c>)
 80018fe:	6013      	str	r3, [r2, #0]
		if (time_min > 59) {
 8001900:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <handle_key_click+0x13c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b3b      	cmp	r3, #59	@ 0x3b
 8001906:	d93e      	bls.n	8001986 <handle_key_click+0x11a>
			time_min = 0;
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <handle_key_click+0x13c>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
		}
		break;
 800190e:	e03a      	b.n	8001986 <handle_key_click+0x11a>
	case THREE_KEY:
		time_sec++;
 8001910:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <handle_key_click+0x140>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	4a25      	ldr	r2, [pc, #148]	@ (80019ac <handle_key_click+0x140>)
 8001918:	6013      	str	r3, [r2, #0]
		if (time_sec > 59) {
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <handle_key_click+0x140>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001920:	d933      	bls.n	800198a <handle_key_click+0x11e>
			time_sec = 0;
 8001922:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <handle_key_click+0x140>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
		}
		break;
 8001928:	e02f      	b.n	800198a <handle_key_click+0x11e>
	case FOUR_KEY:
		if (time_hour == 0) {
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <handle_key_click+0x138>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <handle_key_click+0xce>
			time_hour = 23;
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <handle_key_click+0x138>)
 8001934:	2217      	movs	r2, #23
 8001936:	601a      	str	r2, [r3, #0]
		} else {
			time_hour--;
		}
		break;
 8001938:	e028      	b.n	800198c <handle_key_click+0x120>
			time_hour--;
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <handle_key_click+0x138>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3b01      	subs	r3, #1
 8001940:	4a18      	ldr	r2, [pc, #96]	@ (80019a4 <handle_key_click+0x138>)
 8001942:	6013      	str	r3, [r2, #0]
		break;
 8001944:	e022      	b.n	800198c <handle_key_click+0x120>
	case FIVE_KEY:
		if (time_min == 0) {
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <handle_key_click+0x13c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d103      	bne.n	8001956 <handle_key_click+0xea>
			time_min = 59;
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <handle_key_click+0x13c>)
 8001950:	223b      	movs	r2, #59	@ 0x3b
 8001952:	601a      	str	r2, [r3, #0]
		} else {
			time_min--;
		}
		break;
 8001954:	e01a      	b.n	800198c <handle_key_click+0x120>
			time_min--;
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <handle_key_click+0x13c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3b01      	subs	r3, #1
 800195c:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <handle_key_click+0x13c>)
 800195e:	6013      	str	r3, [r2, #0]
		break;
 8001960:	e014      	b.n	800198c <handle_key_click+0x120>
	case SIX_KEY:
		if (time_sec == 0) {
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <handle_key_click+0x140>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d103      	bne.n	8001972 <handle_key_click+0x106>
			time_sec = 59;
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <handle_key_click+0x140>)
 800196c:	223b      	movs	r2, #59	@ 0x3b
 800196e:	601a      	str	r2, [r3, #0]
		} else {
			time_sec--;
		}
		break;
 8001970:	e00c      	b.n	800198c <handle_key_click+0x120>
			time_sec--;
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <handle_key_click+0x140>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3b01      	subs	r3, #1
 8001978:	4a0c      	ldr	r2, [pc, #48]	@ (80019ac <handle_key_click+0x140>)
 800197a:	6013      	str	r3, [r2, #0]
		break;
 800197c:	e006      	b.n	800198c <handle_key_click+0x120>
	default:
		break;
 800197e:	bf00      	nop
 8001980:	e004      	b.n	800198c <handle_key_click+0x120>
		break;
 8001982:	bf00      	nop
 8001984:	e002      	b.n	800198c <handle_key_click+0x120>
		break;
 8001986:	bf00      	nop
 8001988:	e000      	b.n	800198c <handle_key_click+0x120>
		break;
 800198a:	bf00      	nop
//		int8_t i = key_to_int(key);
//		input_time *= 10;
//		input_time += i;
	}
	mojno=1;
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <handle_key_click+0x144>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e000      	b.n	8001996 <handle_key_click+0x12a>
	if (*key == last_key) return;
 8001994:	bf00      	nop
}
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	2000000c 	.word	0x2000000c
 80019a4:	20000614 	.word	0x20000614
 80019a8:	20000618 	.word	0x20000618
 80019ac:	2000061c 	.word	0x2000061c
 80019b0:	20000620 	.word	0x20000620

080019b4 <update_timer_time>:

void update_timer_time(void) {
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	time = time_hour * 3600 + time_min * 60 + time_sec;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <update_timer_time+0x34>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80019c0:	fb02 f103 	mul.w	r1, r2, r3
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <update_timer_time+0x38>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	18ca      	adds	r2, r1, r3
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <update_timer_time+0x3c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a06      	ldr	r2, [pc, #24]	@ (80019f4 <update_timer_time+0x40>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000614 	.word	0x20000614
 80019ec:	20000618 	.word	0x20000618
 80019f0:	2000061c 	.word	0x2000061c
 80019f4:	20000610 	.word	0x20000610

080019f8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019fc:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 80019fe:	4a11      	ldr	r2, [pc, #68]	@ (8001a44 <MX_USART6_UART_Init+0x4c>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 112500;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 8001a04:	4a10      	ldr	r2, [pc, #64]	@ (8001a48 <MX_USART6_UART_Init+0x50>)
 8001a06:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 8001a1c:	220c      	movs	r2, #12
 8001a1e:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <MX_USART6_UART_Init+0x48>)
 8001a2e:	f005 fb3b 	bl	80070a8 <HAL_UART_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8001a38:	f7ff f9d0 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000624 	.word	0x20000624
 8001a44:	40011400 	.word	0x40011400
 8001a48:	0001b774 	.word	0x0001b774

08001a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <HAL_UART_MspInit+0x84>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d12b      	bne.n	8001ac6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a78:	f043 0320 	orr.w	r3, r3, #32
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a10      	ldr	r2, [pc, #64]	@ (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <HAL_UART_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa6:	23c0      	movs	r3, #192	@ 0xc0
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <HAL_UART_MspInit+0x8c>)
 8001ac2:	f000 fcf7 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	@ 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020800 	.word	0x40020800

08001adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae0:	f7ff fd14 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae6:	490d      	ldr	r1, [pc, #52]	@ (8001b1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001afc:	4c0a      	ldr	r4, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f005 ff1b 	bl	8007944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0e:	f7ff f895 	bl	8000c3c <main>
  bx  lr    
 8001b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b20:	080090a0 	.word	0x080090a0
  ldr r2, =_sbss
 8001b24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b28:	200007b8 	.word	0x200007b8

08001b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b34:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	@ (8001b70 <HAL_Init+0x40>)
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_Init+0x40>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <HAL_Init+0x40>)
 8001b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f94f 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	200f      	movs	r0, #15
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff fc1c 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f967 	bl	8001e66 <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bb0:	f000 f92f 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	@ (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000014 	.word	0x20000014
 8001bd0:	20000010 	.word	0x20000010

08001bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_IncTick+0x20>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <HAL_IncTick+0x24>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000014 	.word	0x20000014
 8001bf8:	2000066c 	.word	0x2000066c

08001bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001c00:	4b03      	ldr	r3, [pc, #12]	@ (8001c10 <HAL_GetTick+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	2000066c 	.word	0x2000066c

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff ffee 	bl	8001bfc <HAL_GetTick>
 8001c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_Delay+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3a:	bf00      	nop
 8001c3c:	f7ff ffde 	bl	8001bfc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000014 	.word	0x20000014

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	@ (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	@ (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff29 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff3e 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff31 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff feb6 	bl	8001bfc <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e099      	b.n	8001fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebc:	e00f      	b.n	8001ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ebe:	f7ff fe9d 	bl	8001bfc <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d908      	bls.n	8001ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e078      	b.n	8001fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e8      	bne.n	8001ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4b38      	ldr	r3, [pc, #224]	@ (8001fd8 <HAL_DMA_Init+0x158>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	4313      	orrs	r3, r2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 0307 	bic.w	r3, r3, #7
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d117      	bne.n	8001fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00e      	beq.n	8001fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fa19 	bl	80023bc <DMA_CheckFifoParam>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e016      	b.n	8001fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f9d0 	bl	8002350 <DMA_CalcBaseAndBitshift>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb8:	223f      	movs	r2, #63	@ 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	f010803f 	.word	0xf010803f

08001fdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00c      	b.n	8002014 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800202c:	4b8e      	ldr	r3, [pc, #568]	@ (8002268 <HAL_DMA_IRQHandler+0x248>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a8e      	ldr	r2, [pc, #568]	@ (800226c <HAL_DMA_IRQHandler+0x24c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0a9b      	lsrs	r3, r3, #10
 8002038:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	2208      	movs	r2, #8
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01a      	beq.n	800208c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0204 	bic.w	r2, r2, #4
 8002072:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	2208      	movs	r2, #8
 800207a:	409a      	lsls	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002090:	2201      	movs	r2, #1
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d012      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ae:	2201      	movs	r2, #1
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2204      	movs	r2, #4
 80020c8:	409a      	lsls	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d012      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	2204      	movs	r2, #4
 80020e6:	409a      	lsls	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f0:	f043 0204 	orr.w	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	2210      	movs	r2, #16
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d043      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03c      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211a:	2210      	movs	r2, #16
 800211c:	409a      	lsls	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d018      	beq.n	8002162 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d024      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
 800214e:	e01f      	b.n	8002190 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
 8002160:	e016      	b.n	8002190 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0208 	bic.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	2220      	movs	r2, #32
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 808f 	beq.w	80022c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8087 	beq.w	80022c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2220      	movs	r2, #32
 80021b8:	409a      	lsls	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d136      	bne.n	8002238 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0216 	bic.w	r2, r2, #22
 80021d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_DMA_IRQHandler+0x1da>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	223f      	movs	r2, #63	@ 0x3f
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222a:	2b00      	cmp	r3, #0
 800222c:	d07e      	beq.n	800232c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
        }
        return;
 8002236:	e079      	b.n	800232c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01d      	beq.n	8002282 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	2b00      	cmp	r3, #0
 800225a:	d031      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
 8002264:	e02c      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008
 800226c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d023      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	e01e      	b.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0210 	bic.w	r2, r2, #16
 800229e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d032      	beq.n	800232e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d022      	beq.n	800231a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2205      	movs	r2, #5
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d307      	bcc.n	8002308 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f2      	bne.n	80022ec <HAL_DMA_IRQHandler+0x2cc>
 8002306:	e000      	b.n	800230a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002308:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
 800232a:	e000      	b.n	800232e <HAL_DMA_IRQHandler+0x30e>
        return;
 800232c:	bf00      	nop
    }
  }
}
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002342:	b2db      	uxtb	r3, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3b10      	subs	r3, #16
 8002360:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800236a:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <DMA_CalcBaseAndBitshift+0x68>)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d909      	bls.n	8002392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	1d1a      	adds	r2, r3, #4
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002390:	e007      	b.n	80023a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	aaaaaaab 	.word	0xaaaaaaab
 80023b8:	08009054 	.word	0x08009054

080023bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11f      	bne.n	8002416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d856      	bhi.n	800248a <DMA_CheckFifoParam+0xce>
 80023dc:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <DMA_CheckFifoParam+0x28>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	08002407 	.word	0x08002407
 80023ec:	080023f5 	.word	0x080023f5
 80023f0:	0800248b 	.word	0x0800248b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d046      	beq.n	800248e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002404:	e043      	b.n	800248e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800240e:	d140      	bne.n	8002492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002414:	e03d      	b.n	8002492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800241e:	d121      	bne.n	8002464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d837      	bhi.n	8002496 <DMA_CheckFifoParam+0xda>
 8002426:	a201      	add	r2, pc, #4	@ (adr r2, 800242c <DMA_CheckFifoParam+0x70>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	0800243d 	.word	0x0800243d
 8002430:	08002443 	.word	0x08002443
 8002434:	0800243d 	.word	0x0800243d
 8002438:	08002455 	.word	0x08002455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	e030      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d025      	beq.n	800249a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002452:	e022      	b.n	800249a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800245c:	d11f      	bne.n	800249e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002462:	e01c      	b.n	800249e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d903      	bls.n	8002472 <DMA_CheckFifoParam+0xb6>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d003      	beq.n	8002478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002470:	e018      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      break;
 8002476:	e015      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00e      	beq.n	80024a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      break;
 8002488:	e00b      	b.n	80024a2 <DMA_CheckFifoParam+0xe6>
      break;
 800248a:	bf00      	nop
 800248c:	e00a      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
 8002490:	e008      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e006      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e004      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e002      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800249e:	bf00      	nop
 80024a0:	e000      	b.n	80024a4 <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
    }
  } 
  
  return status; 
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e177      	b.n	80027c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8166 	bne.w	80027ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d005      	beq.n	8002506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	2b02      	cmp	r3, #2
 8002504:	d130      	bne.n	8002568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d017      	beq.n	80025a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80c0 	beq.w	80027ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b66      	ldr	r3, [pc, #408]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	4a65      	ldr	r2, [pc, #404]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002648:	6453      	str	r3, [r2, #68]	@ 0x44
 800264a:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002656:	4a61      	ldr	r2, [pc, #388]	@ (80027dc <HAL_GPIO_Init+0x328>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <HAL_GPIO_Init+0x32c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d037      	beq.n	80026f2 <HAL_GPIO_Init+0x23e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a57      	ldr	r2, [pc, #348]	@ (80027e4 <HAL_GPIO_Init+0x330>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d031      	beq.n	80026ee <HAL_GPIO_Init+0x23a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a56      	ldr	r2, [pc, #344]	@ (80027e8 <HAL_GPIO_Init+0x334>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02b      	beq.n	80026ea <HAL_GPIO_Init+0x236>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a55      	ldr	r2, [pc, #340]	@ (80027ec <HAL_GPIO_Init+0x338>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d025      	beq.n	80026e6 <HAL_GPIO_Init+0x232>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a54      	ldr	r2, [pc, #336]	@ (80027f0 <HAL_GPIO_Init+0x33c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a53      	ldr	r2, [pc, #332]	@ (80027f4 <HAL_GPIO_Init+0x340>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x22a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_GPIO_Init+0x344>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x226>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a51      	ldr	r2, [pc, #324]	@ (80027fc <HAL_GPIO_Init+0x348>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x222>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a50      	ldr	r2, [pc, #320]	@ (8002800 <HAL_GPIO_Init+0x34c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x21e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002804 <HAL_GPIO_Init+0x350>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x21a>
 80026ca:	2309      	movs	r3, #9
 80026cc:	e012      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ce:	230a      	movs	r3, #10
 80026d0:	e010      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026d2:	2308      	movs	r3, #8
 80026d4:	e00e      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e00c      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026da:	2306      	movs	r3, #6
 80026dc:	e00a      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026de:	2305      	movs	r3, #5
 80026e0:	e008      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x240>
 80026f2:	2300      	movs	r3, #0
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f002 0203 	and.w	r2, r2, #3
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4093      	lsls	r3, r2
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002704:	4935      	ldr	r1, [pc, #212]	@ (80027dc <HAL_GPIO_Init+0x328>)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b3d      	ldr	r3, [pc, #244]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a34      	ldr	r2, [pc, #208]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b32      	ldr	r3, [pc, #200]	@ (8002808 <HAL_GPIO_Init+0x354>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a29      	ldr	r2, [pc, #164]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002766:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800278a:	4a1f      	ldr	r2, [pc, #124]	@ (8002808 <HAL_GPIO_Init+0x354>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_GPIO_Init+0x354>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b4:	4a14      	ldr	r2, [pc, #80]	@ (8002808 <HAL_GPIO_Init+0x354>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3301      	adds	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	f67f ae84 	bls.w	80024d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3724      	adds	r7, #36	@ 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40013800 	.word	0x40013800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020400 	.word	0x40020400
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40021400 	.word	0x40021400
 80027f8:	40021800 	.word	0x40021800
 80027fc:	40021c00 	.word	0x40021c00
 8002800:	40022000 	.word	0x40022000
 8002804:	40022400 	.word	0x40022400
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002828:	e003      	b.n	8002832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	041a      	lsls	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	619a      	str	r2, [r3, #24]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e12b      	b.n	8002aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fd ffa2 	bl	80007b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	@ 0x24
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a4:	f003 f9d4 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 80028a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a81      	ldr	r2, [pc, #516]	@ (8002ab4 <HAL_I2C_Init+0x274>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d807      	bhi.n	80028c4 <HAL_I2C_Init+0x84>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a80      	ldr	r2, [pc, #512]	@ (8002ab8 <HAL_I2C_Init+0x278>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e006      	b.n	80028d2 <HAL_I2C_Init+0x92>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a7d      	ldr	r2, [pc, #500]	@ (8002abc <HAL_I2C_Init+0x27c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0e7      	b.n	8002aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4a78      	ldr	r2, [pc, #480]	@ (8002ac0 <HAL_I2C_Init+0x280>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a6a      	ldr	r2, [pc, #424]	@ (8002ab4 <HAL_I2C_Init+0x274>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d802      	bhi.n	8002914 <HAL_I2C_Init+0xd4>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3301      	adds	r3, #1
 8002912:	e009      	b.n	8002928 <HAL_I2C_Init+0xe8>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	4a69      	ldr	r2, [pc, #420]	@ (8002ac4 <HAL_I2C_Init+0x284>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	3301      	adds	r3, #1
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800293a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	495c      	ldr	r1, [pc, #368]	@ (8002ab4 <HAL_I2C_Init+0x274>)
 8002944:	428b      	cmp	r3, r1
 8002946:	d819      	bhi.n	800297c <HAL_I2C_Init+0x13c>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e59      	subs	r1, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fbb1 f3f3 	udiv	r3, r1, r3
 8002956:	1c59      	adds	r1, r3, #1
 8002958:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800295c:	400b      	ands	r3, r1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_I2C_Init+0x138>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e59      	subs	r1, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002976:	e051      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 8002978:	2304      	movs	r3, #4
 800297a:	e04f      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d111      	bne.n	80029a8 <HAL_I2C_Init+0x168>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e012      	b.n	80029ce <HAL_I2C_Init+0x18e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e58      	subs	r0, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	0099      	lsls	r1, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x196>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e022      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10e      	bne.n	80029fc <HAL_I2C_Init+0x1bc>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e58      	subs	r0, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	440b      	add	r3, r1
 80029ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029fa:	e00f      	b.n	8002a1c <HAL_I2C_Init+0x1dc>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6809      	ldr	r1, [r1, #0]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6911      	ldr	r1, [r2, #16]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	000186a0 	.word	0x000186a0
 8002ab8:	001e847f 	.word	0x001e847f
 8002abc:	003d08ff 	.word	0x003d08ff
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ada:	2b80      	cmp	r3, #128	@ 0x80
 8002adc:	d103      	bne.n	8002ae6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	460b      	mov	r3, r1
 8002b08:	813b      	strh	r3, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b0e:	f7ff f875 	bl	8001bfc <HAL_GetTick>
 8002b12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	f040 80d9 	bne.w	8002cd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2319      	movs	r3, #25
 8002b28:	2201      	movs	r2, #1
 8002b2a:	496d      	ldr	r1, [pc, #436]	@ (8002ce0 <HAL_I2C_Mem_Write+0x1ec>)
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f002 f911 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0cc      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2C_Mem_Write+0x56>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0c5      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d007      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2221      	movs	r2, #33	@ 0x21
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2240      	movs	r2, #64	@ 0x40
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce4 <HAL_I2C_Mem_Write+0x1f0>)
 8002bb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb2:	88f8      	ldrh	r0, [r7, #6]
 8002bb4:	893a      	ldrh	r2, [r7, #8]
 8002bb6:	8979      	ldrh	r1, [r7, #10]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f001 fea0 	bl	8004908 <I2C_RequestMemoryWrite>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d052      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e081      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f002 f9d6 	bl	8004f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d107      	bne.n	8002bfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06b      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d11b      	bne.n	8002c74 <HAL_I2C_Mem_Write+0x180>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d017      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1aa      	bne.n	8002bd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f002 f9c9 	bl	8005018 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d107      	bne.n	8002ca4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e016      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
  }
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	00100002 	.word	0x00100002
 8002ce4:	ffff0000 	.word	0xffff0000

08002ce8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	@ 0x30
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d02:	f7fe ff7b 	bl	8001bfc <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	f040 8214 	bne.w	800313e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2319      	movs	r3, #25
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	497b      	ldr	r1, [pc, #492]	@ (8002f0c <HAL_I2C_Mem_Read+0x224>)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f002 f817 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e207      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x56>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e200      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d007      	beq.n	8002d64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2222      	movs	r2, #34	@ 0x22
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2240      	movs	r2, #64	@ 0x40
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f10 <HAL_I2C_Mem_Read+0x228>)
 8002da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002da6:	88f8      	ldrh	r0, [r7, #6]
 8002da8:	893a      	ldrh	r2, [r7, #8]
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4603      	mov	r3, r0
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f001 fe3c 	bl	8004a34 <I2C_RequestMemoryRead>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e1bc      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d113      	bne.n	8002df6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	623b      	str	r3, [r7, #32]
 8002de2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e190      	b.n	8003118 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d11b      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e170      	b.n	8003118 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d11b      	bne.n	8002e76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	e150      	b.n	8003118 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e8c:	e144      	b.n	8003118 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	f200 80f1 	bhi.w	800307a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d123      	bne.n	8002ee8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f002 f931 	bl	800510c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e145      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ee6:	e117      	b.n	8003118 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d14e      	bne.n	8002f8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4906      	ldr	r1, [pc, #24]	@ (8002f14 <HAL_I2C_Mem_Read+0x22c>)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f001 ff2a 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e11a      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
 8002f0a:	bf00      	nop
 8002f0c:	00100002 	.word	0x00100002
 8002f10:	ffff0000 	.word	0xffff0000
 8002f14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f8c:	e0c4      	b.n	8003118 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	2200      	movs	r2, #0
 8002f96:	496c      	ldr	r1, [pc, #432]	@ (8003148 <HAL_I2C_Mem_Read+0x460>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f001 fedb 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0cb      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4955      	ldr	r1, [pc, #340]	@ (8003148 <HAL_I2C_Mem_Read+0x460>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f001 fead 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e09d      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003078:	e04e      	b.n	8003118 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f002 f844 	bl	800510c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e058      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d124      	bne.n	8003118 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d107      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f aeb6 	bne.w	8002e8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
  }
}
 8003140:	4618      	mov	r0, r3
 8003142:	3728      	adds	r7, #40	@ 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	00010004 	.word	0x00010004

0800314c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800316c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003174:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b10      	cmp	r3, #16
 800317a:	d003      	beq.n	8003184 <HAL_I2C_EV_IRQHandler+0x38>
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b40      	cmp	r3, #64	@ 0x40
 8003180:	f040 80b1 	bne.w	80032e6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_I2C_EV_IRQHandler+0x6e>
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80031a4:	d003      	beq.n	80031ae <HAL_I2C_EV_IRQHandler+0x62>
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_EV_IRQHandler+0x66>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_I2C_EV_IRQHandler+0x68>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	f000 8114 	beq.w	80033e2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <HAL_I2C_EV_IRQHandler+0x90>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f002 f828 	bl	8005224 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fd7a 	bl	8003cce <I2C_Master_SB>
 80031da:	e083      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_I2C_EV_IRQHandler+0xac>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fdf2 	bl	8003dda <I2C_Master_ADD10>
 80031f6:	e075      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0xc8>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fe0e 	bl	8003e2e <I2C_Master_ADDR>
 8003212:	e067      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d036      	beq.n	800328c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800322c:	f000 80db 	beq.w	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0x10a>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0x10a>
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f9d6 	bl	8003600 <I2C_MasterTransmit_TXE>
 8003254:	e046      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80c2 	beq.w	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80bc 	beq.w	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800326e:	7bbb      	ldrb	r3, [r7, #14]
 8003270:	2b21      	cmp	r3, #33	@ 0x21
 8003272:	d103      	bne.n	800327c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fa5f 	bl	8003738 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327a:	e0b4      	b.n	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b40      	cmp	r3, #64	@ 0x40
 8003280:	f040 80b1 	bne.w	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 facd 	bl	8003824 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328a:	e0ac      	b.n	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800329a:	f000 80a4 	beq.w	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <HAL_I2C_EV_IRQHandler+0x178>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_I2C_EV_IRQHandler+0x178>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fb49 	bl	8003954 <I2C_MasterReceive_RXNE>
 80032c2:	e00f      	b.n	80032e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 808b 	beq.w	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8085 	beq.w	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fc01 	bl	8003ae4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e2:	e080      	b.n	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
 80032e4:	e07f      	b.n	80033e6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	e007      	b.n	8003308 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d011      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00c      	beq.n	8003336 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 ffcc 	bl	80042cc <I2C_Slave_ADDR>
 8003334:	e05a      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x206>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f001 f806 	bl	800435c <I2C_Slave_STOPF>
 8003350:	e04c      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	2b21      	cmp	r3, #33	@ 0x21
 8003356:	d002      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x212>
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	2b29      	cmp	r3, #41	@ 0x29
 800335c:	d120      	bne.n	80033a0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <HAL_I2C_EV_IRQHandler+0x238>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_I2C_EV_IRQHandler+0x238>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fee7 	bl	8004150 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003382:	e032      	b.n	80033ea <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02d      	beq.n	80033ea <HAL_I2C_EV_IRQHandler+0x29e>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003394:	2b00      	cmp	r3, #0
 8003396:	d028      	beq.n	80033ea <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 ff16 	bl	80041ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800339e:	e024      	b.n	80033ea <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00d      	beq.n	80033c6 <HAL_I2C_EV_IRQHandler+0x27a>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_I2C_EV_IRQHandler+0x27a>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 ff24 	bl	800420c <I2C_SlaveReceive_RXNE>
 80033c4:	e012      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x2a0>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 ff54 	bl	8004288 <I2C_SlaveReceive_BTF>
 80033e0:	e004      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80033e2:	bf00      	nop
 80033e4:	e002      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b08a      	sub	sp, #40	@ 0x28
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003414:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <HAL_I2C_ER_IRQHandler+0x4a>
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800343a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <HAL_I2C_ER_IRQHandler+0x70>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	f043 0302 	orr.w	r3, r3, #2
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003460:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d03e      	beq.n	80034ea <HAL_I2C_ER_IRQHandler+0xf8>
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d039      	beq.n	80034ea <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003476:	7efb      	ldrb	r3, [r7, #27]
 8003478:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003488:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003490:	7ebb      	ldrb	r3, [r7, #26]
 8003492:	2b20      	cmp	r3, #32
 8003494:	d112      	bne.n	80034bc <HAL_I2C_ER_IRQHandler+0xca>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10f      	bne.n	80034bc <HAL_I2C_ER_IRQHandler+0xca>
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b21      	cmp	r3, #33	@ 0x21
 80034a0:	d008      	beq.n	80034b4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b29      	cmp	r3, #41	@ 0x29
 80034a6:	d005      	beq.n	80034b4 <HAL_I2C_ER_IRQHandler+0xc2>
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b28      	cmp	r3, #40	@ 0x28
 80034ac:	d106      	bne.n	80034bc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b21      	cmp	r3, #33	@ 0x21
 80034b2:	d103      	bne.n	80034bc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f001 f881 	bl	80045bc <I2C_Slave_AF>
 80034ba:	e016      	b.n	80034ea <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034ce:	7efb      	ldrb	r3, [r7, #27]
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d002      	beq.n	80034da <HAL_I2C_ER_IRQHandler+0xe8>
 80034d4:	7efb      	ldrb	r3, [r7, #27]
 80034d6:	2b40      	cmp	r3, #64	@ 0x40
 80034d8:	d107      	bne.n	80034ea <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <HAL_I2C_ER_IRQHandler+0x11e>
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800350e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f001 f8be 	bl	80046a4 <I2C_ITError>
  }
}
 8003528:	bf00      	nop
 800352a:	3728      	adds	r7, #40	@ 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
 800358c:	4613      	mov	r3, r2
 800358e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800360e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003616:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003622:	2b00      	cmp	r3, #0
 8003624:	d150      	bne.n	80036c8 <I2C_MasterTransmit_TXE+0xc8>
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b21      	cmp	r3, #33	@ 0x21
 800362a:	d14d      	bne.n	80036c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b08      	cmp	r3, #8
 8003630:	d01d      	beq.n	800366e <I2C_MasterTransmit_TXE+0x6e>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b20      	cmp	r3, #32
 8003636:	d01a      	beq.n	800366e <I2C_MasterTransmit_TXE+0x6e>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800363e:	d016      	beq.n	800366e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800364e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2211      	movs	r2, #17
 8003654:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff62 	bl	8003530 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800366c:	e060      	b.n	8003730 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800367c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b40      	cmp	r3, #64	@ 0x40
 80036a6:	d107      	bne.n	80036b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff7d 	bl	80035b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036b6:	e03b      	b.n	8003730 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff35 	bl	8003530 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036c6:	e033      	b.n	8003730 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b21      	cmp	r3, #33	@ 0x21
 80036cc:	d005      	beq.n	80036da <I2C_MasterTransmit_TXE+0xda>
 80036ce:	7bbb      	ldrb	r3, [r7, #14]
 80036d0:	2b40      	cmp	r3, #64	@ 0x40
 80036d2:	d12d      	bne.n	8003730 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b22      	cmp	r3, #34	@ 0x22
 80036d8:	d12a      	bne.n	8003730 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036f4:	e01c      	b.n	8003730 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b40      	cmp	r3, #64	@ 0x40
 8003700:	d103      	bne.n	800370a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f88e 	bl	8003824 <I2C_MemoryTransmit_TXE_BTF>
}
 8003708:	e012      	b.n	8003730 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800372e:	e7ff      	b.n	8003730 <I2C_MasterTransmit_TXE+0x130>
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b21      	cmp	r3, #33	@ 0x21
 8003750:	d164      	bne.n	800381c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003780:	e04c      	b.n	800381c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d01d      	beq.n	80037c4 <I2C_MasterTransmit_BTF+0x8c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b20      	cmp	r3, #32
 800378c:	d01a      	beq.n	80037c4 <I2C_MasterTransmit_BTF+0x8c>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003794:	d016      	beq.n	80037c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2211      	movs	r2, #17
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff feb7 	bl	8003530 <HAL_I2C_MasterTxCpltCallback>
}
 80037c2:	e02b      	b.n	800381c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b40      	cmp	r3, #64	@ 0x40
 80037fc:	d107      	bne.n	800380e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fed2 	bl	80035b0 <HAL_I2C_MemTxCpltCallback>
}
 800380c:	e006      	b.n	800381c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe8a 	bl	8003530 <HAL_I2C_MasterTxCpltCallback>
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003832:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003838:	2b00      	cmp	r3, #0
 800383a:	d11d      	bne.n	8003878 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10b      	bne.n	800385c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003848:	b2da      	uxtb	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003854:	1c9a      	adds	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800385a:	e077      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003860:	b29b      	uxth	r3, r3
 8003862:	121b      	asrs	r3, r3, #8
 8003864:	b2da      	uxtb	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003876:	e069      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10b      	bne.n	8003898 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003884:	b2da      	uxtb	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003896:	e059      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389c:	2b02      	cmp	r3, #2
 800389e:	d152      	bne.n	8003946 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b22      	cmp	r3, #34	@ 0x22
 80038a4:	d10d      	bne.n	80038c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038c0:	e044      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b21      	cmp	r3, #33	@ 0x21
 80038d0:	d112      	bne.n	80038f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038f6:	e029      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d124      	bne.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b21      	cmp	r3, #33	@ 0x21
 8003906:	d121      	bne.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003916:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003926:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fe36 	bl	80035b0 <HAL_I2C_MemTxCpltCallback>
}
 8003944:	e002      	b.n	800394c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff f8be 	bl	8002ac8 <I2C_Flush_DR>
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b22      	cmp	r3, #34	@ 0x22
 8003966:	f040 80b9 	bne.w	8003adc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d921      	bls.n	80039c2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	f040 8096 	bne.w	8003adc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039be:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80039c0:	e08c      	b.n	8003adc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d07f      	beq.n	8003aca <I2C_MasterReceive_RXNE+0x176>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d002      	beq.n	80039d6 <I2C_MasterReceive_RXNE+0x82>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d179      	bne.n	8003aca <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f001 fb66 	bl	80050a8 <I2C_WaitOnSTOPRequestThroughIT>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d14c      	bne.n	8003a7c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a00:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d10a      	bne.n	8003a52 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fdba 	bl	80035c4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a50:	e044      	b.n	8003adc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d002      	beq.n	8003a66 <I2C_MasterReceive_RXNE+0x112>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d103      	bne.n	8003a6e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a6c:	e002      	b.n	8003a74 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2212      	movs	r2, #18
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fd65 	bl	8003544 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a7a:	e02f      	b.n	8003adc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fd88 	bl	80035d8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ac8:	e008      	b.n	8003adc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad8:	605a      	str	r2, [r3, #4]
}
 8003ada:	e7ff      	b.n	8003adc <I2C_MasterReceive_RXNE+0x188>
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b0a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b32:	e0c8      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d129      	bne.n	8003b92 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b4c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d00a      	beq.n	8003b6a <I2C_MasterReceive_BTF+0x86>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d007      	beq.n	8003b6a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b68:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b90:	e099      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	f040 8081 	bne.w	8003ca0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d002      	beq.n	8003baa <I2C_MasterReceive_BTF+0xc6>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d108      	bne.n	8003bbc <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e019      	b.n	8003bf0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d002      	beq.n	8003bc8 <I2C_MasterReceive_BTF+0xe4>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d108      	bne.n	8003bda <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e00a      	b.n	8003bf0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d007      	beq.n	8003bf0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b40      	cmp	r3, #64	@ 0x40
 8003c5e:	d10a      	bne.n	8003c76 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fca8 	bl	80035c4 <HAL_I2C_MemRxCpltCallback>
}
 8003c74:	e027      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d002      	beq.n	8003c8a <I2C_MasterReceive_BTF+0x1a6>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d103      	bne.n	8003c92 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c90:	e002      	b.n	8003c98 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2212      	movs	r2, #18
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff fc53 	bl	8003544 <HAL_I2C_MasterRxCpltCallback>
}
 8003c9e:	e012      	b.n	8003cc6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b40      	cmp	r3, #64	@ 0x40
 8003ce0:	d117      	bne.n	8003d12 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cfa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003cfc:	e067      	b.n	8003dce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	611a      	str	r2, [r3, #16]
}
 8003d10:	e05d      	b.n	8003dce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d1a:	d133      	bne.n	8003d84 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b21      	cmp	r3, #33	@ 0x21
 8003d26:	d109      	bne.n	8003d3c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d38:	611a      	str	r2, [r3, #16]
 8003d3a:	e008      	b.n	8003d4e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <I2C_Master_SB+0x92>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d108      	bne.n	8003d72 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d032      	beq.n	8003dce <I2C_Master_SB+0x100>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02d      	beq.n	8003dce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d80:	605a      	str	r2, [r3, #4]
}
 8003d82:	e024      	b.n	8003dce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10e      	bne.n	8003daa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	11db      	asrs	r3, r3, #7
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 0306 	and.w	r3, r3, #6
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f063 030f 	orn	r3, r3, #15
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]
}
 8003da8:	e011      	b.n	8003dce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10d      	bne.n	8003dce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	11db      	asrs	r3, r3, #7
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 0306 	and.w	r3, r3, #6
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f063 030e 	orn	r3, r3, #14
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <I2C_Master_ADD10+0x26>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <I2C_Master_ADD10+0x48>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e20:	605a      	str	r2, [r3, #4]
  }
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b091      	sub	sp, #68	@ 0x44
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b22      	cmp	r3, #34	@ 0x22
 8003e56:	f040 8169 	bne.w	800412c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <I2C_Master_ADDR+0x54>
 8003e62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003e66:	2b40      	cmp	r3, #64	@ 0x40
 8003e68:	d10b      	bne.n	8003e82 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e80:	e160      	b.n	8004144 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11d      	bne.n	8003ec6 <I2C_Master_ADDR+0x98>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e92:	d118      	bne.n	8003ec6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e94:	2300      	movs	r3, #0
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eb8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ec4:	e13e      	b.n	8004144 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d113      	bne.n	8003ef8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e115      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	f040 808a 	bne.w	8004018 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f0a:	d137      	bne.n	8003f7c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2a:	d113      	bne.n	8003f54 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f3a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	e0e7      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f54:	2300      	movs	r3, #0
 8003f56:	623b      	str	r3, [r7, #32]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	623b      	str	r3, [r7, #32]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	623b      	str	r3, [r7, #32]
 8003f68:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e0d3      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d02e      	beq.n	8003fe0 <I2C_Master_ADDR+0x1b2>
 8003f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d02b      	beq.n	8003fe0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	2b12      	cmp	r3, #18
 8003f8c:	d102      	bne.n	8003f94 <I2C_Master_ADDR+0x166>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d125      	bne.n	8003fe0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d00e      	beq.n	8003fb8 <I2C_Master_ADDR+0x18a>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d00b      	beq.n	8003fb8 <I2C_Master_ADDR+0x18a>
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	2b10      	cmp	r3, #16
 8003fa4:	d008      	beq.n	8003fb8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e007      	b.n	8003fc8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fc6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	e0a1      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	61bb      	str	r3, [r7, #24]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e085      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d14d      	bne.n	80040be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	2b04      	cmp	r3, #4
 8004026:	d016      	beq.n	8004056 <I2C_Master_ADDR+0x228>
 8004028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402a:	2b02      	cmp	r3, #2
 800402c:	d013      	beq.n	8004056 <I2C_Master_ADDR+0x228>
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	2b10      	cmp	r3, #16
 8004032:	d010      	beq.n	8004056 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004042:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e007      	b.n	8004066 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004064:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004074:	d117      	bne.n	80040a6 <I2C_Master_ADDR+0x278>
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004078:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800407c:	d00b      	beq.n	8004096 <I2C_Master_ADDR+0x268>
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	2b01      	cmp	r3, #1
 8004082:	d008      	beq.n	8004096 <I2C_Master_ADDR+0x268>
 8004084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004086:	2b08      	cmp	r3, #8
 8004088:	d005      	beq.n	8004096 <I2C_Master_ADDR+0x268>
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	2b10      	cmp	r3, #16
 800408e:	d002      	beq.n	8004096 <I2C_Master_ADDR+0x268>
 8004090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004092:	2b20      	cmp	r3, #32
 8004094:	d107      	bne.n	80040a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	e032      	b.n	8004124 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040dc:	d117      	bne.n	800410e <I2C_Master_ADDR+0x2e0>
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040e4:	d00b      	beq.n	80040fe <I2C_Master_ADDR+0x2d0>
 80040e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d008      	beq.n	80040fe <I2C_Master_ADDR+0x2d0>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d005      	beq.n	80040fe <I2C_Master_ADDR+0x2d0>
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d002      	beq.n	80040fe <I2C_Master_ADDR+0x2d0>
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d107      	bne.n	800410e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800410c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800412a:	e00b      	b.n	8004144 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	e7ff      	b.n	8004144 <I2C_Master_ADDR+0x316>
 8004144:	bf00      	nop
 8004146:	3744      	adds	r7, #68	@ 0x44
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02b      	beq.n	80041c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d114      	bne.n	80041c2 <I2C_SlaveTransmit_TXE+0x72>
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b29      	cmp	r3, #41	@ 0x29
 800419c:	d111      	bne.n	80041c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2221      	movs	r2, #33	@ 0x21
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2228      	movs	r2, #40	@ 0x28
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff f9cb 	bl	8003558 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d011      	beq.n	8004200 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02c      	beq.n	8004280 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d114      	bne.n	8004280 <I2C_SlaveReceive_RXNE+0x74>
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b2a      	cmp	r3, #42	@ 0x2a
 800425a:	d111      	bne.n	8004280 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2222      	movs	r2, #34	@ 0x22
 8004270:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2228      	movs	r2, #40	@ 0x28
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff f976 	bl	800356c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042e6:	2b28      	cmp	r3, #40	@ 0x28
 80042e8:	d125      	bne.n	8004336 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	81bb      	strh	r3, [r7, #12]
 8004318:	e002      	b.n	8004320 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004328:	89ba      	ldrh	r2, [r7, #12]
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff f926 	bl	8003580 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004334:	e00e      	b.n	8004354 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800437a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b8:	d172      	bne.n	80044a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b22      	cmp	r3, #34	@ 0x22
 80043be:	d002      	beq.n	80043c6 <I2C_Slave_STOPF+0x6a>
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043c4:	d135      	bne.n	8004432 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd ff98 	bl	8002334 <HAL_DMA_GetState>
 8004404:	4603      	mov	r3, r0
 8004406:	2b01      	cmp	r3, #1
 8004408:	d049      	beq.n	800449e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440e:	4a69      	ldr	r2, [pc, #420]	@ (80045b4 <I2C_Slave_STOPF+0x258>)
 8004410:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd fde0 	bl	8001fdc <HAL_DMA_Abort_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03d      	beq.n	800449e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800442c:	4610      	mov	r0, r2
 800442e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004430:	e035      	b.n	800449e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f043 0204 	orr.w	r2, r3, #4
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004464:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd ff62 	bl	8002334 <HAL_DMA_GetState>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d014      	beq.n	80044a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447a:	4a4e      	ldr	r2, [pc, #312]	@ (80045b4 <I2C_Slave_STOPF+0x258>)
 800447c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd fdaa 	bl	8001fdc <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004498:	4610      	mov	r0, r2
 800449a:	4798      	blx	r3
 800449c:	e000      	b.n	80044a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800449e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03e      	beq.n	8004528 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d112      	bne.n	80044de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d112      	bne.n	8004512 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8b7 	bl	80046a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004536:	e039      	b.n	80045ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b2a      	cmp	r3, #42	@ 0x2a
 800453c:	d109      	bne.n	8004552 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2228      	movs	r2, #40	@ 0x28
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff f80d 	bl	800356c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b28      	cmp	r3, #40	@ 0x28
 800455c:	d111      	bne.n	8004582 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a15      	ldr	r2, [pc, #84]	@ (80045b8 <I2C_Slave_STOPF+0x25c>)
 8004562:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff f80e 	bl	800359c <HAL_I2C_ListenCpltCallback>
}
 8004580:	e014      	b.n	80045ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	2b22      	cmp	r3, #34	@ 0x22
 8004588:	d002      	beq.n	8004590 <I2C_Slave_STOPF+0x234>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b22      	cmp	r3, #34	@ 0x22
 800458e:	d10d      	bne.n	80045ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe ffe0 	bl	800356c <HAL_I2C_SlaveRxCpltCallback>
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08004c05 	.word	0x08004c05
 80045b8:	ffff0000 	.word	0xffff0000

080045bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d002      	beq.n	80045de <I2C_Slave_AF+0x22>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d129      	bne.n	8004632 <I2C_Slave_AF+0x76>
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b28      	cmp	r3, #40	@ 0x28
 80045e2:	d126      	bne.n	8004632 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a2e      	ldr	r2, [pc, #184]	@ (80046a0 <I2C_Slave_AF+0xe4>)
 80045e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004602:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004612:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe ffb6 	bl	800359c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004630:	e031      	b.n	8004696 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	2b21      	cmp	r3, #33	@ 0x21
 8004636:	d129      	bne.n	800468c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a19      	ldr	r2, [pc, #100]	@ (80046a0 <I2C_Slave_AF+0xe4>)
 800463c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2221      	movs	r2, #33	@ 0x21
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004662:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800466c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fe fa22 	bl	8002ac8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fe ff67 	bl	8003558 <HAL_I2C_SlaveTxCpltCallback>
}
 800468a:	e004      	b.n	8004696 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004694:	615a      	str	r2, [r3, #20]
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	ffff0000 	.word	0xffff0000

080046a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046bc:	7bbb      	ldrb	r3, [r7, #14]
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d002      	beq.n	80046c8 <I2C_ITError+0x24>
 80046c2:	7bbb      	ldrb	r3, [r7, #14]
 80046c4:	2b40      	cmp	r3, #64	@ 0x40
 80046c6:	d10a      	bne.n	80046de <I2C_ITError+0x3a>
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b22      	cmp	r3, #34	@ 0x22
 80046cc:	d107      	bne.n	80046de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046e4:	2b28      	cmp	r3, #40	@ 0x28
 80046e6:	d107      	bne.n	80046f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2228      	movs	r2, #40	@ 0x28
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046f6:	e015      	b.n	8004724 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004706:	d00a      	beq.n	800471e <I2C_ITError+0x7a>
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b60      	cmp	r3, #96	@ 0x60
 800470c:	d007      	beq.n	800471e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800472e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004732:	d162      	bne.n	80047fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004742:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b01      	cmp	r3, #1
 8004750:	d020      	beq.n	8004794 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	4a6a      	ldr	r2, [pc, #424]	@ (8004900 <I2C_ITError+0x25c>)
 8004758:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475e:	4618      	mov	r0, r3
 8004760:	f7fd fc3c 	bl	8001fdc <HAL_DMA_Abort_IT>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8089 	beq.w	800487e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800478e:	4610      	mov	r0, r2
 8004790:	4798      	blx	r3
 8004792:	e074      	b.n	800487e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004798:	4a59      	ldr	r2, [pc, #356]	@ (8004900 <I2C_ITError+0x25c>)
 800479a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd fc1b 	bl	8001fdc <HAL_DMA_Abort_IT>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d068      	beq.n	800487e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b6:	2b40      	cmp	r3, #64	@ 0x40
 80047b8:	d10b      	bne.n	80047d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
 80047f8:	e041      	b.n	800487e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b60      	cmp	r3, #96	@ 0x60
 8004804:	d125      	bne.n	8004852 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481e:	2b40      	cmp	r3, #64	@ 0x40
 8004820:	d10b      	bne.n	800483a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fe fece 	bl	80035ec <HAL_I2C_AbortCpltCallback>
 8004850:	e015      	b.n	800487e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d10b      	bne.n	8004878 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fe fead 	bl	80035d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10e      	bne.n	80048ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d113      	bne.n	80048f8 <I2C_ITError+0x254>
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b28      	cmp	r3, #40	@ 0x28
 80048d4:	d110      	bne.n	80048f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <I2C_ITError+0x260>)
 80048da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fe fe52 	bl	800359c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	08004c05 	.word	0x08004c05
 8004904:	ffff0000 	.word	0xffff0000

08004908 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	4608      	mov	r0, r1
 8004912:	4611      	mov	r1, r2
 8004914:	461a      	mov	r2, r3
 8004916:	4603      	mov	r3, r0
 8004918:	817b      	strh	r3, [r7, #10]
 800491a:	460b      	mov	r3, r1
 800491c:	813b      	strh	r3, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	2200      	movs	r2, #0
 800493a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fa08 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004958:	d103      	bne.n	8004962 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004960:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e05f      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004966:	897b      	ldrh	r3, [r7, #10]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004974:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	492d      	ldr	r1, [pc, #180]	@ (8004a30 <I2C_RequestMemoryWrite+0x128>)
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fa63 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e04c      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a4:	6a39      	ldr	r1, [r7, #32]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 faee 	bl	8004f88 <I2C_WaitOnTXEFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d107      	bne.n	80049ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02b      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d105      	bne.n	80049e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	611a      	str	r2, [r3, #16]
 80049de:	e021      	b.n	8004a24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049e0:	893b      	ldrh	r3, [r7, #8]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	6a39      	ldr	r1, [r7, #32]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fac8 	bl	8004f88 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d107      	bne.n	8004a16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e005      	b.n	8004a26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1a:	893b      	ldrh	r3, [r7, #8]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	00010002 	.word	0x00010002

08004a34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	817b      	strh	r3, [r7, #10]
 8004a46:	460b      	mov	r3, r1
 8004a48:	813b      	strh	r3, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f96a 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a94:	d103      	bne.n	8004a9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0aa      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	4952      	ldr	r1, [pc, #328]	@ (8004c00 <I2C_RequestMemoryRead+0x1cc>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f9c5 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e097      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	6a39      	ldr	r1, [r7, #32]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fa50 	bl	8004f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d107      	bne.n	8004b06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e076      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]
 8004b1a:	e021      	b.n	8004b60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b1c:	893b      	ldrh	r3, [r7, #8]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b2c:	6a39      	ldr	r1, [r7, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fa2a 	bl	8004f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d107      	bne.n	8004b52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e050      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b56:	893b      	ldrh	r3, [r7, #8]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b62:	6a39      	ldr	r1, [r7, #32]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fa0f 	bl	8004f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d107      	bne.n	8004b88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e035      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f8d3 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc2:	d103      	bne.n	8004bcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e013      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bd0:	897b      	ldrh	r3, [r7, #10]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	4906      	ldr	r1, [pc, #24]	@ (8004c00 <I2C_RequestMemoryRead+0x1cc>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f92e 	bl	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	00010002 	.word	0x00010002

08004c04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d4c <I2C_DMAAbort+0x148>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	08db      	lsrs	r3, r3, #3
 8004c24:	4a4a      	ldr	r2, [pc, #296]	@ (8004d50 <I2C_DMAAbort+0x14c>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	0a1a      	lsrs	r2, r3, #8
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	00da      	lsls	r2, r3, #3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f043 0220 	orr.w	r2, r3, #32
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004c4a:	e00a      	b.n	8004c62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d0ea      	beq.n	8004c38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6e:	2200      	movs	r2, #0
 8004c70:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	2200      	movs	r2, #0
 8004c80:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b60      	cmp	r3, #96	@ 0x60
 8004cd2:	d10e      	bne.n	8004cf2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f7fe fc7e 	bl	80035ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cf0:	e027      	b.n	8004d42 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cf8:	2b28      	cmp	r3, #40	@ 0x28
 8004cfa:	d117      	bne.n	8004d2c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2228      	movs	r2, #40	@ 0x28
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d2a:	e007      	b.n	8004d3c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d3c:	6978      	ldr	r0, [r7, #20]
 8004d3e:	f7fe fc4b 	bl	80035d8 <HAL_I2C_ErrorCallback>
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000008 	.word	0x20000008
 8004d50:	14f8b589 	.word	0x14f8b589

08004d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d64:	e048      	b.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d6c:	d044      	beq.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fc ff45 	bl	8001bfc <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d139      	bne.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10d      	bne.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	43da      	mvns	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	e00c      	b.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d116      	bne.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e023      	b.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d10d      	bne.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	43da      	mvns	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	e00c      	b.n	8004e38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	43da      	mvns	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d093      	beq.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e56:	e071      	b.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e66:	d123      	bne.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e067      	b.n	8004f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eb6:	d041      	beq.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7fc fea0 	bl	8001bfc <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d136      	bne.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d10c      	bne.n	8004ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	43da      	mvns	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	2300      	moveq	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e00b      	b.n	8004f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e021      	b.n	8004f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d10c      	bne.n	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e00b      	b.n	8004f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f af6d 	bne.w	8004e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f94:	e034      	b.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f915 	bl	80051c6 <I2C_IsAcknowledgeFailed>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e034      	b.n	8005010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fac:	d028      	beq.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fc fe25 	bl	8001bfc <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b80      	cmp	r3, #128	@ 0x80
 8004fd0:	d016      	beq.n	8005000 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e007      	b.n	8005010 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b80      	cmp	r3, #128	@ 0x80
 800500c:	d1c3      	bne.n	8004f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005024:	e034      	b.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f8cd 	bl	80051c6 <I2C_IsAcknowledgeFailed>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e034      	b.n	80050a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800503c:	d028      	beq.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fc fddd 	bl	8001bfc <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11d      	bne.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b04      	cmp	r3, #4
 8005060:	d016      	beq.n	8005090 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e007      	b.n	80050a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d1c3      	bne.n	8005026 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050b4:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	4a13      	ldr	r2, [pc, #76]	@ (8005108 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	0a1a      	lsrs	r2, r3, #8
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d107      	bne.n	80050e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	f043 0220 	orr.w	r2, r3, #32
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e008      	b.n	80050f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f4:	d0e9      	beq.n	80050ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	20000008 	.word	0x20000008
 8005108:	14f8b589 	.word	0x14f8b589

0800510c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005118:	e049      	b.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b10      	cmp	r3, #16
 8005126:	d119      	bne.n	800515c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0210 	mvn.w	r2, #16
 8005130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e030      	b.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515c:	f7fc fd4e 	bl	8001bfc <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d302      	bcc.n	8005172 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11d      	bne.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d016      	beq.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f043 0220 	orr.w	r2, r3, #32
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e007      	b.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d1ae      	bne.n	800511a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051dc:	d11b      	bne.n	8005216 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005234:	d103      	bne.n	800523e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800523c:	e007      	b.n	800524e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005242:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005246:	d102      	bne.n	800524e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2208      	movs	r2, #8
 800524c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b20      	cmp	r3, #32
 800526e:	d129      	bne.n	80052c4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2224      	movs	r2, #36	@ 0x24
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0210 	bic.w	r2, r2, #16
 8005296:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d12a      	bne.n	8005342 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2224      	movs	r2, #36	@ 0x24
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800530c:	89fb      	ldrh	r3, [r7, #14]
 800530e:	f023 030f 	bic.w	r3, r3, #15
 8005312:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	b29a      	uxth	r2, r3
 8005318:	89fb      	ldrh	r3, [r7, #14]
 800531a:	4313      	orrs	r3, r2
 800531c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	89fa      	ldrh	r2, [r7, #14]
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0201 	orr.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	4b20      	ldr	r3, [pc, #128]	@ (80053e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005362:	4a1f      	ldr	r2, [pc, #124]	@ (80053e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005368:	6413      	str	r3, [r2, #64]	@ 0x40
 800536a:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005376:	4b1b      	ldr	r3, [pc, #108]	@ (80053e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800537c:	f7fc fc3e 	bl	8001bfc <HAL_GetTick>
 8005380:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005382:	e009      	b.n	8005398 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005384:	f7fc fc3a 	bl	8001bfc <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005392:	d901      	bls.n	8005398 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e01f      	b.n	80053d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005398:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a4:	d1ee      	bne.n	8005384 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80053a6:	4b11      	ldr	r3, [pc, #68]	@ (80053ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053ac:	f7fc fc26 	bl	8001bfc <HAL_GetTick>
 80053b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053b2:	e009      	b.n	80053c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053b4:	f7fc fc22 	bl	8001bfc <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053c2:	d901      	bls.n	80053c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e007      	b.n	80053d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053c8:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053d4:	d1ee      	bne.n	80053b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40023800 	.word	0x40023800
 80053e4:	420e0040 	.word	0x420e0040
 80053e8:	40007000 	.word	0x40007000
 80053ec:	420e0044 	.word	0x420e0044

080053f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e267      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d075      	beq.n	80054fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800540e:	4b88      	ldr	r3, [pc, #544]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b04      	cmp	r3, #4
 8005418:	d00c      	beq.n	8005434 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541a:	4b85      	ldr	r3, [pc, #532]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005422:	2b08      	cmp	r3, #8
 8005424:	d112      	bne.n	800544c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005426:	4b82      	ldr	r3, [pc, #520]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800542e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005432:	d10b      	bne.n	800544c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	4b7e      	ldr	r3, [pc, #504]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d05b      	beq.n	80054f8 <HAL_RCC_OscConfig+0x108>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d157      	bne.n	80054f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e242      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005454:	d106      	bne.n	8005464 <HAL_RCC_OscConfig+0x74>
 8005456:	4b76      	ldr	r3, [pc, #472]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a75      	ldr	r2, [pc, #468]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e01d      	b.n	80054a0 <HAL_RCC_OscConfig+0xb0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800546c:	d10c      	bne.n	8005488 <HAL_RCC_OscConfig+0x98>
 800546e:	4b70      	ldr	r3, [pc, #448]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6f      	ldr	r2, [pc, #444]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b6d      	ldr	r3, [pc, #436]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6c      	ldr	r2, [pc, #432]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e00b      	b.n	80054a0 <HAL_RCC_OscConfig+0xb0>
 8005488:	4b69      	ldr	r3, [pc, #420]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a68      	ldr	r2, [pc, #416]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b66      	ldr	r3, [pc, #408]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a65      	ldr	r2, [pc, #404]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800549e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fc fba8 	bl	8001bfc <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fc fba4 	bl	8001bfc <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	@ 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e207      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0xc0>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fc fb94 	bl	8001bfc <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fc fb90 	bl	8001bfc <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	@ 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e1f3      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ea:	4b51      	ldr	r3, [pc, #324]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0xe8>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d063      	beq.n	80055ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005506:	4b4a      	ldr	r3, [pc, #296]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005512:	4b47      	ldr	r3, [pc, #284]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800551a:	2b08      	cmp	r3, #8
 800551c:	d11c      	bne.n	8005558 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800551e:	4b44      	ldr	r3, [pc, #272]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	4b41      	ldr	r3, [pc, #260]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_RCC_OscConfig+0x152>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e1c7      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b3b      	ldr	r3, [pc, #236]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4937      	ldr	r1, [pc, #220]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	e03a      	b.n	80055ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d020      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005560:	4b34      	ldr	r3, [pc, #208]	@ (8005634 <HAL_RCC_OscConfig+0x244>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fc fb49 	bl	8001bfc <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556e:	f7fc fb45 	bl	8001bfc <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e1a8      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005580:	4b2b      	ldr	r3, [pc, #172]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558c:	4b28      	ldr	r3, [pc, #160]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4925      	ldr	r1, [pc, #148]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a2:	4b24      	ldr	r3, [pc, #144]	@ (8005634 <HAL_RCC_OscConfig+0x244>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fc fb28 	bl	8001bfc <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b0:	f7fc fb24 	bl	8001bfc <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e187      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d036      	beq.n	8005648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e2:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <HAL_RCC_OscConfig+0x248>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fc fb08 	bl	8001bfc <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f0:	f7fc fb04 	bl	8001bfc <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e167      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005602:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_RCC_OscConfig+0x240>)
 8005604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x200>
 800560e:	e01b      	b.n	8005648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005610:	4b09      	ldr	r3, [pc, #36]	@ (8005638 <HAL_RCC_OscConfig+0x248>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005616:	f7fc faf1 	bl	8001bfc <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800561c:	e00e      	b.n	800563c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561e:	f7fc faed 	bl	8001bfc <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d907      	bls.n	800563c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e150      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
 8005630:	40023800 	.word	0x40023800
 8005634:	42470000 	.word	0x42470000
 8005638:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563c:	4b88      	ldr	r3, [pc, #544]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800563e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ea      	bne.n	800561e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8097 	beq.w	8005784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565a:	4b81      	ldr	r3, [pc, #516]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	4b7d      	ldr	r3, [pc, #500]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	4a7c      	ldr	r2, [pc, #496]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005674:	6413      	str	r3, [r2, #64]	@ 0x40
 8005676:	4b7a      	ldr	r3, [pc, #488]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005682:	2301      	movs	r3, #1
 8005684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	4b77      	ldr	r3, [pc, #476]	@ (8005864 <HAL_RCC_OscConfig+0x474>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d118      	bne.n	80056c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005692:	4b74      	ldr	r3, [pc, #464]	@ (8005864 <HAL_RCC_OscConfig+0x474>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a73      	ldr	r2, [pc, #460]	@ (8005864 <HAL_RCC_OscConfig+0x474>)
 8005698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800569c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569e:	f7fc faad 	bl	8001bfc <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a6:	f7fc faa9 	bl	8001bfc <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e10c      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005864 <HAL_RCC_OscConfig+0x474>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d106      	bne.n	80056da <HAL_RCC_OscConfig+0x2ea>
 80056cc:	4b64      	ldr	r3, [pc, #400]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d0:	4a63      	ldr	r2, [pc, #396]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d8:	e01c      	b.n	8005714 <HAL_RCC_OscConfig+0x324>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d10c      	bne.n	80056fc <HAL_RCC_OscConfig+0x30c>
 80056e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056e8:	f043 0304 	orr.w	r3, r3, #4
 80056ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056fa:	e00b      	b.n	8005714 <HAL_RCC_OscConfig+0x324>
 80056fc:	4b58      	ldr	r3, [pc, #352]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005700:	4a57      	ldr	r2, [pc, #348]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	6713      	str	r3, [r2, #112]	@ 0x70
 8005708:	4b55      	ldr	r3, [pc, #340]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570c:	4a54      	ldr	r2, [pc, #336]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 0304 	bic.w	r3, r3, #4
 8005712:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571c:	f7fc fa6e 	bl	8001bfc <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005722:	e00a      	b.n	800573a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005724:	f7fc fa6a 	bl	8001bfc <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0cb      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573a:	4b49      	ldr	r3, [pc, #292]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ee      	beq.n	8005724 <HAL_RCC_OscConfig+0x334>
 8005746:	e014      	b.n	8005772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005748:	f7fc fa58 	bl	8001bfc <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fc fa54 	bl	8001bfc <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e0b5      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005766:	4b3e      	ldr	r3, [pc, #248]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ee      	bne.n	8005750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d105      	bne.n	8005784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005778:	4b39      	ldr	r3, [pc, #228]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577c:	4a38      	ldr	r2, [pc, #224]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005782:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80a1 	beq.w	80058d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800578e:	4b34      	ldr	r3, [pc, #208]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b08      	cmp	r3, #8
 8005798:	d05c      	beq.n	8005854 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d141      	bne.n	8005826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a2:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <HAL_RCC_OscConfig+0x478>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fc fa28 	bl	8001bfc <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc fa24 	bl	8001bfc <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e087      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	4b27      	ldr	r3, [pc, #156]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	019b      	lsls	r3, r3, #6
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	3b01      	subs	r3, #1
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f0:	061b      	lsls	r3, r3, #24
 80057f2:	491b      	ldr	r1, [pc, #108]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005868 <HAL_RCC_OscConfig+0x478>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fe:	f7fc f9fd 	bl	8001bfc <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005806:	f7fc f9f9 	bl	8001bfc <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e05c      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005818:	4b11      	ldr	r3, [pc, #68]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x416>
 8005824:	e054      	b.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005826:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <HAL_RCC_OscConfig+0x478>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582c:	f7fc f9e6 	bl	8001bfc <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005834:	f7fc f9e2 	bl	8001bfc <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e045      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005846:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <HAL_RCC_OscConfig+0x470>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x444>
 8005852:	e03d      	b.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d107      	bne.n	800586c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e038      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
 8005860:	40023800 	.word	0x40023800
 8005864:	40007000 	.word	0x40007000
 8005868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800586c:	4b1b      	ldr	r3, [pc, #108]	@ (80058dc <HAL_RCC_OscConfig+0x4ec>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d028      	beq.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d121      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d11a      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800589c:	4013      	ands	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d111      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	3b01      	subs	r3, #1
 80058b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d107      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800

080058e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0cc      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058f4:	4b68      	ldr	r3, [pc, #416]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d90c      	bls.n	800591c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005902:	4b65      	ldr	r3, [pc, #404]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800590a:	4b63      	ldr	r3, [pc, #396]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0b8      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d020      	beq.n	800596a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005934:	4b59      	ldr	r3, [pc, #356]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	4a58      	ldr	r2, [pc, #352]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800593e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800594c:	4b53      	ldr	r3, [pc, #332]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a52      	ldr	r2, [pc, #328]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005958:	4b50      	ldr	r3, [pc, #320]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	494d      	ldr	r1, [pc, #308]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d044      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d107      	bne.n	800598e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	4b47      	ldr	r3, [pc, #284]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d119      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e07f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d003      	beq.n	800599e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800599a:	2b03      	cmp	r3, #3
 800599c:	d107      	bne.n	80059ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800599e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e06f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ae:	4b3b      	ldr	r3, [pc, #236]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e067      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059be:	4b37      	ldr	r3, [pc, #220]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f023 0203 	bic.w	r2, r3, #3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4934      	ldr	r1, [pc, #208]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059d0:	f7fc f914 	bl	8001bfc <HAL_GetTick>
 80059d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d6:	e00a      	b.n	80059ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d8:	f7fc f910 	bl	8001bfc <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e04f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	4b2b      	ldr	r3, [pc, #172]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 020c 	and.w	r2, r3, #12
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d1eb      	bne.n	80059d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a00:	4b25      	ldr	r3, [pc, #148]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d20c      	bcs.n	8005a28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b22      	ldr	r3, [pc, #136]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a16:	4b20      	ldr	r3, [pc, #128]	@ (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d001      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e032      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a34:	4b19      	ldr	r3, [pc, #100]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4916      	ldr	r1, [pc, #88]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a52:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	490e      	ldr	r1, [pc, #56]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a66:	f000 f821 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	490a      	ldr	r1, [pc, #40]	@ (8005aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a78:	5ccb      	ldrb	r3, [r1, r3]
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	4a09      	ldr	r2, [pc, #36]	@ (8005aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a82:	4b09      	ldr	r3, [pc, #36]	@ (8005aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fc f874 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40023c00 	.word	0x40023c00
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	0800903c 	.word	0x0800903c
 8005aa4:	20000008 	.word	0x20000008
 8005aa8:	20000010 	.word	0x20000010

08005aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab0:	b090      	sub	sp, #64	@ 0x40
 8005ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ac4:	4b59      	ldr	r3, [pc, #356]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 030c 	and.w	r3, r3, #12
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d00d      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x40>
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	f200 80a1 	bhi.w	8005c18 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ade:	e09b      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b53      	ldr	r3, [pc, #332]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ae4:	e09b      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ae6:	4b53      	ldr	r3, [pc, #332]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005aea:	e098      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aec:	4b4f      	ldr	r3, [pc, #316]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005af4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005af6:	4b4d      	ldr	r3, [pc, #308]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d028      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b02:	4b4a      	ldr	r3, [pc, #296]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	099b      	lsrs	r3, r3, #6
 8005b08:	2200      	movs	r2, #0
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b14:	2100      	movs	r1, #0
 8005b16:	4b47      	ldr	r3, [pc, #284]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b18:	fb03 f201 	mul.w	r2, r3, r1
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	fb00 f303 	mul.w	r3, r0, r3
 8005b22:	4413      	add	r3, r2
 8005b24:	4a43      	ldr	r2, [pc, #268]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b26:	fba0 1202 	umull	r1, r2, r0, r2
 8005b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b2c:	460a      	mov	r2, r1
 8005b2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b32:	4413      	add	r3, r2
 8005b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b38:	2200      	movs	r2, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	61fa      	str	r2, [r7, #28]
 8005b3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005b46:	f7fa fbab 	bl	80002a0 <__aeabi_uldivmod>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4613      	mov	r3, r2
 8005b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b52:	e053      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b54:	4b35      	ldr	r3, [pc, #212]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	099b      	lsrs	r3, r3, #6
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	617a      	str	r2, [r7, #20]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b66:	f04f 0b00 	mov.w	fp, #0
 8005b6a:	4652      	mov	r2, sl
 8005b6c:	465b      	mov	r3, fp
 8005b6e:	f04f 0000 	mov.w	r0, #0
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	0159      	lsls	r1, r3, #5
 8005b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b7c:	0150      	lsls	r0, r2, #5
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	ebb2 080a 	subs.w	r8, r2, sl
 8005b86:	eb63 090b 	sbc.w	r9, r3, fp
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b9e:	ebb2 0408 	subs.w	r4, r2, r8
 8005ba2:	eb63 0509 	sbc.w	r5, r3, r9
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	00eb      	lsls	r3, r5, #3
 8005bb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb4:	00e2      	lsls	r2, r4, #3
 8005bb6:	4614      	mov	r4, r2
 8005bb8:	461d      	mov	r5, r3
 8005bba:	eb14 030a 	adds.w	r3, r4, sl
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	eb45 030b 	adc.w	r3, r5, fp
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	028b      	lsls	r3, r1, #10
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bdc:	4621      	mov	r1, r4
 8005bde:	028a      	lsls	r2, r1, #10
 8005be0:	4610      	mov	r0, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be6:	2200      	movs	r2, #0
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	60fa      	str	r2, [r7, #12]
 8005bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bf0:	f7fa fb56 	bl	80002a0 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	0c1b      	lsrs	r3, r3, #16
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	3301      	adds	r3, #1
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005c0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c16:	e002      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c18:	4b05      	ldr	r3, [pc, #20]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3740      	adds	r7, #64	@ 0x40
 8005c24:	46bd      	mov	sp, r7
 8005c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	00f42400 	.word	0x00f42400
 8005c34:	017d7840 	.word	0x017d7840

08005c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c3c:	4b03      	ldr	r3, [pc, #12]	@ (8005c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000008 	.word	0x20000008

08005c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c54:	f7ff fff0 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0a9b      	lsrs	r3, r3, #10
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4903      	ldr	r1, [pc, #12]	@ (8005c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c66:	5ccb      	ldrb	r3, [r1, r3]
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40023800 	.word	0x40023800
 8005c74:	0800904c 	.word	0x0800904c

08005c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c7c:	f7ff ffdc 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	0b5b      	lsrs	r3, r3, #13
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	4903      	ldr	r1, [pc, #12]	@ (8005c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c8e:	5ccb      	ldrb	r3, [r1, r3]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	0800904c 	.word	0x0800904c

08005ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d075      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cd4:	4b91      	ldr	r3, [pc, #580]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cda:	f7fb ff8f 	bl	8001bfc <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ce2:	f7fb ff8b 	bl	8001bfc <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e189      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cf4:	4b8a      	ldr	r3, [pc, #552]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f0      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d009      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	019a      	lsls	r2, r3, #6
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	071b      	lsls	r3, r3, #28
 8005d18:	4981      	ldr	r1, [pc, #516]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01f      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d2c:	4b7c      	ldr	r3, [pc, #496]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d32:	0f1b      	lsrs	r3, r3, #28
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	019a      	lsls	r2, r3, #6
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	431a      	orrs	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	071b      	lsls	r3, r3, #28
 8005d4c:	4974      	ldr	r1, [pc, #464]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d54:	4b72      	ldr	r3, [pc, #456]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d5a:	f023 021f 	bic.w	r2, r3, #31
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	496e      	ldr	r1, [pc, #440]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	019a      	lsls	r2, r3, #6
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	061b      	lsls	r3, r3, #24
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	071b      	lsls	r3, r3, #28
 8005d8c:	4964      	ldr	r1, [pc, #400]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d94:	4b61      	ldr	r3, [pc, #388]	@ (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d9a:	f7fb ff2f 	bl	8001bfc <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005da2:	f7fb ff2b 	bl	8001bfc <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e129      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005db4:	4b5a      	ldr	r3, [pc, #360]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d079      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005dd8:	4b52      	ldr	r3, [pc, #328]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dde:	f7fb ff0d 	bl	8001bfc <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005de6:	f7fb ff09 	bl	8001bfc <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e107      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005df8:	4b49      	ldr	r3, [pc, #292]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e04:	d0ef      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d020      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e12:	4b43      	ldr	r3, [pc, #268]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e18:	0f1b      	lsrs	r3, r3, #28
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	019a      	lsls	r2, r3, #6
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	061b      	lsls	r3, r3, #24
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	071b      	lsls	r3, r3, #28
 8005e32:	493b      	ldr	r1, [pc, #236]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e3a:	4b39      	ldr	r3, [pc, #228]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	4934      	ldr	r1, [pc, #208]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01e      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e60:	4b2f      	ldr	r3, [pc, #188]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e66:	0e1b      	lsrs	r3, r3, #24
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	019a      	lsls	r2, r3, #6
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	061b      	lsls	r3, r3, #24
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	071b      	lsls	r3, r3, #28
 8005e80:	4927      	ldr	r1, [pc, #156]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e88:	4b25      	ldr	r3, [pc, #148]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e96:	4922      	ldr	r1, [pc, #136]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e9e:	4b21      	ldr	r3, [pc, #132]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ea4:	f7fb feaa 	bl	8001bfc <HAL_GetTick>
 8005ea8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005eac:	f7fb fea6 	bl	8001bfc <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e0a4      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ebe:	4b18      	ldr	r3, [pc, #96]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eca:	d1ef      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 808b 	beq.w	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a0b      	ldr	r2, [pc, #44]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f02:	f7fb fe7b 	bl	8001bfc <HAL_GetTick>
 8005f06:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005f08:	e010      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f0a:	f7fb fe77 	bl	8001bfc <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d909      	bls.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e075      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005f1c:	42470068 	.word	0x42470068
 8005f20:	40023800 	.word	0x40023800
 8005f24:	42470070 	.word	0x42470070
 8005f28:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005f2c:	4b38      	ldr	r3, [pc, #224]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0e8      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f38:	4b36      	ldr	r3, [pc, #216]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f40:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02f      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d028      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f56:	4b2f      	ldr	r3, [pc, #188]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f60:	4b2d      	ldr	r3, [pc, #180]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f66:	4b2c      	ldr	r3, [pc, #176]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f6c:	4a29      	ldr	r2, [pc, #164]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f72:	4b28      	ldr	r3, [pc, #160]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d114      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f7e:	f7fb fe3d 	bl	8001bfc <HAL_GetTick>
 8005f82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f84:	e00a      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f86:	f7fb fe39 	bl	8001bfc <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e035      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0ee      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fb4:	d10d      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005fb6:	4b17      	ldr	r3, [pc, #92]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fca:	4912      	ldr	r1, [pc, #72]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	608b      	str	r3, [r1, #8]
 8005fd0:	e005      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fd8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005fdc:	6093      	str	r3, [r2, #8]
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fe0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fea:	490a      	ldr	r1, [pc, #40]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0310 	and.w	r3, r3, #16
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006002:	4b06      	ldr	r3, [pc, #24]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006004:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40007000 	.word	0x40007000
 8006014:	40023800 	.word	0x40023800
 8006018:	42470e40 	.word	0x42470e40
 800601c:	424711e0 	.word	0x424711e0

08006020 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e073      	b.n	800611e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	7f5b      	ldrb	r3, [r3, #29]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fb f96a 	bl	8001320 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b10      	cmp	r3, #16
 800605e:	d055      	beq.n	800610c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	22ca      	movs	r2, #202	@ 0xca
 8006066:	625a      	str	r2, [r3, #36]	@ 0x24
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2253      	movs	r2, #83	@ 0x53
 800606e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fac7 	bl	8006604 <RTC_EnterInitMode>
 8006076:	4603      	mov	r3, r0
 8006078:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d12c      	bne.n	80060da <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800608e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006092:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6899      	ldr	r1, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	68d2      	ldr	r2, [r2, #12]
 80060ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6919      	ldr	r1, [r3, #16]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	041a      	lsls	r2, r3, #16
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 face 	bl	8006672 <RTC_ExitInitMode>
 80060d6:	4603      	mov	r3, r0
 80060d8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d110      	bne.n	8006102 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	22ff      	movs	r2, #255	@ 0xff
 8006108:	625a      	str	r2, [r3, #36]	@ 0x24
 800610a:	e001      	b.n	8006110 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006126:	b590      	push	{r4, r7, lr}
 8006128:	b087      	sub	sp, #28
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	7f1b      	ldrb	r3, [r3, #28]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_RTC_SetTime+0x1c>
 800613e:	2302      	movs	r3, #2
 8006140:	e087      	b.n	8006252 <HAL_RTC_SetTime+0x12c>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2202      	movs	r2, #2
 800614c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d126      	bne.n	80061a2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2200      	movs	r2, #0
 8006166:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 faa5 	bl	80066bc <RTC_ByteToBcd2>
 8006172:	4603      	mov	r3, r0
 8006174:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fa9e 	bl	80066bc <RTC_ByteToBcd2>
 8006180:	4603      	mov	r3, r0
 8006182:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006184:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	789b      	ldrb	r3, [r3, #2]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fa96 	bl	80066bc <RTC_ByteToBcd2>
 8006190:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006192:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	78db      	ldrb	r3, [r3, #3]
 800619a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e018      	b.n	80061d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80061c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80061c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	78db      	ldrb	r3, [r3, #3]
 80061ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	22ca      	movs	r2, #202	@ 0xca
 80061da:	625a      	str	r2, [r3, #36]	@ 0x24
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2253      	movs	r2, #83	@ 0x53
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fa0d 	bl	8006604 <RTC_EnterInitMode>
 80061ea:	4603      	mov	r3, r0
 80061ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d120      	bne.n	8006236 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80061fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006202:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006212:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	431a      	orrs	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fa20 	bl	8006672 <RTC_ExitInitMode>
 8006232:	4603      	mov	r3, r0
 8006234:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006236:	7cfb      	ldrb	r3, [r7, #19]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	22ff      	movs	r2, #255	@ 0xff
 8006248:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]

  return status;
 8006250:	7cfb      	ldrb	r3, [r7, #19]
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd90      	pop	{r4, r7, pc}

0800625a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800625a:	b590      	push	{r4, r7, lr}
 800625c:	b087      	sub	sp, #28
 800625e:	af00      	add	r7, sp, #0
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	7f1b      	ldrb	r3, [r3, #28]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_RTC_SetDate+0x1c>
 8006272:	2302      	movs	r3, #2
 8006274:	e071      	b.n	800635a <HAL_RTC_SetDate+0x100>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2202      	movs	r2, #2
 8006280:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10e      	bne.n	80062a6 <HAL_RTC_SetDate+0x4c>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	f023 0310 	bic.w	r3, r3, #16
 800629c:	b2db      	uxtb	r3, r3
 800629e:	330a      	adds	r3, #10
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11c      	bne.n	80062e6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	78db      	ldrb	r3, [r3, #3]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fa03 	bl	80066bc <RTC_ByteToBcd2>
 80062b6:	4603      	mov	r3, r0
 80062b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f9fc 	bl	80066bc <RTC_ByteToBcd2>
 80062c4:	4603      	mov	r3, r0
 80062c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	789b      	ldrb	r3, [r3, #2]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f9f4 	bl	80066bc <RTC_ByteToBcd2>
 80062d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e00e      	b.n	8006304 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062f2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	22ca      	movs	r2, #202	@ 0xca
 800630a:	625a      	str	r2, [r3, #36]	@ 0x24
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2253      	movs	r2, #83	@ 0x53
 8006312:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f975 	bl	8006604 <RTC_EnterInitMode>
 800631a:	4603      	mov	r3, r0
 800631c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800631e:	7cfb      	ldrb	r3, [r7, #19]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10c      	bne.n	800633e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800632e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006332:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f99c 	bl	8006672 <RTC_ExitInitMode>
 800633a:	4603      	mov	r3, r0
 800633c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	22ff      	movs	r2, #255	@ 0xff
 8006350:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	771a      	strb	r2, [r3, #28]

  return status;
 8006358:	7cfb      	ldrb	r3, [r7, #19]
}
 800635a:	4618      	mov	r0, r3
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	bd90      	pop	{r4, r7, pc}

08006362 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006362:	b590      	push	{r4, r7, lr}
 8006364:	b089      	sub	sp, #36	@ 0x24
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	7f1b      	ldrb	r3, [r3, #28]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_RTC_SetAlarm+0x24>
 8006382:	2302      	movs	r3, #2
 8006384:	e113      	b.n	80065ae <HAL_RTC_SetAlarm+0x24c>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2202      	movs	r2, #2
 8006390:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d137      	bne.n	8006408 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2200      	movs	r2, #0
 80063aa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 f983 	bl	80066bc <RTC_ByteToBcd2>
 80063b6:	4603      	mov	r3, r0
 80063b8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	785b      	ldrb	r3, [r3, #1]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f97c 	bl	80066bc <RTC_ByteToBcd2>
 80063c4:	4603      	mov	r3, r0
 80063c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80063c8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	789b      	ldrb	r3, [r3, #2]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f974 	bl	80066bc <RTC_ByteToBcd2>
 80063d4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80063d6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	78db      	ldrb	r3, [r3, #3]
 80063de:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80063e0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f966 	bl	80066bc <RTC_ByteToBcd2>
 80063f0:	4603      	mov	r3, r0
 80063f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80063f4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80063fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006402:	4313      	orrs	r3, r2
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	e023      	b.n	8006450 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2200      	movs	r2, #0
 800641a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006428:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800642e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	78db      	ldrb	r3, [r3, #3]
 8006434:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006436:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800643e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006440:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006446:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800644c:	4313      	orrs	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	22ca      	movs	r2, #202	@ 0xca
 8006462:	625a      	str	r2, [r3, #36]	@ 0x24
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2253      	movs	r2, #83	@ 0x53
 800646a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006474:	d148      	bne.n	8006508 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006484:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006494:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	b2da      	uxtb	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80064a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064a8:	f7fb fba8 	bl	8001bfc <HAL_GetTick>
 80064ac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80064ae:	e013      	b.n	80064d8 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064b0:	f7fb fba4 	bl	8001bfc <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064be:	d90b      	bls.n	80064d8 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	22ff      	movs	r2, #255	@ 0xff
 80064c6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2203      	movs	r2, #3
 80064cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e06a      	b.n	80065ae <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0e4      	beq.n	80064b0 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006504:	609a      	str	r2, [r3, #8]
 8006506:	e047      	b.n	8006598 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006516:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006526:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	b2da      	uxtb	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006538:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800653a:	f7fb fb5f 	bl	8001bfc <HAL_GetTick>
 800653e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006540:	e013      	b.n	800656a <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006542:	f7fb fb5b 	bl	8001bfc <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006550:	d90b      	bls.n	800656a <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	22ff      	movs	r2, #255	@ 0xff
 8006558:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2203      	movs	r2, #3
 800655e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e021      	b.n	80065ae <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0e4      	beq.n	8006542 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006596:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	22ff      	movs	r2, #255	@ 0xff
 800659e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3724      	adds	r7, #36	@ 0x24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}
	...

080065b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006600 <HAL_RTC_WaitForSynchro+0x48>)
 80065ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065cc:	f7fb fb16 	bl	8001bfc <HAL_GetTick>
 80065d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065d2:	e009      	b.n	80065e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065d4:	f7fb fb12 	bl	8001bfc <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065e2:	d901      	bls.n	80065e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e007      	b.n	80065f8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0ee      	beq.n	80065d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	00017f5f 	.word	0x00017f5f

08006604 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d122      	bne.n	8006668 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006630:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006632:	f7fb fae3 	bl	8001bfc <HAL_GetTick>
 8006636:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006638:	e00c      	b.n	8006654 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800663a:	f7fb fadf 	bl	8001bfc <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006648:	d904      	bls.n	8006654 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2204      	movs	r2, #4
 800664e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <RTC_EnterInitMode+0x64>
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d1e8      	bne.n	800663a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800668c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ff8b 	bl	80065b8 <HAL_RTC_WaitForSynchro>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2204      	movs	r2, #4
 80066ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80066ca:	e005      	b.n	80066d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	3b0a      	subs	r3, #10
 80066d6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	2b09      	cmp	r3, #9
 80066dc:	d8f6      	bhi.n	80066cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	b2db      	uxtb	r3, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d109      	bne.n	800671c <HAL_TIM_OC_Start+0x24>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	e022      	b.n	8006762 <HAL_TIM_OC_Start+0x6a>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b04      	cmp	r3, #4
 8006720:	d109      	bne.n	8006736 <HAL_TIM_OC_Start+0x3e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	bf14      	ite	ne
 800672e:	2301      	movne	r3, #1
 8006730:	2300      	moveq	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e015      	b.n	8006762 <HAL_TIM_OC_Start+0x6a>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b08      	cmp	r3, #8
 800673a:	d109      	bne.n	8006750 <HAL_TIM_OC_Start+0x58>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	bf14      	ite	ne
 8006748:	2301      	movne	r3, #1
 800674a:	2300      	moveq	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e008      	b.n	8006762 <HAL_TIM_OC_Start+0x6a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	bf14      	ite	ne
 800675c:	2301      	movne	r3, #1
 800675e:	2300      	moveq	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e07c      	b.n	8006864 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <HAL_TIM_OC_Start+0x82>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006778:	e013      	b.n	80067a2 <HAL_TIM_OC_Start+0xaa>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b04      	cmp	r3, #4
 800677e:	d104      	bne.n	800678a <HAL_TIM_OC_Start+0x92>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006788:	e00b      	b.n	80067a2 <HAL_TIM_OC_Start+0xaa>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d104      	bne.n	800679a <HAL_TIM_OC_Start+0xa2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006798:	e003      	b.n	80067a2 <HAL_TIM_OC_Start+0xaa>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2201      	movs	r2, #1
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fbda 	bl	8006f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a2d      	ldr	r2, [pc, #180]	@ (800686c <HAL_TIM_OC_Start+0x174>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_TIM_OC_Start+0xcc>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a2c      	ldr	r2, [pc, #176]	@ (8006870 <HAL_TIM_OC_Start+0x178>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d101      	bne.n	80067c8 <HAL_TIM_OC_Start+0xd0>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <HAL_TIM_OC_Start+0xd2>
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a22      	ldr	r2, [pc, #136]	@ (800686c <HAL_TIM_OC_Start+0x174>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d022      	beq.n	800682e <HAL_TIM_OC_Start+0x136>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f0:	d01d      	beq.n	800682e <HAL_TIM_OC_Start+0x136>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006874 <HAL_TIM_OC_Start+0x17c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d018      	beq.n	800682e <HAL_TIM_OC_Start+0x136>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1d      	ldr	r2, [pc, #116]	@ (8006878 <HAL_TIM_OC_Start+0x180>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <HAL_TIM_OC_Start+0x136>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1c      	ldr	r2, [pc, #112]	@ (800687c <HAL_TIM_OC_Start+0x184>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <HAL_TIM_OC_Start+0x136>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a16      	ldr	r2, [pc, #88]	@ (8006870 <HAL_TIM_OC_Start+0x178>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d009      	beq.n	800682e <HAL_TIM_OC_Start+0x136>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a18      	ldr	r2, [pc, #96]	@ (8006880 <HAL_TIM_OC_Start+0x188>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_TIM_OC_Start+0x136>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a16      	ldr	r2, [pc, #88]	@ (8006884 <HAL_TIM_OC_Start+0x18c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d111      	bne.n	8006852 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b06      	cmp	r3, #6
 800683e:	d010      	beq.n	8006862 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006850:	e007      	b.n	8006862 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0201 	orr.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400
 8006874:	40000400 	.word	0x40000400
 8006878:	40000800 	.word	0x40000800
 800687c:	40000c00 	.word	0x40000c00
 8006880:	40014000 	.word	0x40014000
 8006884:	40001800 	.word	0x40001800

08006888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e041      	b.n	800691e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fa fe96 	bl	80015e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f000 f8f0 	bl	8006aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800693e:	2b01      	cmp	r3, #1
 8006940:	d101      	bne.n	8006946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006942:	2302      	movs	r3, #2
 8006944:	e0ae      	b.n	8006aa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b0c      	cmp	r3, #12
 8006952:	f200 809f 	bhi.w	8006a94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006956:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006991 	.word	0x08006991
 8006960:	08006a95 	.word	0x08006a95
 8006964:	08006a95 	.word	0x08006a95
 8006968:	08006a95 	.word	0x08006a95
 800696c:	080069d1 	.word	0x080069d1
 8006970:	08006a95 	.word	0x08006a95
 8006974:	08006a95 	.word	0x08006a95
 8006978:	08006a95 	.word	0x08006a95
 800697c:	08006a13 	.word	0x08006a13
 8006980:	08006a95 	.word	0x08006a95
 8006984:	08006a95 	.word	0x08006a95
 8006988:	08006a95 	.word	0x08006a95
 800698c:	08006a53 	.word	0x08006a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f934 	bl	8006c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0208 	orr.w	r2, r2, #8
 80069aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0204 	bic.w	r2, r2, #4
 80069ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6999      	ldr	r1, [r3, #24]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	619a      	str	r2, [r3, #24]
      break;
 80069ce:	e064      	b.n	8006a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f984 	bl	8006ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6999      	ldr	r1, [r3, #24]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	021a      	lsls	r2, r3, #8
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	619a      	str	r2, [r3, #24]
      break;
 8006a10:	e043      	b.n	8006a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f9d9 	bl	8006dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0208 	orr.w	r2, r2, #8
 8006a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0204 	bic.w	r2, r2, #4
 8006a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69d9      	ldr	r1, [r3, #28]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	61da      	str	r2, [r3, #28]
      break;
 8006a50:	e023      	b.n	8006a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fa2d 	bl	8006eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69da      	ldr	r2, [r3, #28]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69d9      	ldr	r1, [r3, #28]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	021a      	lsls	r2, r3, #8
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	61da      	str	r2, [r3, #28]
      break;
 8006a92:	e002      	b.n	8006a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]
      break;
 8006a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a46      	ldr	r2, [pc, #280]	@ (8006bd8 <TIM_Base_SetConfig+0x12c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d013      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aca:	d00f      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a43      	ldr	r2, [pc, #268]	@ (8006bdc <TIM_Base_SetConfig+0x130>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00b      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a42      	ldr	r2, [pc, #264]	@ (8006be0 <TIM_Base_SetConfig+0x134>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d007      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a41      	ldr	r2, [pc, #260]	@ (8006be4 <TIM_Base_SetConfig+0x138>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a40      	ldr	r2, [pc, #256]	@ (8006be8 <TIM_Base_SetConfig+0x13c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d108      	bne.n	8006afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a35      	ldr	r2, [pc, #212]	@ (8006bd8 <TIM_Base_SetConfig+0x12c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d02b      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0c:	d027      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a32      	ldr	r2, [pc, #200]	@ (8006bdc <TIM_Base_SetConfig+0x130>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d023      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a31      	ldr	r2, [pc, #196]	@ (8006be0 <TIM_Base_SetConfig+0x134>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01f      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a30      	ldr	r2, [pc, #192]	@ (8006be4 <TIM_Base_SetConfig+0x138>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01b      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2f      	ldr	r2, [pc, #188]	@ (8006be8 <TIM_Base_SetConfig+0x13c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d017      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a2e      	ldr	r2, [pc, #184]	@ (8006bec <TIM_Base_SetConfig+0x140>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2d      	ldr	r2, [pc, #180]	@ (8006bf0 <TIM_Base_SetConfig+0x144>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00f      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2c      	ldr	r2, [pc, #176]	@ (8006bf4 <TIM_Base_SetConfig+0x148>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2b      	ldr	r2, [pc, #172]	@ (8006bf8 <TIM_Base_SetConfig+0x14c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2a      	ldr	r2, [pc, #168]	@ (8006bfc <TIM_Base_SetConfig+0x150>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a29      	ldr	r2, [pc, #164]	@ (8006c00 <TIM_Base_SetConfig+0x154>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a10      	ldr	r2, [pc, #64]	@ (8006bd8 <TIM_Base_SetConfig+0x12c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_Base_SetConfig+0xf8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a12      	ldr	r2, [pc, #72]	@ (8006be8 <TIM_Base_SetConfig+0x13c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d103      	bne.n	8006bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d105      	bne.n	8006bca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f023 0201 	bic.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	611a      	str	r2, [r3, #16]
  }
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40000800 	.word	0x40000800
 8006be4:	40000c00 	.word	0x40000c00
 8006be8:	40010400 	.word	0x40010400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40014400 	.word	0x40014400
 8006bf4:	40014800 	.word	0x40014800
 8006bf8:	40001800 	.word	0x40001800
 8006bfc:	40001c00 	.word	0x40001c00
 8006c00:	40002000 	.word	0x40002000

08006c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f023 0201 	bic.w	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f023 0302 	bic.w	r3, r3, #2
 8006c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a20      	ldr	r2, [pc, #128]	@ (8006cdc <TIM_OC1_SetConfig+0xd8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_OC1_SetConfig+0x64>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce0 <TIM_OC1_SetConfig+0xdc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d10c      	bne.n	8006c82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0308 	bic.w	r3, r3, #8
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f023 0304 	bic.w	r3, r3, #4
 8006c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a15      	ldr	r2, [pc, #84]	@ (8006cdc <TIM_OC1_SetConfig+0xd8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_OC1_SetConfig+0x8e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a14      	ldr	r2, [pc, #80]	@ (8006ce0 <TIM_OC1_SetConfig+0xdc>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d111      	bne.n	8006cb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	621a      	str	r2, [r3, #32]
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40010400 	.word	0x40010400

08006ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f023 0210 	bic.w	r2, r3, #16
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0320 	bic.w	r3, r3, #32
 8006d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a22      	ldr	r2, [pc, #136]	@ (8006dc8 <TIM_OC2_SetConfig+0xe4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC2_SetConfig+0x68>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a21      	ldr	r2, [pc, #132]	@ (8006dcc <TIM_OC2_SetConfig+0xe8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10d      	bne.n	8006d68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a17      	ldr	r2, [pc, #92]	@ (8006dc8 <TIM_OC2_SetConfig+0xe4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC2_SetConfig+0x94>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a16      	ldr	r2, [pc, #88]	@ (8006dcc <TIM_OC2_SetConfig+0xe8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d113      	bne.n	8006da0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40010400 	.word	0x40010400

08006dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0303 	bic.w	r3, r3, #3
 8006e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	021b      	lsls	r3, r3, #8
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a21      	ldr	r2, [pc, #132]	@ (8006eb0 <TIM_OC3_SetConfig+0xe0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_OC3_SetConfig+0x66>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a20      	ldr	r2, [pc, #128]	@ (8006eb4 <TIM_OC3_SetConfig+0xe4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d10d      	bne.n	8006e52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a16      	ldr	r2, [pc, #88]	@ (8006eb0 <TIM_OC3_SetConfig+0xe0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d003      	beq.n	8006e62 <TIM_OC3_SetConfig+0x92>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a15      	ldr	r2, [pc, #84]	@ (8006eb4 <TIM_OC3_SetConfig+0xe4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d113      	bne.n	8006e8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	621a      	str	r2, [r3, #32]
}
 8006ea4:	bf00      	nop
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40010400 	.word	0x40010400

08006eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	031b      	lsls	r3, r3, #12
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a12      	ldr	r2, [pc, #72]	@ (8006f5c <TIM_OC4_SetConfig+0xa4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_OC4_SetConfig+0x68>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a11      	ldr	r2, [pc, #68]	@ (8006f60 <TIM_OC4_SetConfig+0xa8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d109      	bne.n	8006f34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	019b      	lsls	r3, r3, #6
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40010400 	.word	0x40010400

08006f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	2201      	movs	r2, #1
 8006f78:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1a      	ldr	r2, [r3, #32]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	43db      	mvns	r3, r3
 8006f86:	401a      	ands	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a1a      	ldr	r2, [r3, #32]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 031f 	and.w	r3, r3, #31
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	621a      	str	r2, [r3, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e05a      	b.n	800707e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a21      	ldr	r2, [pc, #132]	@ (800708c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d022      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007014:	d01d      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1d      	ldr	r2, [pc, #116]	@ (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d018      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1b      	ldr	r2, [pc, #108]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1a      	ldr	r2, [pc, #104]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a18      	ldr	r2, [pc, #96]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a17      	ldr	r2, [pc, #92]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a15      	ldr	r2, [pc, #84]	@ (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d10c      	bne.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	4313      	orrs	r3, r2
 8007062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40010000 	.word	0x40010000
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40000c00 	.word	0x40000c00
 800709c:	40010400 	.word	0x40010400
 80070a0:	40014000 	.word	0x40014000
 80070a4:	40001800 	.word	0x40001800

080070a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e042      	b.n	8007140 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d106      	bne.n	80070d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fa fcbc 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2224      	movs	r2, #36	@ 0x24
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f973 	bl	80073d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695a      	ldr	r2, [r3, #20]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	@ 0x28
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b20      	cmp	r3, #32
 8007166:	d175      	bne.n	8007254 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_UART_Transmit+0x2c>
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e06e      	b.n	8007256 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2221      	movs	r2, #33	@ 0x21
 8007182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007186:	f7fa fd39 	bl	8001bfc <HAL_GetTick>
 800718a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	88fa      	ldrh	r2, [r7, #6]
 8007196:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a0:	d108      	bne.n	80071b4 <HAL_UART_Transmit+0x6c>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	e003      	b.n	80071bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071bc:	e02e      	b.n	800721c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2200      	movs	r2, #0
 80071c6:	2180      	movs	r1, #128	@ 0x80
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f848 	bl	800725e <UART_WaitOnFlagUntilTimeout>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e03a      	b.n	8007256 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	3302      	adds	r3, #2
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	e007      	b.n	800720e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	3301      	adds	r3, #1
 800720c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1cb      	bne.n	80071be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2200      	movs	r2, #0
 800722e:	2140      	movs	r1, #64	@ 0x40
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f814 	bl	800725e <UART_WaitOnFlagUntilTimeout>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e006      	b.n	8007256 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	e000      	b.n	8007256 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007254:	2302      	movs	r3, #2
  }
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b086      	sub	sp, #24
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	4613      	mov	r3, r2
 800726c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726e:	e03b      	b.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007276:	d037      	beq.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007278:	f7fa fcc0 	bl	8001bfc <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	429a      	cmp	r2, r3
 8007286:	d302      	bcc.n	800728e <UART_WaitOnFlagUntilTimeout+0x30>
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e03a      	b.n	8007308 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	d023      	beq.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b80      	cmp	r3, #128	@ 0x80
 80072a4:	d020      	beq.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b40      	cmp	r3, #64	@ 0x40
 80072aa:	d01d      	beq.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0308 	and.w	r3, r3, #8
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d116      	bne.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f81d 	bl	8007310 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2208      	movs	r2, #8
 80072da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e00f      	b.n	8007308 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4013      	ands	r3, r2
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	bf0c      	ite	eq
 80072f8:	2301      	moveq	r3, #1
 80072fa:	2300      	movne	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	461a      	mov	r2, r3
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	429a      	cmp	r2, r3
 8007304:	d0b4      	beq.n	8007270 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b095      	sub	sp, #84	@ 0x54
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	330c      	adds	r3, #12
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800732e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	330c      	adds	r3, #12
 8007336:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007338:	643a      	str	r2, [r7, #64]	@ 0x40
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800733e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e5      	bne.n	8007318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3314      	adds	r3, #20
 8007352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	61fb      	str	r3, [r7, #28]
   return(result);
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3314      	adds	r3, #20
 800736a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800736c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800736e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e5      	bne.n	800734c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007384:	2b01      	cmp	r3, #1
 8007386:	d119      	bne.n	80073bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	60bb      	str	r3, [r7, #8]
   return(result);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f023 0310 	bic.w	r3, r3, #16
 800739e:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073a8:	61ba      	str	r2, [r7, #24]
 80073aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6979      	ldr	r1, [r7, #20]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	613b      	str	r3, [r7, #16]
   return(result);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e5      	bne.n	8007388 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80073ca:	bf00      	nop
 80073cc:	3754      	adds	r7, #84	@ 0x54
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073dc:	b0c0      	sub	sp, #256	@ 0x100
 80073de:	af00      	add	r7, sp, #0
 80073e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f4:	68d9      	ldr	r1, [r3, #12]
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	ea40 0301 	orr.w	r3, r0, r1
 8007400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	431a      	orrs	r2, r3
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	431a      	orrs	r2, r3
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007430:	f021 010c 	bic.w	r1, r1, #12
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800743e:	430b      	orrs	r3, r1
 8007440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007452:	6999      	ldr	r1, [r3, #24]
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	ea40 0301 	orr.w	r3, r0, r1
 800745e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	4b8f      	ldr	r3, [pc, #572]	@ (80076a4 <UART_SetConfig+0x2cc>)
 8007468:	429a      	cmp	r2, r3
 800746a:	d005      	beq.n	8007478 <UART_SetConfig+0xa0>
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b8d      	ldr	r3, [pc, #564]	@ (80076a8 <UART_SetConfig+0x2d0>)
 8007474:	429a      	cmp	r2, r3
 8007476:	d104      	bne.n	8007482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007478:	f7fe fbfe 	bl	8005c78 <HAL_RCC_GetPCLK2Freq>
 800747c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007480:	e003      	b.n	800748a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007482:	f7fe fbe5 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8007486:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007494:	f040 810c 	bne.w	80076b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800749c:	2200      	movs	r2, #0
 800749e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80074a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80074aa:	4622      	mov	r2, r4
 80074ac:	462b      	mov	r3, r5
 80074ae:	1891      	adds	r1, r2, r2
 80074b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074b2:	415b      	adcs	r3, r3
 80074b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80074ba:	4621      	mov	r1, r4
 80074bc:	eb12 0801 	adds.w	r8, r2, r1
 80074c0:	4629      	mov	r1, r5
 80074c2:	eb43 0901 	adc.w	r9, r3, r1
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074da:	4690      	mov	r8, r2
 80074dc:	4699      	mov	r9, r3
 80074de:	4623      	mov	r3, r4
 80074e0:	eb18 0303 	adds.w	r3, r8, r3
 80074e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074e8:	462b      	mov	r3, r5
 80074ea:	eb49 0303 	adc.w	r3, r9, r3
 80074ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007506:	460b      	mov	r3, r1
 8007508:	18db      	adds	r3, r3, r3
 800750a:	653b      	str	r3, [r7, #80]	@ 0x50
 800750c:	4613      	mov	r3, r2
 800750e:	eb42 0303 	adc.w	r3, r2, r3
 8007512:	657b      	str	r3, [r7, #84]	@ 0x54
 8007514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800751c:	f7f8 fec0 	bl	80002a0 <__aeabi_uldivmod>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4b61      	ldr	r3, [pc, #388]	@ (80076ac <UART_SetConfig+0x2d4>)
 8007526:	fba3 2302 	umull	r2, r3, r3, r2
 800752a:	095b      	lsrs	r3, r3, #5
 800752c:	011c      	lsls	r4, r3, #4
 800752e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007532:	2200      	movs	r2, #0
 8007534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007538:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800753c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	1891      	adds	r1, r2, r2
 8007546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007548:	415b      	adcs	r3, r3
 800754a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800754c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007550:	4641      	mov	r1, r8
 8007552:	eb12 0a01 	adds.w	sl, r2, r1
 8007556:	4649      	mov	r1, r9
 8007558:	eb43 0b01 	adc.w	fp, r3, r1
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800756c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007570:	4692      	mov	sl, r2
 8007572:	469b      	mov	fp, r3
 8007574:	4643      	mov	r3, r8
 8007576:	eb1a 0303 	adds.w	r3, sl, r3
 800757a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800757e:	464b      	mov	r3, r9
 8007580:	eb4b 0303 	adc.w	r3, fp, r3
 8007584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007594:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800759c:	460b      	mov	r3, r1
 800759e:	18db      	adds	r3, r3, r3
 80075a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075a2:	4613      	mov	r3, r2
 80075a4:	eb42 0303 	adc.w	r3, r2, r3
 80075a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80075aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075b2:	f7f8 fe75 	bl	80002a0 <__aeabi_uldivmod>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	4b3b      	ldr	r3, [pc, #236]	@ (80076ac <UART_SetConfig+0x2d4>)
 80075be:	fba3 2301 	umull	r2, r3, r3, r1
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	2264      	movs	r2, #100	@ 0x64
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
 80075ca:	1acb      	subs	r3, r1, r3
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075d2:	4b36      	ldr	r3, [pc, #216]	@ (80076ac <UART_SetConfig+0x2d4>)
 80075d4:	fba3 2302 	umull	r2, r3, r3, r2
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075e0:	441c      	add	r4, r3
 80075e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075f4:	4642      	mov	r2, r8
 80075f6:	464b      	mov	r3, r9
 80075f8:	1891      	adds	r1, r2, r2
 80075fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075fc:	415b      	adcs	r3, r3
 80075fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007604:	4641      	mov	r1, r8
 8007606:	1851      	adds	r1, r2, r1
 8007608:	6339      	str	r1, [r7, #48]	@ 0x30
 800760a:	4649      	mov	r1, r9
 800760c:	414b      	adcs	r3, r1
 800760e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800761c:	4659      	mov	r1, fp
 800761e:	00cb      	lsls	r3, r1, #3
 8007620:	4651      	mov	r1, sl
 8007622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007626:	4651      	mov	r1, sl
 8007628:	00ca      	lsls	r2, r1, #3
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	4603      	mov	r3, r0
 8007630:	4642      	mov	r2, r8
 8007632:	189b      	adds	r3, r3, r2
 8007634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007638:	464b      	mov	r3, r9
 800763a:	460a      	mov	r2, r1
 800763c:	eb42 0303 	adc.w	r3, r2, r3
 8007640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007650:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007658:	460b      	mov	r3, r1
 800765a:	18db      	adds	r3, r3, r3
 800765c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800765e:	4613      	mov	r3, r2
 8007660:	eb42 0303 	adc.w	r3, r2, r3
 8007664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800766a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800766e:	f7f8 fe17 	bl	80002a0 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4b0d      	ldr	r3, [pc, #52]	@ (80076ac <UART_SetConfig+0x2d4>)
 8007678:	fba3 1302 	umull	r1, r3, r3, r2
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	2164      	movs	r1, #100	@ 0x64
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	3332      	adds	r3, #50	@ 0x32
 800768a:	4a08      	ldr	r2, [pc, #32]	@ (80076ac <UART_SetConfig+0x2d4>)
 800768c:	fba2 2303 	umull	r2, r3, r2, r3
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	f003 0207 	and.w	r2, r3, #7
 8007696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4422      	add	r2, r4
 800769e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076a0:	e106      	b.n	80078b0 <UART_SetConfig+0x4d8>
 80076a2:	bf00      	nop
 80076a4:	40011000 	.word	0x40011000
 80076a8:	40011400 	.word	0x40011400
 80076ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076c2:	4642      	mov	r2, r8
 80076c4:	464b      	mov	r3, r9
 80076c6:	1891      	adds	r1, r2, r2
 80076c8:	6239      	str	r1, [r7, #32]
 80076ca:	415b      	adcs	r3, r3
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076d2:	4641      	mov	r1, r8
 80076d4:	1854      	adds	r4, r2, r1
 80076d6:	4649      	mov	r1, r9
 80076d8:	eb43 0501 	adc.w	r5, r3, r1
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	f04f 0300 	mov.w	r3, #0
 80076e4:	00eb      	lsls	r3, r5, #3
 80076e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ea:	00e2      	lsls	r2, r4, #3
 80076ec:	4614      	mov	r4, r2
 80076ee:	461d      	mov	r5, r3
 80076f0:	4643      	mov	r3, r8
 80076f2:	18e3      	adds	r3, r4, r3
 80076f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076f8:	464b      	mov	r3, r9
 80076fa:	eb45 0303 	adc.w	r3, r5, r3
 80076fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800770e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800771e:	4629      	mov	r1, r5
 8007720:	008b      	lsls	r3, r1, #2
 8007722:	4621      	mov	r1, r4
 8007724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007728:	4621      	mov	r1, r4
 800772a:	008a      	lsls	r2, r1, #2
 800772c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007730:	f7f8 fdb6 	bl	80002a0 <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4b60      	ldr	r3, [pc, #384]	@ (80078bc <UART_SetConfig+0x4e4>)
 800773a:	fba3 2302 	umull	r2, r3, r3, r2
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	011c      	lsls	r4, r3, #4
 8007742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007746:	2200      	movs	r2, #0
 8007748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800774c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	1891      	adds	r1, r2, r2
 800775a:	61b9      	str	r1, [r7, #24]
 800775c:	415b      	adcs	r3, r3
 800775e:	61fb      	str	r3, [r7, #28]
 8007760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007764:	4641      	mov	r1, r8
 8007766:	1851      	adds	r1, r2, r1
 8007768:	6139      	str	r1, [r7, #16]
 800776a:	4649      	mov	r1, r9
 800776c:	414b      	adcs	r3, r1
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800777c:	4659      	mov	r1, fp
 800777e:	00cb      	lsls	r3, r1, #3
 8007780:	4651      	mov	r1, sl
 8007782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007786:	4651      	mov	r1, sl
 8007788:	00ca      	lsls	r2, r1, #3
 800778a:	4610      	mov	r0, r2
 800778c:	4619      	mov	r1, r3
 800778e:	4603      	mov	r3, r0
 8007790:	4642      	mov	r2, r8
 8007792:	189b      	adds	r3, r3, r2
 8007794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007798:	464b      	mov	r3, r9
 800779a:	460a      	mov	r2, r1
 800779c:	eb42 0303 	adc.w	r3, r2, r3
 80077a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077bc:	4649      	mov	r1, r9
 80077be:	008b      	lsls	r3, r1, #2
 80077c0:	4641      	mov	r1, r8
 80077c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077c6:	4641      	mov	r1, r8
 80077c8:	008a      	lsls	r2, r1, #2
 80077ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077ce:	f7f8 fd67 	bl	80002a0 <__aeabi_uldivmod>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4611      	mov	r1, r2
 80077d8:	4b38      	ldr	r3, [pc, #224]	@ (80078bc <UART_SetConfig+0x4e4>)
 80077da:	fba3 2301 	umull	r2, r3, r3, r1
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	2264      	movs	r2, #100	@ 0x64
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	1acb      	subs	r3, r1, r3
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	3332      	adds	r3, #50	@ 0x32
 80077ec:	4a33      	ldr	r2, [pc, #204]	@ (80078bc <UART_SetConfig+0x4e4>)
 80077ee:	fba2 2303 	umull	r2, r3, r2, r3
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077f8:	441c      	add	r4, r3
 80077fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077fe:	2200      	movs	r2, #0
 8007800:	673b      	str	r3, [r7, #112]	@ 0x70
 8007802:	677a      	str	r2, [r7, #116]	@ 0x74
 8007804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	1891      	adds	r1, r2, r2
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	415b      	adcs	r3, r3
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007818:	4641      	mov	r1, r8
 800781a:	1851      	adds	r1, r2, r1
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	4649      	mov	r1, r9
 8007820:	414b      	adcs	r3, r1
 8007822:	607b      	str	r3, [r7, #4]
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	f04f 0300 	mov.w	r3, #0
 800782c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007830:	4659      	mov	r1, fp
 8007832:	00cb      	lsls	r3, r1, #3
 8007834:	4651      	mov	r1, sl
 8007836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783a:	4651      	mov	r1, sl
 800783c:	00ca      	lsls	r2, r1, #3
 800783e:	4610      	mov	r0, r2
 8007840:	4619      	mov	r1, r3
 8007842:	4603      	mov	r3, r0
 8007844:	4642      	mov	r2, r8
 8007846:	189b      	adds	r3, r3, r2
 8007848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800784a:	464b      	mov	r3, r9
 800784c:	460a      	mov	r2, r1
 800784e:	eb42 0303 	adc.w	r3, r2, r3
 8007852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	663b      	str	r3, [r7, #96]	@ 0x60
 800785e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800786c:	4649      	mov	r1, r9
 800786e:	008b      	lsls	r3, r1, #2
 8007870:	4641      	mov	r1, r8
 8007872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007876:	4641      	mov	r1, r8
 8007878:	008a      	lsls	r2, r1, #2
 800787a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800787e:	f7f8 fd0f 	bl	80002a0 <__aeabi_uldivmod>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4b0d      	ldr	r3, [pc, #52]	@ (80078bc <UART_SetConfig+0x4e4>)
 8007888:	fba3 1302 	umull	r1, r3, r3, r2
 800788c:	095b      	lsrs	r3, r3, #5
 800788e:	2164      	movs	r1, #100	@ 0x64
 8007890:	fb01 f303 	mul.w	r3, r1, r3
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	3332      	adds	r3, #50	@ 0x32
 800789a:	4a08      	ldr	r2, [pc, #32]	@ (80078bc <UART_SetConfig+0x4e4>)
 800789c:	fba2 2303 	umull	r2, r3, r2, r3
 80078a0:	095b      	lsrs	r3, r3, #5
 80078a2:	f003 020f 	and.w	r2, r3, #15
 80078a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4422      	add	r2, r4
 80078ae:	609a      	str	r2, [r3, #8]
}
 80078b0:	bf00      	nop
 80078b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80078b6:	46bd      	mov	sp, r7
 80078b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078bc:	51eb851f 	.word	0x51eb851f

080078c0 <sniprintf>:
 80078c0:	b40c      	push	{r2, r3}
 80078c2:	b530      	push	{r4, r5, lr}
 80078c4:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <sniprintf+0x64>)
 80078c6:	1e0c      	subs	r4, r1, #0
 80078c8:	681d      	ldr	r5, [r3, #0]
 80078ca:	b09d      	sub	sp, #116	@ 0x74
 80078cc:	da08      	bge.n	80078e0 <sniprintf+0x20>
 80078ce:	238b      	movs	r3, #139	@ 0x8b
 80078d0:	602b      	str	r3, [r5, #0]
 80078d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078d6:	b01d      	add	sp, #116	@ 0x74
 80078d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078dc:	b002      	add	sp, #8
 80078de:	4770      	bx	lr
 80078e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078e8:	bf14      	ite	ne
 80078ea:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80078ee:	4623      	moveq	r3, r4
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	9307      	str	r3, [sp, #28]
 80078f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078f8:	9002      	str	r0, [sp, #8]
 80078fa:	9006      	str	r0, [sp, #24]
 80078fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007900:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007902:	ab21      	add	r3, sp, #132	@ 0x84
 8007904:	a902      	add	r1, sp, #8
 8007906:	4628      	mov	r0, r5
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	f000 f89d 	bl	8007a48 <_svfiprintf_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	bfbc      	itt	lt
 8007912:	238b      	movlt	r3, #139	@ 0x8b
 8007914:	602b      	strlt	r3, [r5, #0]
 8007916:	2c00      	cmp	r4, #0
 8007918:	d0dd      	beq.n	80078d6 <sniprintf+0x16>
 800791a:	9b02      	ldr	r3, [sp, #8]
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e7d9      	b.n	80078d6 <sniprintf+0x16>
 8007922:	bf00      	nop
 8007924:	20000018 	.word	0x20000018

08007928 <memset>:
 8007928:	4402      	add	r2, r0
 800792a:	4603      	mov	r3, r0
 800792c:	4293      	cmp	r3, r2
 800792e:	d100      	bne.n	8007932 <memset+0xa>
 8007930:	4770      	bx	lr
 8007932:	f803 1b01 	strb.w	r1, [r3], #1
 8007936:	e7f9      	b.n	800792c <memset+0x4>

08007938 <__errno>:
 8007938:	4b01      	ldr	r3, [pc, #4]	@ (8007940 <__errno+0x8>)
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000018 	.word	0x20000018

08007944 <__libc_init_array>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	4d0d      	ldr	r5, [pc, #52]	@ (800797c <__libc_init_array+0x38>)
 8007948:	4c0d      	ldr	r4, [pc, #52]	@ (8007980 <__libc_init_array+0x3c>)
 800794a:	1b64      	subs	r4, r4, r5
 800794c:	10a4      	asrs	r4, r4, #2
 800794e:	2600      	movs	r6, #0
 8007950:	42a6      	cmp	r6, r4
 8007952:	d109      	bne.n	8007968 <__libc_init_array+0x24>
 8007954:	4d0b      	ldr	r5, [pc, #44]	@ (8007984 <__libc_init_array+0x40>)
 8007956:	4c0c      	ldr	r4, [pc, #48]	@ (8007988 <__libc_init_array+0x44>)
 8007958:	f000 fc66 	bl	8008228 <_init>
 800795c:	1b64      	subs	r4, r4, r5
 800795e:	10a4      	asrs	r4, r4, #2
 8007960:	2600      	movs	r6, #0
 8007962:	42a6      	cmp	r6, r4
 8007964:	d105      	bne.n	8007972 <__libc_init_array+0x2e>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	f855 3b04 	ldr.w	r3, [r5], #4
 800796c:	4798      	blx	r3
 800796e:	3601      	adds	r6, #1
 8007970:	e7ee      	b.n	8007950 <__libc_init_array+0xc>
 8007972:	f855 3b04 	ldr.w	r3, [r5], #4
 8007976:	4798      	blx	r3
 8007978:	3601      	adds	r6, #1
 800797a:	e7f2      	b.n	8007962 <__libc_init_array+0x1e>
 800797c:	08009098 	.word	0x08009098
 8007980:	08009098 	.word	0x08009098
 8007984:	08009098 	.word	0x08009098
 8007988:	0800909c 	.word	0x0800909c

0800798c <__retarget_lock_acquire_recursive>:
 800798c:	4770      	bx	lr

0800798e <__retarget_lock_release_recursive>:
 800798e:	4770      	bx	lr

08007990 <__ssputs_r>:
 8007990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007994:	688e      	ldr	r6, [r1, #8]
 8007996:	461f      	mov	r7, r3
 8007998:	42be      	cmp	r6, r7
 800799a:	680b      	ldr	r3, [r1, #0]
 800799c:	4682      	mov	sl, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	4690      	mov	r8, r2
 80079a2:	d82d      	bhi.n	8007a00 <__ssputs_r+0x70>
 80079a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079ac:	d026      	beq.n	80079fc <__ssputs_r+0x6c>
 80079ae:	6965      	ldr	r5, [r4, #20]
 80079b0:	6909      	ldr	r1, [r1, #16]
 80079b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079b6:	eba3 0901 	sub.w	r9, r3, r1
 80079ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079be:	1c7b      	adds	r3, r7, #1
 80079c0:	444b      	add	r3, r9
 80079c2:	106d      	asrs	r5, r5, #1
 80079c4:	429d      	cmp	r5, r3
 80079c6:	bf38      	it	cc
 80079c8:	461d      	movcc	r5, r3
 80079ca:	0553      	lsls	r3, r2, #21
 80079cc:	d527      	bpl.n	8007a1e <__ssputs_r+0x8e>
 80079ce:	4629      	mov	r1, r5
 80079d0:	f000 f958 	bl	8007c84 <_malloc_r>
 80079d4:	4606      	mov	r6, r0
 80079d6:	b360      	cbz	r0, 8007a32 <__ssputs_r+0xa2>
 80079d8:	6921      	ldr	r1, [r4, #16]
 80079da:	464a      	mov	r2, r9
 80079dc:	f000 fbc4 	bl	8008168 <memcpy>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ea:	81a3      	strh	r3, [r4, #12]
 80079ec:	6126      	str	r6, [r4, #16]
 80079ee:	6165      	str	r5, [r4, #20]
 80079f0:	444e      	add	r6, r9
 80079f2:	eba5 0509 	sub.w	r5, r5, r9
 80079f6:	6026      	str	r6, [r4, #0]
 80079f8:	60a5      	str	r5, [r4, #8]
 80079fa:	463e      	mov	r6, r7
 80079fc:	42be      	cmp	r6, r7
 80079fe:	d900      	bls.n	8007a02 <__ssputs_r+0x72>
 8007a00:	463e      	mov	r6, r7
 8007a02:	6820      	ldr	r0, [r4, #0]
 8007a04:	4632      	mov	r2, r6
 8007a06:	4641      	mov	r1, r8
 8007a08:	f000 fb84 	bl	8008114 <memmove>
 8007a0c:	68a3      	ldr	r3, [r4, #8]
 8007a0e:	1b9b      	subs	r3, r3, r6
 8007a10:	60a3      	str	r3, [r4, #8]
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	4433      	add	r3, r6
 8007a16:	6023      	str	r3, [r4, #0]
 8007a18:	2000      	movs	r0, #0
 8007a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1e:	462a      	mov	r2, r5
 8007a20:	f000 fb4a 	bl	80080b8 <_realloc_r>
 8007a24:	4606      	mov	r6, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d1e0      	bne.n	80079ec <__ssputs_r+0x5c>
 8007a2a:	6921      	ldr	r1, [r4, #16]
 8007a2c:	4650      	mov	r0, sl
 8007a2e:	f000 fba9 	bl	8008184 <_free_r>
 8007a32:	230c      	movs	r3, #12
 8007a34:	f8ca 3000 	str.w	r3, [sl]
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a44:	e7e9      	b.n	8007a1a <__ssputs_r+0x8a>
	...

08007a48 <_svfiprintf_r>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	4698      	mov	r8, r3
 8007a4e:	898b      	ldrh	r3, [r1, #12]
 8007a50:	061b      	lsls	r3, r3, #24
 8007a52:	b09d      	sub	sp, #116	@ 0x74
 8007a54:	4607      	mov	r7, r0
 8007a56:	460d      	mov	r5, r1
 8007a58:	4614      	mov	r4, r2
 8007a5a:	d510      	bpl.n	8007a7e <_svfiprintf_r+0x36>
 8007a5c:	690b      	ldr	r3, [r1, #16]
 8007a5e:	b973      	cbnz	r3, 8007a7e <_svfiprintf_r+0x36>
 8007a60:	2140      	movs	r1, #64	@ 0x40
 8007a62:	f000 f90f 	bl	8007c84 <_malloc_r>
 8007a66:	6028      	str	r0, [r5, #0]
 8007a68:	6128      	str	r0, [r5, #16]
 8007a6a:	b930      	cbnz	r0, 8007a7a <_svfiprintf_r+0x32>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a74:	b01d      	add	sp, #116	@ 0x74
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	2340      	movs	r3, #64	@ 0x40
 8007a7c:	616b      	str	r3, [r5, #20]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a82:	2320      	movs	r3, #32
 8007a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a8c:	2330      	movs	r3, #48	@ 0x30
 8007a8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c2c <_svfiprintf_r+0x1e4>
 8007a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a96:	f04f 0901 	mov.w	r9, #1
 8007a9a:	4623      	mov	r3, r4
 8007a9c:	469a      	mov	sl, r3
 8007a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa2:	b10a      	cbz	r2, 8007aa8 <_svfiprintf_r+0x60>
 8007aa4:	2a25      	cmp	r2, #37	@ 0x25
 8007aa6:	d1f9      	bne.n	8007a9c <_svfiprintf_r+0x54>
 8007aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8007aac:	d00b      	beq.n	8007ac6 <_svfiprintf_r+0x7e>
 8007aae:	465b      	mov	r3, fp
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7ff ff6b 	bl	8007990 <__ssputs_r>
 8007aba:	3001      	adds	r0, #1
 8007abc:	f000 80a7 	beq.w	8007c0e <_svfiprintf_r+0x1c6>
 8007ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ac2:	445a      	add	r2, fp
 8007ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 809f 	beq.w	8007c0e <_svfiprintf_r+0x1c6>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ada:	f10a 0a01 	add.w	sl, sl, #1
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	9307      	str	r3, [sp, #28]
 8007ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ae8:	4654      	mov	r4, sl
 8007aea:	2205      	movs	r2, #5
 8007aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af0:	484e      	ldr	r0, [pc, #312]	@ (8007c2c <_svfiprintf_r+0x1e4>)
 8007af2:	f7f8 fb85 	bl	8000200 <memchr>
 8007af6:	9a04      	ldr	r2, [sp, #16]
 8007af8:	b9d8      	cbnz	r0, 8007b32 <_svfiprintf_r+0xea>
 8007afa:	06d0      	lsls	r0, r2, #27
 8007afc:	bf44      	itt	mi
 8007afe:	2320      	movmi	r3, #32
 8007b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b04:	0711      	lsls	r1, r2, #28
 8007b06:	bf44      	itt	mi
 8007b08:	232b      	movmi	r3, #43	@ 0x2b
 8007b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b14:	d015      	beq.n	8007b42 <_svfiprintf_r+0xfa>
 8007b16:	9a07      	ldr	r2, [sp, #28]
 8007b18:	4654      	mov	r4, sl
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	f04f 0c0a 	mov.w	ip, #10
 8007b20:	4621      	mov	r1, r4
 8007b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b26:	3b30      	subs	r3, #48	@ 0x30
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d94b      	bls.n	8007bc4 <_svfiprintf_r+0x17c>
 8007b2c:	b1b0      	cbz	r0, 8007b5c <_svfiprintf_r+0x114>
 8007b2e:	9207      	str	r2, [sp, #28]
 8007b30:	e014      	b.n	8007b5c <_svfiprintf_r+0x114>
 8007b32:	eba0 0308 	sub.w	r3, r0, r8
 8007b36:	fa09 f303 	lsl.w	r3, r9, r3
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	46a2      	mov	sl, r4
 8007b40:	e7d2      	b.n	8007ae8 <_svfiprintf_r+0xa0>
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	1d19      	adds	r1, r3, #4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	9103      	str	r1, [sp, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bfbb      	ittet	lt
 8007b4e:	425b      	neglt	r3, r3
 8007b50:	f042 0202 	orrlt.w	r2, r2, #2
 8007b54:	9307      	strge	r3, [sp, #28]
 8007b56:	9307      	strlt	r3, [sp, #28]
 8007b58:	bfb8      	it	lt
 8007b5a:	9204      	strlt	r2, [sp, #16]
 8007b5c:	7823      	ldrb	r3, [r4, #0]
 8007b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b60:	d10a      	bne.n	8007b78 <_svfiprintf_r+0x130>
 8007b62:	7863      	ldrb	r3, [r4, #1]
 8007b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b66:	d132      	bne.n	8007bce <_svfiprintf_r+0x186>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	1d1a      	adds	r2, r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9203      	str	r2, [sp, #12]
 8007b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b74:	3402      	adds	r4, #2
 8007b76:	9305      	str	r3, [sp, #20]
 8007b78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c3c <_svfiprintf_r+0x1f4>
 8007b7c:	7821      	ldrb	r1, [r4, #0]
 8007b7e:	2203      	movs	r2, #3
 8007b80:	4650      	mov	r0, sl
 8007b82:	f7f8 fb3d 	bl	8000200 <memchr>
 8007b86:	b138      	cbz	r0, 8007b98 <_svfiprintf_r+0x150>
 8007b88:	9b04      	ldr	r3, [sp, #16]
 8007b8a:	eba0 000a 	sub.w	r0, r0, sl
 8007b8e:	2240      	movs	r2, #64	@ 0x40
 8007b90:	4082      	lsls	r2, r0
 8007b92:	4313      	orrs	r3, r2
 8007b94:	3401      	adds	r4, #1
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b9c:	4824      	ldr	r0, [pc, #144]	@ (8007c30 <_svfiprintf_r+0x1e8>)
 8007b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ba2:	2206      	movs	r2, #6
 8007ba4:	f7f8 fb2c 	bl	8000200 <memchr>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d036      	beq.n	8007c1a <_svfiprintf_r+0x1d2>
 8007bac:	4b21      	ldr	r3, [pc, #132]	@ (8007c34 <_svfiprintf_r+0x1ec>)
 8007bae:	bb1b      	cbnz	r3, 8007bf8 <_svfiprintf_r+0x1b0>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	3307      	adds	r3, #7
 8007bb4:	f023 0307 	bic.w	r3, r3, #7
 8007bb8:	3308      	adds	r3, #8
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bbe:	4433      	add	r3, r6
 8007bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc2:	e76a      	b.n	8007a9a <_svfiprintf_r+0x52>
 8007bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bc8:	460c      	mov	r4, r1
 8007bca:	2001      	movs	r0, #1
 8007bcc:	e7a8      	b.n	8007b20 <_svfiprintf_r+0xd8>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f04f 0c0a 	mov.w	ip, #10
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be0:	3a30      	subs	r2, #48	@ 0x30
 8007be2:	2a09      	cmp	r2, #9
 8007be4:	d903      	bls.n	8007bee <_svfiprintf_r+0x1a6>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0c6      	beq.n	8007b78 <_svfiprintf_r+0x130>
 8007bea:	9105      	str	r1, [sp, #20]
 8007bec:	e7c4      	b.n	8007b78 <_svfiprintf_r+0x130>
 8007bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e7f0      	b.n	8007bda <_svfiprintf_r+0x192>
 8007bf8:	ab03      	add	r3, sp, #12
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	462a      	mov	r2, r5
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007c38 <_svfiprintf_r+0x1f0>)
 8007c00:	a904      	add	r1, sp, #16
 8007c02:	4638      	mov	r0, r7
 8007c04:	f3af 8000 	nop.w
 8007c08:	1c42      	adds	r2, r0, #1
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	d1d6      	bne.n	8007bbc <_svfiprintf_r+0x174>
 8007c0e:	89ab      	ldrh	r3, [r5, #12]
 8007c10:	065b      	lsls	r3, r3, #25
 8007c12:	f53f af2d 	bmi.w	8007a70 <_svfiprintf_r+0x28>
 8007c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c18:	e72c      	b.n	8007a74 <_svfiprintf_r+0x2c>
 8007c1a:	ab03      	add	r3, sp, #12
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	462a      	mov	r2, r5
 8007c20:	4b05      	ldr	r3, [pc, #20]	@ (8007c38 <_svfiprintf_r+0x1f0>)
 8007c22:	a904      	add	r1, sp, #16
 8007c24:	4638      	mov	r0, r7
 8007c26:	f000 f91b 	bl	8007e60 <_printf_i>
 8007c2a:	e7ed      	b.n	8007c08 <_svfiprintf_r+0x1c0>
 8007c2c:	0800905c 	.word	0x0800905c
 8007c30:	08009066 	.word	0x08009066
 8007c34:	00000000 	.word	0x00000000
 8007c38:	08007991 	.word	0x08007991
 8007c3c:	08009062 	.word	0x08009062

08007c40 <sbrk_aligned>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	4e0f      	ldr	r6, [pc, #60]	@ (8007c80 <sbrk_aligned+0x40>)
 8007c44:	460c      	mov	r4, r1
 8007c46:	6831      	ldr	r1, [r6, #0]
 8007c48:	4605      	mov	r5, r0
 8007c4a:	b911      	cbnz	r1, 8007c52 <sbrk_aligned+0x12>
 8007c4c:	f000 fa7c 	bl	8008148 <_sbrk_r>
 8007c50:	6030      	str	r0, [r6, #0]
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 fa77 	bl	8008148 <_sbrk_r>
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	d103      	bne.n	8007c66 <sbrk_aligned+0x26>
 8007c5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007c62:	4620      	mov	r0, r4
 8007c64:	bd70      	pop	{r4, r5, r6, pc}
 8007c66:	1cc4      	adds	r4, r0, #3
 8007c68:	f024 0403 	bic.w	r4, r4, #3
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	d0f8      	beq.n	8007c62 <sbrk_aligned+0x22>
 8007c70:	1a21      	subs	r1, r4, r0
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 fa68 	bl	8008148 <_sbrk_r>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d1f2      	bne.n	8007c62 <sbrk_aligned+0x22>
 8007c7c:	e7ef      	b.n	8007c5e <sbrk_aligned+0x1e>
 8007c7e:	bf00      	nop
 8007c80:	200007ac 	.word	0x200007ac

08007c84 <_malloc_r>:
 8007c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c88:	1ccd      	adds	r5, r1, #3
 8007c8a:	f025 0503 	bic.w	r5, r5, #3
 8007c8e:	3508      	adds	r5, #8
 8007c90:	2d0c      	cmp	r5, #12
 8007c92:	bf38      	it	cc
 8007c94:	250c      	movcc	r5, #12
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	4606      	mov	r6, r0
 8007c9a:	db01      	blt.n	8007ca0 <_malloc_r+0x1c>
 8007c9c:	42a9      	cmp	r1, r5
 8007c9e:	d904      	bls.n	8007caa <_malloc_r+0x26>
 8007ca0:	230c      	movs	r3, #12
 8007ca2:	6033      	str	r3, [r6, #0]
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007caa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d80 <_malloc_r+0xfc>
 8007cae:	f000 f9f7 	bl	80080a0 <__malloc_lock>
 8007cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cb6:	461c      	mov	r4, r3
 8007cb8:	bb44      	cbnz	r4, 8007d0c <_malloc_r+0x88>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff ffbf 	bl	8007c40 <sbrk_aligned>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	d158      	bne.n	8007d7a <_malloc_r+0xf6>
 8007cc8:	f8d8 4000 	ldr.w	r4, [r8]
 8007ccc:	4627      	mov	r7, r4
 8007cce:	2f00      	cmp	r7, #0
 8007cd0:	d143      	bne.n	8007d5a <_malloc_r+0xd6>
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	d04b      	beq.n	8007d6e <_malloc_r+0xea>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	4639      	mov	r1, r7
 8007cda:	4630      	mov	r0, r6
 8007cdc:	eb04 0903 	add.w	r9, r4, r3
 8007ce0:	f000 fa32 	bl	8008148 <_sbrk_r>
 8007ce4:	4581      	cmp	r9, r0
 8007ce6:	d142      	bne.n	8007d6e <_malloc_r+0xea>
 8007ce8:	6821      	ldr	r1, [r4, #0]
 8007cea:	1a6d      	subs	r5, r5, r1
 8007cec:	4629      	mov	r1, r5
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7ff ffa6 	bl	8007c40 <sbrk_aligned>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d03a      	beq.n	8007d6e <_malloc_r+0xea>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	442b      	add	r3, r5
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	bb62      	cbnz	r2, 8007d60 <_malloc_r+0xdc>
 8007d06:	f8c8 7000 	str.w	r7, [r8]
 8007d0a:	e00f      	b.n	8007d2c <_malloc_r+0xa8>
 8007d0c:	6822      	ldr	r2, [r4, #0]
 8007d0e:	1b52      	subs	r2, r2, r5
 8007d10:	d420      	bmi.n	8007d54 <_malloc_r+0xd0>
 8007d12:	2a0b      	cmp	r2, #11
 8007d14:	d917      	bls.n	8007d46 <_malloc_r+0xc2>
 8007d16:	1961      	adds	r1, r4, r5
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	6025      	str	r5, [r4, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	6059      	strne	r1, [r3, #4]
 8007d20:	6863      	ldr	r3, [r4, #4]
 8007d22:	bf08      	it	eq
 8007d24:	f8c8 1000 	streq.w	r1, [r8]
 8007d28:	5162      	str	r2, [r4, r5]
 8007d2a:	604b      	str	r3, [r1, #4]
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 f9bd 	bl	80080ac <__malloc_unlock>
 8007d32:	f104 000b 	add.w	r0, r4, #11
 8007d36:	1d23      	adds	r3, r4, #4
 8007d38:	f020 0007 	bic.w	r0, r0, #7
 8007d3c:	1ac2      	subs	r2, r0, r3
 8007d3e:	bf1c      	itt	ne
 8007d40:	1a1b      	subne	r3, r3, r0
 8007d42:	50a3      	strne	r3, [r4, r2]
 8007d44:	e7af      	b.n	8007ca6 <_malloc_r+0x22>
 8007d46:	6862      	ldr	r2, [r4, #4]
 8007d48:	42a3      	cmp	r3, r4
 8007d4a:	bf0c      	ite	eq
 8007d4c:	f8c8 2000 	streq.w	r2, [r8]
 8007d50:	605a      	strne	r2, [r3, #4]
 8007d52:	e7eb      	b.n	8007d2c <_malloc_r+0xa8>
 8007d54:	4623      	mov	r3, r4
 8007d56:	6864      	ldr	r4, [r4, #4]
 8007d58:	e7ae      	b.n	8007cb8 <_malloc_r+0x34>
 8007d5a:	463c      	mov	r4, r7
 8007d5c:	687f      	ldr	r7, [r7, #4]
 8007d5e:	e7b6      	b.n	8007cce <_malloc_r+0x4a>
 8007d60:	461a      	mov	r2, r3
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	42a3      	cmp	r3, r4
 8007d66:	d1fb      	bne.n	8007d60 <_malloc_r+0xdc>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	6053      	str	r3, [r2, #4]
 8007d6c:	e7de      	b.n	8007d2c <_malloc_r+0xa8>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	4630      	mov	r0, r6
 8007d74:	f000 f99a 	bl	80080ac <__malloc_unlock>
 8007d78:	e794      	b.n	8007ca4 <_malloc_r+0x20>
 8007d7a:	6005      	str	r5, [r0, #0]
 8007d7c:	e7d6      	b.n	8007d2c <_malloc_r+0xa8>
 8007d7e:	bf00      	nop
 8007d80:	200007b0 	.word	0x200007b0

08007d84 <_printf_common>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	4616      	mov	r6, r2
 8007d8a:	4698      	mov	r8, r3
 8007d8c:	688a      	ldr	r2, [r1, #8]
 8007d8e:	690b      	ldr	r3, [r1, #16]
 8007d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d94:	4293      	cmp	r3, r2
 8007d96:	bfb8      	it	lt
 8007d98:	4613      	movlt	r3, r2
 8007d9a:	6033      	str	r3, [r6, #0]
 8007d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007da0:	4607      	mov	r7, r0
 8007da2:	460c      	mov	r4, r1
 8007da4:	b10a      	cbz	r2, 8007daa <_printf_common+0x26>
 8007da6:	3301      	adds	r3, #1
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	0699      	lsls	r1, r3, #26
 8007dae:	bf42      	ittt	mi
 8007db0:	6833      	ldrmi	r3, [r6, #0]
 8007db2:	3302      	addmi	r3, #2
 8007db4:	6033      	strmi	r3, [r6, #0]
 8007db6:	6825      	ldr	r5, [r4, #0]
 8007db8:	f015 0506 	ands.w	r5, r5, #6
 8007dbc:	d106      	bne.n	8007dcc <_printf_common+0x48>
 8007dbe:	f104 0a19 	add.w	sl, r4, #25
 8007dc2:	68e3      	ldr	r3, [r4, #12]
 8007dc4:	6832      	ldr	r2, [r6, #0]
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	dc26      	bgt.n	8007e1a <_printf_common+0x96>
 8007dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dd0:	6822      	ldr	r2, [r4, #0]
 8007dd2:	3b00      	subs	r3, #0
 8007dd4:	bf18      	it	ne
 8007dd6:	2301      	movne	r3, #1
 8007dd8:	0692      	lsls	r2, r2, #26
 8007dda:	d42b      	bmi.n	8007e34 <_printf_common+0xb0>
 8007ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007de0:	4641      	mov	r1, r8
 8007de2:	4638      	mov	r0, r7
 8007de4:	47c8      	blx	r9
 8007de6:	3001      	adds	r0, #1
 8007de8:	d01e      	beq.n	8007e28 <_printf_common+0xa4>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	6922      	ldr	r2, [r4, #16]
 8007dee:	f003 0306 	and.w	r3, r3, #6
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	bf02      	ittt	eq
 8007df6:	68e5      	ldreq	r5, [r4, #12]
 8007df8:	6833      	ldreq	r3, [r6, #0]
 8007dfa:	1aed      	subeq	r5, r5, r3
 8007dfc:	68a3      	ldr	r3, [r4, #8]
 8007dfe:	bf0c      	ite	eq
 8007e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e04:	2500      	movne	r5, #0
 8007e06:	4293      	cmp	r3, r2
 8007e08:	bfc4      	itt	gt
 8007e0a:	1a9b      	subgt	r3, r3, r2
 8007e0c:	18ed      	addgt	r5, r5, r3
 8007e0e:	2600      	movs	r6, #0
 8007e10:	341a      	adds	r4, #26
 8007e12:	42b5      	cmp	r5, r6
 8007e14:	d11a      	bne.n	8007e4c <_printf_common+0xc8>
 8007e16:	2000      	movs	r0, #0
 8007e18:	e008      	b.n	8007e2c <_printf_common+0xa8>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4652      	mov	r2, sl
 8007e1e:	4641      	mov	r1, r8
 8007e20:	4638      	mov	r0, r7
 8007e22:	47c8      	blx	r9
 8007e24:	3001      	adds	r0, #1
 8007e26:	d103      	bne.n	8007e30 <_printf_common+0xac>
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e30:	3501      	adds	r5, #1
 8007e32:	e7c6      	b.n	8007dc2 <_printf_common+0x3e>
 8007e34:	18e1      	adds	r1, r4, r3
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	2030      	movs	r0, #48	@ 0x30
 8007e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e3e:	4422      	add	r2, r4
 8007e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e48:	3302      	adds	r3, #2
 8007e4a:	e7c7      	b.n	8007ddc <_printf_common+0x58>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4622      	mov	r2, r4
 8007e50:	4641      	mov	r1, r8
 8007e52:	4638      	mov	r0, r7
 8007e54:	47c8      	blx	r9
 8007e56:	3001      	adds	r0, #1
 8007e58:	d0e6      	beq.n	8007e28 <_printf_common+0xa4>
 8007e5a:	3601      	adds	r6, #1
 8007e5c:	e7d9      	b.n	8007e12 <_printf_common+0x8e>
	...

08007e60 <_printf_i>:
 8007e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e64:	7e0f      	ldrb	r7, [r1, #24]
 8007e66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e68:	2f78      	cmp	r7, #120	@ 0x78
 8007e6a:	4691      	mov	r9, r2
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	469a      	mov	sl, r3
 8007e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e76:	d807      	bhi.n	8007e88 <_printf_i+0x28>
 8007e78:	2f62      	cmp	r7, #98	@ 0x62
 8007e7a:	d80a      	bhi.n	8007e92 <_printf_i+0x32>
 8007e7c:	2f00      	cmp	r7, #0
 8007e7e:	f000 80d2 	beq.w	8008026 <_printf_i+0x1c6>
 8007e82:	2f58      	cmp	r7, #88	@ 0x58
 8007e84:	f000 80b9 	beq.w	8007ffa <_printf_i+0x19a>
 8007e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e90:	e03a      	b.n	8007f08 <_printf_i+0xa8>
 8007e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e96:	2b15      	cmp	r3, #21
 8007e98:	d8f6      	bhi.n	8007e88 <_printf_i+0x28>
 8007e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8007ea0 <_printf_i+0x40>)
 8007e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ea0:	08007ef9 	.word	0x08007ef9
 8007ea4:	08007f0d 	.word	0x08007f0d
 8007ea8:	08007e89 	.word	0x08007e89
 8007eac:	08007e89 	.word	0x08007e89
 8007eb0:	08007e89 	.word	0x08007e89
 8007eb4:	08007e89 	.word	0x08007e89
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08007e89 	.word	0x08007e89
 8007ec0:	08007e89 	.word	0x08007e89
 8007ec4:	08007e89 	.word	0x08007e89
 8007ec8:	08007e89 	.word	0x08007e89
 8007ecc:	0800800d 	.word	0x0800800d
 8007ed0:	08007f37 	.word	0x08007f37
 8007ed4:	08007fc7 	.word	0x08007fc7
 8007ed8:	08007e89 	.word	0x08007e89
 8007edc:	08007e89 	.word	0x08007e89
 8007ee0:	0800802f 	.word	0x0800802f
 8007ee4:	08007e89 	.word	0x08007e89
 8007ee8:	08007f37 	.word	0x08007f37
 8007eec:	08007e89 	.word	0x08007e89
 8007ef0:	08007e89 	.word	0x08007e89
 8007ef4:	08007fcf 	.word	0x08007fcf
 8007ef8:	6833      	ldr	r3, [r6, #0]
 8007efa:	1d1a      	adds	r2, r3, #4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6032      	str	r2, [r6, #0]
 8007f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e09d      	b.n	8008048 <_printf_i+0x1e8>
 8007f0c:	6833      	ldr	r3, [r6, #0]
 8007f0e:	6820      	ldr	r0, [r4, #0]
 8007f10:	1d19      	adds	r1, r3, #4
 8007f12:	6031      	str	r1, [r6, #0]
 8007f14:	0606      	lsls	r6, r0, #24
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0xbc>
 8007f18:	681d      	ldr	r5, [r3, #0]
 8007f1a:	e003      	b.n	8007f24 <_printf_i+0xc4>
 8007f1c:	0645      	lsls	r5, r0, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0xb8>
 8007f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f24:	2d00      	cmp	r5, #0
 8007f26:	da03      	bge.n	8007f30 <_printf_i+0xd0>
 8007f28:	232d      	movs	r3, #45	@ 0x2d
 8007f2a:	426d      	negs	r5, r5
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f30:	4859      	ldr	r0, [pc, #356]	@ (8008098 <_printf_i+0x238>)
 8007f32:	230a      	movs	r3, #10
 8007f34:	e011      	b.n	8007f5a <_printf_i+0xfa>
 8007f36:	6821      	ldr	r1, [r4, #0]
 8007f38:	6833      	ldr	r3, [r6, #0]
 8007f3a:	0608      	lsls	r0, r1, #24
 8007f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f40:	d402      	bmi.n	8007f48 <_printf_i+0xe8>
 8007f42:	0649      	lsls	r1, r1, #25
 8007f44:	bf48      	it	mi
 8007f46:	b2ad      	uxthmi	r5, r5
 8007f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f4a:	4853      	ldr	r0, [pc, #332]	@ (8008098 <_printf_i+0x238>)
 8007f4c:	6033      	str	r3, [r6, #0]
 8007f4e:	bf14      	ite	ne
 8007f50:	230a      	movne	r3, #10
 8007f52:	2308      	moveq	r3, #8
 8007f54:	2100      	movs	r1, #0
 8007f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f5a:	6866      	ldr	r6, [r4, #4]
 8007f5c:	60a6      	str	r6, [r4, #8]
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	bfa2      	ittt	ge
 8007f62:	6821      	ldrge	r1, [r4, #0]
 8007f64:	f021 0104 	bicge.w	r1, r1, #4
 8007f68:	6021      	strge	r1, [r4, #0]
 8007f6a:	b90d      	cbnz	r5, 8007f70 <_printf_i+0x110>
 8007f6c:	2e00      	cmp	r6, #0
 8007f6e:	d04b      	beq.n	8008008 <_printf_i+0x1a8>
 8007f70:	4616      	mov	r6, r2
 8007f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f76:	fb03 5711 	mls	r7, r3, r1, r5
 8007f7a:	5dc7      	ldrb	r7, [r0, r7]
 8007f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f80:	462f      	mov	r7, r5
 8007f82:	42bb      	cmp	r3, r7
 8007f84:	460d      	mov	r5, r1
 8007f86:	d9f4      	bls.n	8007f72 <_printf_i+0x112>
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d10b      	bne.n	8007fa4 <_printf_i+0x144>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	07df      	lsls	r7, r3, #31
 8007f90:	d508      	bpl.n	8007fa4 <_printf_i+0x144>
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	6861      	ldr	r1, [r4, #4]
 8007f96:	4299      	cmp	r1, r3
 8007f98:	bfde      	ittt	le
 8007f9a:	2330      	movle	r3, #48	@ 0x30
 8007f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fa0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007fa4:	1b92      	subs	r2, r2, r6
 8007fa6:	6122      	str	r2, [r4, #16]
 8007fa8:	f8cd a000 	str.w	sl, [sp]
 8007fac:	464b      	mov	r3, r9
 8007fae:	aa03      	add	r2, sp, #12
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	f7ff fee6 	bl	8007d84 <_printf_common>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d14a      	bne.n	8008052 <_printf_i+0x1f2>
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fc0:	b004      	add	sp, #16
 8007fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	f043 0320 	orr.w	r3, r3, #32
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	4833      	ldr	r0, [pc, #204]	@ (800809c <_printf_i+0x23c>)
 8007fd0:	2778      	movs	r7, #120	@ 0x78
 8007fd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	6831      	ldr	r1, [r6, #0]
 8007fda:	061f      	lsls	r7, r3, #24
 8007fdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fe0:	d402      	bmi.n	8007fe8 <_printf_i+0x188>
 8007fe2:	065f      	lsls	r7, r3, #25
 8007fe4:	bf48      	it	mi
 8007fe6:	b2ad      	uxthmi	r5, r5
 8007fe8:	6031      	str	r1, [r6, #0]
 8007fea:	07d9      	lsls	r1, r3, #31
 8007fec:	bf44      	itt	mi
 8007fee:	f043 0320 	orrmi.w	r3, r3, #32
 8007ff2:	6023      	strmi	r3, [r4, #0]
 8007ff4:	b11d      	cbz	r5, 8007ffe <_printf_i+0x19e>
 8007ff6:	2310      	movs	r3, #16
 8007ff8:	e7ac      	b.n	8007f54 <_printf_i+0xf4>
 8007ffa:	4827      	ldr	r0, [pc, #156]	@ (8008098 <_printf_i+0x238>)
 8007ffc:	e7e9      	b.n	8007fd2 <_printf_i+0x172>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	f023 0320 	bic.w	r3, r3, #32
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	e7f6      	b.n	8007ff6 <_printf_i+0x196>
 8008008:	4616      	mov	r6, r2
 800800a:	e7bd      	b.n	8007f88 <_printf_i+0x128>
 800800c:	6833      	ldr	r3, [r6, #0]
 800800e:	6825      	ldr	r5, [r4, #0]
 8008010:	6961      	ldr	r1, [r4, #20]
 8008012:	1d18      	adds	r0, r3, #4
 8008014:	6030      	str	r0, [r6, #0]
 8008016:	062e      	lsls	r6, r5, #24
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	d501      	bpl.n	8008020 <_printf_i+0x1c0>
 800801c:	6019      	str	r1, [r3, #0]
 800801e:	e002      	b.n	8008026 <_printf_i+0x1c6>
 8008020:	0668      	lsls	r0, r5, #25
 8008022:	d5fb      	bpl.n	800801c <_printf_i+0x1bc>
 8008024:	8019      	strh	r1, [r3, #0]
 8008026:	2300      	movs	r3, #0
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	4616      	mov	r6, r2
 800802c:	e7bc      	b.n	8007fa8 <_printf_i+0x148>
 800802e:	6833      	ldr	r3, [r6, #0]
 8008030:	1d1a      	adds	r2, r3, #4
 8008032:	6032      	str	r2, [r6, #0]
 8008034:	681e      	ldr	r6, [r3, #0]
 8008036:	6862      	ldr	r2, [r4, #4]
 8008038:	2100      	movs	r1, #0
 800803a:	4630      	mov	r0, r6
 800803c:	f7f8 f8e0 	bl	8000200 <memchr>
 8008040:	b108      	cbz	r0, 8008046 <_printf_i+0x1e6>
 8008042:	1b80      	subs	r0, r0, r6
 8008044:	6060      	str	r0, [r4, #4]
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	2300      	movs	r3, #0
 800804c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008050:	e7aa      	b.n	8007fa8 <_printf_i+0x148>
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	4632      	mov	r2, r6
 8008056:	4649      	mov	r1, r9
 8008058:	4640      	mov	r0, r8
 800805a:	47d0      	blx	sl
 800805c:	3001      	adds	r0, #1
 800805e:	d0ad      	beq.n	8007fbc <_printf_i+0x15c>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	079b      	lsls	r3, r3, #30
 8008064:	d413      	bmi.n	800808e <_printf_i+0x22e>
 8008066:	68e0      	ldr	r0, [r4, #12]
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	4298      	cmp	r0, r3
 800806c:	bfb8      	it	lt
 800806e:	4618      	movlt	r0, r3
 8008070:	e7a6      	b.n	8007fc0 <_printf_i+0x160>
 8008072:	2301      	movs	r3, #1
 8008074:	4632      	mov	r2, r6
 8008076:	4649      	mov	r1, r9
 8008078:	4640      	mov	r0, r8
 800807a:	47d0      	blx	sl
 800807c:	3001      	adds	r0, #1
 800807e:	d09d      	beq.n	8007fbc <_printf_i+0x15c>
 8008080:	3501      	adds	r5, #1
 8008082:	68e3      	ldr	r3, [r4, #12]
 8008084:	9903      	ldr	r1, [sp, #12]
 8008086:	1a5b      	subs	r3, r3, r1
 8008088:	42ab      	cmp	r3, r5
 800808a:	dcf2      	bgt.n	8008072 <_printf_i+0x212>
 800808c:	e7eb      	b.n	8008066 <_printf_i+0x206>
 800808e:	2500      	movs	r5, #0
 8008090:	f104 0619 	add.w	r6, r4, #25
 8008094:	e7f5      	b.n	8008082 <_printf_i+0x222>
 8008096:	bf00      	nop
 8008098:	0800906d 	.word	0x0800906d
 800809c:	0800907e 	.word	0x0800907e

080080a0 <__malloc_lock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	@ (80080a8 <__malloc_lock+0x8>)
 80080a2:	f7ff bc73 	b.w	800798c <__retarget_lock_acquire_recursive>
 80080a6:	bf00      	nop
 80080a8:	200007a8 	.word	0x200007a8

080080ac <__malloc_unlock>:
 80080ac:	4801      	ldr	r0, [pc, #4]	@ (80080b4 <__malloc_unlock+0x8>)
 80080ae:	f7ff bc6e 	b.w	800798e <__retarget_lock_release_recursive>
 80080b2:	bf00      	nop
 80080b4:	200007a8 	.word	0x200007a8

080080b8 <_realloc_r>:
 80080b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080bc:	4680      	mov	r8, r0
 80080be:	4615      	mov	r5, r2
 80080c0:	460c      	mov	r4, r1
 80080c2:	b921      	cbnz	r1, 80080ce <_realloc_r+0x16>
 80080c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	4611      	mov	r1, r2
 80080ca:	f7ff bddb 	b.w	8007c84 <_malloc_r>
 80080ce:	b92a      	cbnz	r2, 80080dc <_realloc_r+0x24>
 80080d0:	f000 f858 	bl	8008184 <_free_r>
 80080d4:	2400      	movs	r4, #0
 80080d6:	4620      	mov	r0, r4
 80080d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080dc:	f000 f89c 	bl	8008218 <_malloc_usable_size_r>
 80080e0:	4285      	cmp	r5, r0
 80080e2:	4606      	mov	r6, r0
 80080e4:	d802      	bhi.n	80080ec <_realloc_r+0x34>
 80080e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080ea:	d8f4      	bhi.n	80080d6 <_realloc_r+0x1e>
 80080ec:	4629      	mov	r1, r5
 80080ee:	4640      	mov	r0, r8
 80080f0:	f7ff fdc8 	bl	8007c84 <_malloc_r>
 80080f4:	4607      	mov	r7, r0
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d0ec      	beq.n	80080d4 <_realloc_r+0x1c>
 80080fa:	42b5      	cmp	r5, r6
 80080fc:	462a      	mov	r2, r5
 80080fe:	4621      	mov	r1, r4
 8008100:	bf28      	it	cs
 8008102:	4632      	movcs	r2, r6
 8008104:	f000 f830 	bl	8008168 <memcpy>
 8008108:	4621      	mov	r1, r4
 800810a:	4640      	mov	r0, r8
 800810c:	f000 f83a 	bl	8008184 <_free_r>
 8008110:	463c      	mov	r4, r7
 8008112:	e7e0      	b.n	80080d6 <_realloc_r+0x1e>

08008114 <memmove>:
 8008114:	4288      	cmp	r0, r1
 8008116:	b510      	push	{r4, lr}
 8008118:	eb01 0402 	add.w	r4, r1, r2
 800811c:	d902      	bls.n	8008124 <memmove+0x10>
 800811e:	4284      	cmp	r4, r0
 8008120:	4623      	mov	r3, r4
 8008122:	d807      	bhi.n	8008134 <memmove+0x20>
 8008124:	1e43      	subs	r3, r0, #1
 8008126:	42a1      	cmp	r1, r4
 8008128:	d008      	beq.n	800813c <memmove+0x28>
 800812a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800812e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008132:	e7f8      	b.n	8008126 <memmove+0x12>
 8008134:	4402      	add	r2, r0
 8008136:	4601      	mov	r1, r0
 8008138:	428a      	cmp	r2, r1
 800813a:	d100      	bne.n	800813e <memmove+0x2a>
 800813c:	bd10      	pop	{r4, pc}
 800813e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008146:	e7f7      	b.n	8008138 <memmove+0x24>

08008148 <_sbrk_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d06      	ldr	r5, [pc, #24]	@ (8008164 <_sbrk_r+0x1c>)
 800814c:	2300      	movs	r3, #0
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	f7f9 f9a4 	bl	80014a0 <_sbrk>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_sbrk_r+0x1a>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_sbrk_r+0x1a>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	200007b4 	.word	0x200007b4

08008168 <memcpy>:
 8008168:	440a      	add	r2, r1
 800816a:	4291      	cmp	r1, r2
 800816c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008170:	d100      	bne.n	8008174 <memcpy+0xc>
 8008172:	4770      	bx	lr
 8008174:	b510      	push	{r4, lr}
 8008176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800817a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800817e:	4291      	cmp	r1, r2
 8008180:	d1f9      	bne.n	8008176 <memcpy+0xe>
 8008182:	bd10      	pop	{r4, pc}

08008184 <_free_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4605      	mov	r5, r0
 8008188:	2900      	cmp	r1, #0
 800818a:	d041      	beq.n	8008210 <_free_r+0x8c>
 800818c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008190:	1f0c      	subs	r4, r1, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfb8      	it	lt
 8008196:	18e4      	addlt	r4, r4, r3
 8008198:	f7ff ff82 	bl	80080a0 <__malloc_lock>
 800819c:	4a1d      	ldr	r2, [pc, #116]	@ (8008214 <_free_r+0x90>)
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	b933      	cbnz	r3, 80081b0 <_free_r+0x2c>
 80081a2:	6063      	str	r3, [r4, #4]
 80081a4:	6014      	str	r4, [r2, #0]
 80081a6:	4628      	mov	r0, r5
 80081a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ac:	f7ff bf7e 	b.w	80080ac <__malloc_unlock>
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d908      	bls.n	80081c6 <_free_r+0x42>
 80081b4:	6820      	ldr	r0, [r4, #0]
 80081b6:	1821      	adds	r1, r4, r0
 80081b8:	428b      	cmp	r3, r1
 80081ba:	bf01      	itttt	eq
 80081bc:	6819      	ldreq	r1, [r3, #0]
 80081be:	685b      	ldreq	r3, [r3, #4]
 80081c0:	1809      	addeq	r1, r1, r0
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	e7ed      	b.n	80081a2 <_free_r+0x1e>
 80081c6:	461a      	mov	r2, r3
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b10b      	cbz	r3, 80081d0 <_free_r+0x4c>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d9fa      	bls.n	80081c6 <_free_r+0x42>
 80081d0:	6811      	ldr	r1, [r2, #0]
 80081d2:	1850      	adds	r0, r2, r1
 80081d4:	42a0      	cmp	r0, r4
 80081d6:	d10b      	bne.n	80081f0 <_free_r+0x6c>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	4401      	add	r1, r0
 80081dc:	1850      	adds	r0, r2, r1
 80081de:	4283      	cmp	r3, r0
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	d1e0      	bne.n	80081a6 <_free_r+0x22>
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	6053      	str	r3, [r2, #4]
 80081ea:	4408      	add	r0, r1
 80081ec:	6010      	str	r0, [r2, #0]
 80081ee:	e7da      	b.n	80081a6 <_free_r+0x22>
 80081f0:	d902      	bls.n	80081f8 <_free_r+0x74>
 80081f2:	230c      	movs	r3, #12
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	e7d6      	b.n	80081a6 <_free_r+0x22>
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	1821      	adds	r1, r4, r0
 80081fc:	428b      	cmp	r3, r1
 80081fe:	bf04      	itt	eq
 8008200:	6819      	ldreq	r1, [r3, #0]
 8008202:	685b      	ldreq	r3, [r3, #4]
 8008204:	6063      	str	r3, [r4, #4]
 8008206:	bf04      	itt	eq
 8008208:	1809      	addeq	r1, r1, r0
 800820a:	6021      	streq	r1, [r4, #0]
 800820c:	6054      	str	r4, [r2, #4]
 800820e:	e7ca      	b.n	80081a6 <_free_r+0x22>
 8008210:	bd38      	pop	{r3, r4, r5, pc}
 8008212:	bf00      	nop
 8008214:	200007b0 	.word	0x200007b0

08008218 <_malloc_usable_size_r>:
 8008218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800821c:	1f18      	subs	r0, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	bfbc      	itt	lt
 8008222:	580b      	ldrlt	r3, [r1, r0]
 8008224:	18c0      	addlt	r0, r0, r3
 8008226:	4770      	bx	lr

08008228 <_init>:
 8008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822a:	bf00      	nop
 800822c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822e:	bc08      	pop	{r3}
 8008230:	469e      	mov	lr, r3
 8008232:	4770      	bx	lr

08008234 <_fini>:
 8008234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008236:	bf00      	nop
 8008238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823a:	bc08      	pop	{r3}
 800823c:	469e      	mov	lr, r3
 800823e:	4770      	bx	lr
