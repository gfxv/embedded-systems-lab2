
embedded-systems-lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005278  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000136c  08005424  08005424  00006424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006790  08006790  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006798  08006798  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006798  08006798  00007798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800679c  0800679c  0000779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080067a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          0000055c  2000000c  2000000c  0000800c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000568  20000568  0000800c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b2cf  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240f  00000000  00000000  0001330b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  00015720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cf  00000000  00000000  00016178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002310c  00000000  00000000  00016947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed7d  00000000  00000000  00039a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2130  00000000  00000000  000487d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a900  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002834  00000000  00000000  0011a944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0011d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800540c 	.word	0x0800540c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800540c 	.word	0x0800540c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b10      	ldr	r3, [pc, #64]	@ (8000528 <MX_DMA_Init+0x4c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000528 <MX_DMA_Init+0x4c>)
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80004f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <MX_DMA_Init+0x4c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	200b      	movs	r0, #11
 8000504:	f000 fe53 	bl	80011ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000508:	200b      	movs	r0, #11
 800050a:	f000 fe6c 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2011      	movs	r0, #17
 8000514:	f000 fe4b 	bl	80011ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000518:	2011      	movs	r0, #17
 800051a:	f000 fe64 	bl	80011e6 <HAL_NVIC_EnableIRQ>

}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800

0800052c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	@ 0x28
 8000530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	4b30      	ldr	r3, [pc, #192]	@ (8000608 <MX_GPIO_Init+0xdc>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a2f      	ldr	r2, [pc, #188]	@ (8000608 <MX_GPIO_Init+0xdc>)
 800054c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b2d      	ldr	r3, [pc, #180]	@ (8000608 <MX_GPIO_Init+0xdc>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	4b29      	ldr	r3, [pc, #164]	@ (8000608 <MX_GPIO_Init+0xdc>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a28      	ldr	r2, [pc, #160]	@ (8000608 <MX_GPIO_Init+0xdc>)
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <MX_GPIO_Init+0xdc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0308 	and.w	r3, r3, #8
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <MX_GPIO_Init+0xdc>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a21      	ldr	r2, [pc, #132]	@ (8000608 <MX_GPIO_Init+0xdc>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_GPIO_Init+0xdc>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_GPIO_Init+0xdc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a1a      	ldr	r2, [pc, #104]	@ (8000608 <MX_GPIO_Init+0xdc>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_GPIO_Init+0xdc>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80005b8:	4814      	ldr	r0, [pc, #80]	@ (800060c <MX_GPIO_Init+0xe0>)
 80005ba:	f001 faf5 	bl	8001ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80005d0:	2302      	movs	r3, #2
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	480c      	ldr	r0, [pc, #48]	@ (800060c <MX_GPIO_Init+0xe0>)
 80005dc:	f001 f938 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80005e0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	4804      	ldr	r0, [pc, #16]	@ (800060c <MX_GPIO_Init+0xe0>)
 80005fa:	f001 f929 	bl	8001850 <HAL_GPIO_Init>

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40020c00 	.word	0x40020c00

08000610 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <MX_I2C1_Init+0x74>)
 8000616:	4a1c      	ldr	r2, [pc, #112]	@ (8000688 <MX_I2C1_Init+0x78>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <MX_I2C1_Init+0x74>)
 800061c:	4a1b      	ldr	r2, [pc, #108]	@ (800068c <MX_I2C1_Init+0x7c>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <MX_I2C1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <MX_I2C1_Init+0x74>)
 800062e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <MX_I2C1_Init+0x74>)
 800064e:	f001 fadf 	bl	8001c10 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f968 	bl	800092c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800065c:	2100      	movs	r1, #0
 800065e:	4809      	ldr	r0, [pc, #36]	@ (8000684 <MX_I2C1_Init+0x74>)
 8000660:	f003 fc6c 	bl	8003f3c <HAL_I2CEx_ConfigAnalogFilter>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800066a:	f000 f95f 	bl	800092c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800066e:	2100      	movs	r1, #0
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_I2C1_Init+0x74>)
 8000672:	f003 fc9f 	bl	8003fb4 <HAL_I2CEx_ConfigDigitalFilter>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800067c:	f000 f956 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000028 	.word	0x20000028
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a50      	ldr	r2, [pc, #320]	@ (80007f0 <HAL_I2C_MspInit+0x160>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	f040 8099 	bne.w	80007e6 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	4b4e      	ldr	r3, [pc, #312]	@ (80007f4 <HAL_I2C_MspInit+0x164>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006bc:	4a4d      	ldr	r2, [pc, #308]	@ (80007f4 <HAL_I2C_MspInit+0x164>)
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c4:	4b4b      	ldr	r3, [pc, #300]	@ (80007f4 <HAL_I2C_MspInit+0x164>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d6:	2312      	movs	r3, #18
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e2:	2304      	movs	r3, #4
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4842      	ldr	r0, [pc, #264]	@ (80007f8 <HAL_I2C_MspInit+0x168>)
 80006ee:	f001 f8af 	bl	8001850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b3f      	ldr	r3, [pc, #252]	@ (80007f4 <HAL_I2C_MspInit+0x164>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fa:	4a3e      	ldr	r2, [pc, #248]	@ (80007f4 <HAL_I2C_MspInit+0x164>)
 80006fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000700:	6413      	str	r3, [r2, #64]	@ 0x40
 8000702:	4b3c      	ldr	r3, [pc, #240]	@ (80007f4 <HAL_I2C_MspInit+0x164>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800070e:	4b3b      	ldr	r3, [pc, #236]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000710:	4a3b      	ldr	r2, [pc, #236]	@ (8000800 <HAL_I2C_MspInit+0x170>)
 8000712:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000714:	4b39      	ldr	r3, [pc, #228]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000716:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800071a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800071c:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 800071e:	2240      	movs	r2, #64	@ 0x40
 8000720:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000728:	4b34      	ldr	r3, [pc, #208]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 800072a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800072e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000730:	4b32      	ldr	r3, [pc, #200]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000736:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800073c:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000742:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000748:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800074e:	482b      	ldr	r0, [pc, #172]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000750:	f000 fd64 	bl	800121c <HAL_DMA_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800075a:	f000 f8e7 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a26      	ldr	r2, [pc, #152]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000762:	635a      	str	r2, [r3, #52]	@ 0x34
 8000764:	4a25      	ldr	r2, [pc, #148]	@ (80007fc <HAL_I2C_MspInit+0x16c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 800076c:	4a26      	ldr	r2, [pc, #152]	@ (8000808 <HAL_I2C_MspInit+0x178>)
 800076e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 8000772:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000776:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 8000786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800078a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80007aa:	4816      	ldr	r0, [pc, #88]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 80007ac:	f000 fd36 	bl	800121c <HAL_DMA_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80007b6:	f000 f8b9 	bl	800092c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 80007be:	639a      	str	r2, [r3, #56]	@ 0x38
 80007c0:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <HAL_I2C_MspInit+0x174>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	201f      	movs	r0, #31
 80007cc:	f000 fcef 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007d0:	201f      	movs	r0, #31
 80007d2:	f000 fd08 	bl	80011e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2020      	movs	r0, #32
 80007dc:	f000 fce7 	bl	80011ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007e0:	2020      	movs	r0, #32
 80007e2:	f000 fd00 	bl	80011e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	@ 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020400 	.word	0x40020400
 80007fc:	2000007c 	.word	0x2000007c
 8000800:	400260a0 	.word	0x400260a0
 8000804:	200000dc 	.word	0x200000dc
 8000808:	40026010 	.word	0x40026010

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fb5c 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f818 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f7ff fe88 	bl	800052c <MX_GPIO_Init>
  MX_DMA_Init();
 800081c:	f7ff fe5e 	bl	80004dc <MX_DMA_Init>
  MX_I2C1_Init();
 8000820:	f7ff fef6 	bl	8000610 <MX_I2C1_Init>
  MX_RTC_Init();
 8000824:	f000 f888 	bl	8000938 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  screen_init();
 8000828:	f000 f99a 	bl	8000b60 <screen_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800082c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <main+0x38>)
 8000832:	f001 f9d2 	bl	8001bda <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000836:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800083a:	f000 fbb9 	bl	8000fb0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800083e:	bf00      	nop
 8000840:	e7f4      	b.n	800082c <main+0x20>
 8000842:	bf00      	nop
 8000844:	40020c00 	.word	0x40020c00

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	@ 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fdac 	bl	80053b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <SystemClock_Config+0xdc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	4a2b      	ldr	r2, [pc, #172]	@ (8000924 <SystemClock_Config+0xdc>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	@ 0x40
 800087c:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <SystemClock_Config+0xdc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <SystemClock_Config+0xe0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a25      	ldr	r2, [pc, #148]	@ (8000928 <SystemClock_Config+0xe0>)
 8000892:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <SystemClock_Config+0xe0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008a4:	2309      	movs	r3, #9
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ae:	2301      	movs	r3, #1
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008bc:	230f      	movs	r3, #15
 80008be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008c0:	23d8      	movs	r3, #216	@ 0xd8
 80008c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fbff 	bl	80040d4 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008dc:	f000 f826 	bl	800092c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e0:	f003 fba8 	bl	8004034 <HAL_PWREx_EnableOverDrive>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ea:	f000 f81f 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2105      	movs	r1, #5
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fe59 	bl	80045c4 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000918:	f000 f808 	bl	800092c <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b090      	sub	sp, #64	@ 0x40
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800093e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2228      	movs	r2, #40	@ 0x28
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fd2b 	bl	80053b4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800095e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a48 <MX_RTC_Init+0x110>)
 8000960:	4a3a      	ldr	r2, [pc, #232]	@ (8000a4c <MX_RTC_Init+0x114>)
 8000962:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000964:	4b38      	ldr	r3, [pc, #224]	@ (8000a48 <MX_RTC_Init+0x110>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800096a:	4b37      	ldr	r3, [pc, #220]	@ (8000a48 <MX_RTC_Init+0x110>)
 800096c:	227f      	movs	r2, #127	@ 0x7f
 800096e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000970:	4b35      	ldr	r3, [pc, #212]	@ (8000a48 <MX_RTC_Init+0x110>)
 8000972:	22ff      	movs	r2, #255	@ 0xff
 8000974:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000976:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <MX_RTC_Init+0x110>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800097c:	4b32      	ldr	r3, [pc, #200]	@ (8000a48 <MX_RTC_Init+0x110>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000982:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <MX_RTC_Init+0x110>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000988:	482f      	ldr	r0, [pc, #188]	@ (8000a48 <MX_RTC_Init+0x110>)
 800098a:	f004 f9a7 	bl	8004cdc <HAL_RTC_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000994:	f7ff ffca 	bl	800092c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000998:	2300      	movs	r3, #0
 800099a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4823      	ldr	r0, [pc, #140]	@ (8000a48 <MX_RTC_Init+0x110>)
 80009bc:	f004 fa11 	bl	8004de2 <HAL_RTC_SetTime>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80009c6:	f7ff ffb1 	bl	800092c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009ca:	2301      	movs	r3, #1
 80009cc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80009d0:	2301      	movs	r3, #1
 80009d2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80009dc:	2300      	movs	r3, #0
 80009de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	4817      	ldr	r0, [pc, #92]	@ (8000a48 <MX_RTC_Init+0x110>)
 80009ec:	f004 fa93 	bl	8004f16 <HAL_RTC_SetDate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80009f6:	f7ff ff99 	bl	800092c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_RTC_Init+0x110>)
 8000a32:	f004 faf4 	bl	800501e <HAL_RTC_SetAlarm>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000a3c:	f7ff ff76 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3740      	adds	r7, #64	@ 0x40
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000013c 	.word	0x2000013c
 8000a4c:	40002800 	.word	0x40002800

08000a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	@ 0x38
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2230      	movs	r2, #48	@ 0x30
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fca7 	bl	80053b4 <memset>
  if(rtcHandle->Instance==RTC)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <HAL_RTC_MspInit+0x4c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d111      	bne.n	8000a94 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a70:	2320      	movs	r3, #32
 8000a72:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 ff6c 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a8a:	f7ff ff4f 	bl	800092c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a8e:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <HAL_RTC_MspInit+0x50>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a94:	bf00      	nop
 8000a96:	3738      	adds	r7, #56	@ 0x38
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40002800 	.word	0x40002800
 8000aa0:	42470e3c 	.word	0x42470e3c

08000aa4 <screen_clear>:
size_t CURSOR_Y = 0;

uint8_t DISPLAY [DISPLAY_BUFFER_SIZE] = {0};
uint8_t DISPLAY_TRANSMIT [DISPLAY_BUFFER_SIZE] = {0};

void screen_clear(void) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < DISPLAY_BUFFER_SIZE; i++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	e007      	b.n	8000ac0 <screen_clear+0x1c>
		DISPLAY[i] = 0x00;
 8000ab0:	4a09      	ldr	r2, [pc, #36]	@ (8000ad8 <screen_clear+0x34>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < DISPLAY_BUFFER_SIZE; i++) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3301      	adds	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ac6:	d3f3      	bcc.n	8000ab0 <screen_clear+0xc>
	}
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000164 	.word	0x20000164

08000adc <x_to_page_coord>:
	for (size_t i = 0 ; i < DISPLAY_BUFFER_SIZE ; i++) {
	  DISPLAY[i] = 0xFE;
	}
}

static inline size_t x_to_page_coord(size_t x) { return x; }
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <y_to_page_bit_number>:

static inline size_t y_to_page_coord(size_t y) { return y / 8; }

static inline size_t y_to_page_bit_number(size_t y) { return y % 8; }
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <command_to_oled>:

static void command_to_oled(uint8_t command) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,0x78,0x00,1,&command,1,10);
 8000b16:	230a      	movs	r3, #10
 8000b18:	9302      	str	r3, [sp, #8]
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2301      	movs	r3, #1
 8000b24:	2200      	movs	r2, #0
 8000b26:	2178      	movs	r1, #120	@ 0x78
 8000b28:	4803      	ldr	r0, [pc, #12]	@ (8000b38 <command_to_oled+0x2c>)
 8000b2a:	f001 f9cb 	bl	8001ec4 <HAL_I2C_Mem_Write>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000028 	.word	0x20000028

08000b3c <move_cursor_start>:

static void move_cursor_x(const size_t x_pos) {
	CURSOR_X = x_pos % DISPLAY_WIDTH;
}

static void move_cursor_start() {
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	CURSOR_X = 0;
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <move_cursor_start+0x1c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
	CURSOR_Y = 0;
 8000b46:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <move_cursor_start+0x20>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000015c 	.word	0x2000015c
 8000b5c:	20000160 	.word	0x20000160

08000b60 <screen_init>:

void screen_init() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000b64:	2064      	movs	r0, #100	@ 0x64
 8000b66:	f000 fa23 	bl	8000fb0 <HAL_Delay>

	command_to_oled(0xAE);
 8000b6a:	20ae      	movs	r0, #174	@ 0xae
 8000b6c:	f7ff ffce 	bl	8000b0c <command_to_oled>
	command_to_oled(0x20);
 8000b70:	2020      	movs	r0, #32
 8000b72:	f7ff ffcb 	bl	8000b0c <command_to_oled>
	command_to_oled(0x10);
 8000b76:	2010      	movs	r0, #16
 8000b78:	f7ff ffc8 	bl	8000b0c <command_to_oled>
	command_to_oled(0xB0);
 8000b7c:	20b0      	movs	r0, #176	@ 0xb0
 8000b7e:	f7ff ffc5 	bl	8000b0c <command_to_oled>
	command_to_oled(0xC8);
 8000b82:	20c8      	movs	r0, #200	@ 0xc8
 8000b84:	f7ff ffc2 	bl	8000b0c <command_to_oled>
	command_to_oled(0x00);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ffbf 	bl	8000b0c <command_to_oled>
	command_to_oled(0x10);
 8000b8e:	2010      	movs	r0, #16
 8000b90:	f7ff ffbc 	bl	8000b0c <command_to_oled>
	command_to_oled(0x40);
 8000b94:	2040      	movs	r0, #64	@ 0x40
 8000b96:	f7ff ffb9 	bl	8000b0c <command_to_oled>
	command_to_oled(0x81);
 8000b9a:	2081      	movs	r0, #129	@ 0x81
 8000b9c:	f7ff ffb6 	bl	8000b0c <command_to_oled>
	command_to_oled(0xFF);
 8000ba0:	20ff      	movs	r0, #255	@ 0xff
 8000ba2:	f7ff ffb3 	bl	8000b0c <command_to_oled>
	command_to_oled(0xA1);
 8000ba6:	20a1      	movs	r0, #161	@ 0xa1
 8000ba8:	f7ff ffb0 	bl	8000b0c <command_to_oled>
	command_to_oled(0xA6);
 8000bac:	20a6      	movs	r0, #166	@ 0xa6
 8000bae:	f7ff ffad 	bl	8000b0c <command_to_oled>
	command_to_oled(0xA8);
 8000bb2:	20a8      	movs	r0, #168	@ 0xa8
 8000bb4:	f7ff ffaa 	bl	8000b0c <command_to_oled>
	command_to_oled(0x3F);
 8000bb8:	203f      	movs	r0, #63	@ 0x3f
 8000bba:	f7ff ffa7 	bl	8000b0c <command_to_oled>
	command_to_oled(0xA4);
 8000bbe:	20a4      	movs	r0, #164	@ 0xa4
 8000bc0:	f7ff ffa4 	bl	8000b0c <command_to_oled>
	command_to_oled(0xD3);
 8000bc4:	20d3      	movs	r0, #211	@ 0xd3
 8000bc6:	f7ff ffa1 	bl	8000b0c <command_to_oled>
	command_to_oled(0x00);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ff9e 	bl	8000b0c <command_to_oled>
	command_to_oled(0xD5);
 8000bd0:	20d5      	movs	r0, #213	@ 0xd5
 8000bd2:	f7ff ff9b 	bl	8000b0c <command_to_oled>
	command_to_oled(0xF0);
 8000bd6:	20f0      	movs	r0, #240	@ 0xf0
 8000bd8:	f7ff ff98 	bl	8000b0c <command_to_oled>
	command_to_oled(0xD9);
 8000bdc:	20d9      	movs	r0, #217	@ 0xd9
 8000bde:	f7ff ff95 	bl	8000b0c <command_to_oled>
	command_to_oled(0x22);
 8000be2:	2022      	movs	r0, #34	@ 0x22
 8000be4:	f7ff ff92 	bl	8000b0c <command_to_oled>
	command_to_oled(0xDA);
 8000be8:	20da      	movs	r0, #218	@ 0xda
 8000bea:	f7ff ff8f 	bl	8000b0c <command_to_oled>
	command_to_oled(0x12);
 8000bee:	2012      	movs	r0, #18
 8000bf0:	f7ff ff8c 	bl	8000b0c <command_to_oled>
	command_to_oled(0xDB);
 8000bf4:	20db      	movs	r0, #219	@ 0xdb
 8000bf6:	f7ff ff89 	bl	8000b0c <command_to_oled>
	command_to_oled(0x20);
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	f7ff ff86 	bl	8000b0c <command_to_oled>
	command_to_oled(0x8D);
 8000c00:	208d      	movs	r0, #141	@ 0x8d
 8000c02:	f7ff ff83 	bl	8000b0c <command_to_oled>
	command_to_oled(0x14);
 8000c06:	2014      	movs	r0, #20
 8000c08:	f7ff ff80 	bl	8000b0c <command_to_oled>
	command_to_oled(0xAF);
 8000c0c:	20af      	movs	r0, #175	@ 0xaf
 8000c0e:	f7ff ff7d 	bl	8000b0c <command_to_oled>

	screen_clear();
 8000c12:	f7ff ff47 	bl	8000aa4 <screen_clear>

	screen_update();
 8000c16:	f000 f879 	bl	8000d0c <screen_update>

	move_cursor_start();
 8000c1a:	f7ff ff8f 	bl	8000b3c <move_cursor_start>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <screen_draw_pixel>:

static void screen_draw_pixel(size_t x, size_t y, bool pixel_state) {
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	71fb      	strb	r3, [r7, #7]
	if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c36:	d81a      	bhi.n	8000c6e <screen_draw_pixel+0x4a>
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c3c:	d817      	bhi.n	8000c6e <screen_draw_pixel+0x4a>
		return;
	}

	x = x_to_page_coord(x);
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f7ff ff4c 	bl	8000adc <x_to_page_coord>
 8000c44:	60f8      	str	r0, [r7, #12]
	y = x_to_page_coord(y);
 8000c46:	68b8      	ldr	r0, [r7, #8]
 8000c48:	f7ff ff48 	bl	8000adc <x_to_page_coord>
 8000c4c:	60b8      	str	r0, [r7, #8]

	DISPLAY[x + y * DISPLAY_WIDTH] = (pixel_state ? 1 : 0) << y_to_page_bit_number(y);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	461c      	mov	r4, r3
 8000c52:	68b8      	ldr	r0, [r7, #8]
 8000c54:	f7ff ff4d 	bl	8000af2 <y_to_page_bit_number>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	fa04 f103 	lsl.w	r1, r4, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	01da      	lsls	r2, r3, #7
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4413      	add	r3, r2
 8000c66:	b2c9      	uxtb	r1, r1
 8000c68:	4a03      	ldr	r2, [pc, #12]	@ (8000c78 <screen_draw_pixel+0x54>)
 8000c6a:	54d1      	strb	r1, [r2, r3]
 8000c6c:	e000      	b.n	8000c70 <screen_draw_pixel+0x4c>
		return;
 8000c6e:	bf00      	nop
}
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000164 	.word	0x20000164

08000c7c <screen_write_char>:

static void screen_write_char(char c) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	for (size_t i = 0; i < FONT_HEIDHT; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e030      	b.n	8000cee <screen_write_char+0x72>
		for (size_t j = 0; j < FONT_WIDTH; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	e027      	b.n	8000ce2 <screen_write_char+0x66>
			size_t write_bit_x = CURSOR_X + j;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <screen_write_char+0x84>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4413      	add	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
			size_t write_bit_y = CURSOR_Y + i;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <screen_write_char+0x88>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60bb      	str	r3, [r7, #8]
			screen_draw_pixel(write_bit_x, write_bit_y, (1 << j) & FONT[(c - FONT_PADDING) * FONT_HEIDHT + i * sizeof(uint16_t)]);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	79fa      	ldrb	r2, [r7, #7]
 8000cb0:	3a20      	subs	r2, #32
 8000cb2:	211a      	movs	r1, #26
 8000cb4:	fb01 f202 	mul.w	r2, r1, r2
 8000cb8:	4611      	mov	r1, r2
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	0052      	lsls	r2, r2, #1
 8000cbe:	440a      	add	r2, r1
 8000cc0:	4911      	ldr	r1, [pc, #68]	@ (8000d08 <screen_write_char+0x8c>)
 8000cc2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff ffa4 	bl	8000c24 <screen_draw_pixel>
		for (size_t j = 0; j < FONT_WIDTH; i++) {
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d9d4      	bls.n	8000c92 <screen_write_char+0x16>
	for (size_t i = 0; i < FONT_HEIDHT; i++) {
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	d9cb      	bls.n	8000c8c <screen_write_char+0x10>
		}
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000015c 	.word	0x2000015c
 8000d04:	20000160 	.word	0x20000160
 8000d08:	08005424 	.word	0x08005424

08000d0c <screen_update>:
	time_to_string(time, time_repr);

	screen_write_string(time_repr);
}

void screen_update(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af04      	add	r7, sp, #16
	command_to_oled(0xB0);
 8000d12:	20b0      	movs	r0, #176	@ 0xb0
 8000d14:	f7ff fefa 	bl	8000b0c <command_to_oled>
	command_to_oled(0x00);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fef7 	bl	8000b0c <command_to_oled>
	command_to_oled(0x10);
 8000d1e:	2010      	movs	r0, #16
 8000d20:	f7ff fef4 	bl	8000b0c <command_to_oled>

//	screen_draw_pixel(100, 50, true);
	screen_write_char('H');
 8000d24:	2048      	movs	r0, #72	@ 0x48
 8000d26:	f7ff ffa9 	bl	8000c7c <screen_write_char>

	HAL_I2C_Mem_Write(&hi2c1,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&DISPLAY,DISPLAY_BUFFER_SIZE,100);
 8000d2a:	2364      	movs	r3, #100	@ 0x64
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <screen_update+0x40>)
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	2240      	movs	r2, #64	@ 0x40
 8000d3c:	2178      	movs	r1, #120	@ 0x78
 8000d3e:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <screen_update+0x44>)
 8000d40:	f001 f8c0 	bl	8001ec4 <HAL_I2C_Mem_Write>
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000164 	.word	0x20000164
 8000d50:	20000028 	.word	0x20000028

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <NMI_Handler+0x4>

08000dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MemManage_Handler+0x4>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 f8b9 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <DMA1_Stream0_IRQHandler+0x10>)
 8000e0a:	f000 fad7 	bl	80013bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000dc 	.word	0x200000dc

08000e18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <DMA1_Stream6_IRQHandler+0x10>)
 8000e1e:	f000 facd 	bl	80013bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000007c 	.word	0x2000007c

08000e2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <I2C1_EV_IRQHandler+0x10>)
 8000e32:	f001 f941 	bl	80020b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000028 	.word	0x20000028

08000e40 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <I2C1_ER_IRQHandler+0x10>)
 8000e46:	f001 fa8a 	bl	800235e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000028 	.word	0x20000028

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7c:	f7ff ffea 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	@ (8000eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f004 fa8d 	bl	80053c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fcaf 	bl	800080c <main>
  bx  lr    
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ebc:	080067a0 	.word	0x080067a0
  ldr r2, =_sbss
 8000ec0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ec4:	20000568 	.word	0x20000568

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <HAL_Init+0x40>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_Init+0x40>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <HAL_Init+0x40>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f94f 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	200f      	movs	r0, #15
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff ff28 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f967 	bl	8001202 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f4c:	f000 f92f 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000564 	.word	0x20000564

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000564 	.word	0x20000564

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff ffee 	bl	8000f98 <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffde 	bl	8000f98 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	@ (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4907      	ldr	r1, [pc, #28]	@ (8001094 <__NVIC_EnableIRQ+0x38>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff29 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff3e 	bl	8001040 <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff31 	bl	800105c <__NVIC_EnableIRQ>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffa2 	bl	8001154 <SysTick_Config>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff feb6 	bl	8000f98 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e099      	b.n	800136c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0201 	bic.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001258:	e00f      	b.n	800127a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800125a:	f7ff fe9d 	bl	8000f98 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b05      	cmp	r3, #5
 8001266:	d908      	bls.n	800127a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2220      	movs	r2, #32
 800126c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2203      	movs	r2, #3
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e078      	b.n	800136c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e8      	bne.n	800125a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	4b38      	ldr	r3, [pc, #224]	@ (8001374 <HAL_DMA_Init+0x158>)
 8001294:	4013      	ands	r3, r2
 8001296:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d107      	bne.n	80012e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	4313      	orrs	r3, r2
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f023 0307 	bic.w	r3, r3, #7
 80012fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	4313      	orrs	r3, r2
 8001304:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130a:	2b04      	cmp	r3, #4
 800130c:	d117      	bne.n	800133e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4313      	orrs	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00e      	beq.n	800133e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fa19 	bl	8001758 <DMA_CheckFifoParam>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2240      	movs	r2, #64	@ 0x40
 8001330:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800133a:	2301      	movs	r3, #1
 800133c:	e016      	b.n	800136c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f9d0 	bl	80016ec <DMA_CalcBaseAndBitshift>
 800134c:	4603      	mov	r3, r0
 800134e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001354:	223f      	movs	r2, #63	@ 0x3f
 8001356:	409a      	lsls	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	f010803f 	.word	0xf010803f

08001378 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d004      	beq.n	8001396 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2280      	movs	r2, #128	@ 0x80
 8001390:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00c      	b.n	80013b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2205      	movs	r2, #5
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001604 <HAL_DMA_IRQHandler+0x248>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a8e      	ldr	r2, [pc, #568]	@ (8001608 <HAL_DMA_IRQHandler+0x24c>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0a9b      	lsrs	r3, r3, #10
 80013d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e6:	2208      	movs	r2, #8
 80013e8:	409a      	lsls	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d01a      	beq.n	8001428 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0204 	bic.w	r2, r2, #4
 800140e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001414:	2208      	movs	r2, #8
 8001416:	409a      	lsls	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142c:	2201      	movs	r2, #1
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d012      	beq.n	800145e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00b      	beq.n	800145e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144a:	2201      	movs	r2, #1
 800144c:	409a      	lsls	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001462:	2204      	movs	r2, #4
 8001464:	409a      	lsls	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d012      	beq.n	8001494 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001480:	2204      	movs	r2, #4
 8001482:	409a      	lsls	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800148c:	f043 0204 	orr.w	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001498:	2210      	movs	r2, #16
 800149a:	409a      	lsls	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d043      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03c      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b6:	2210      	movs	r2, #16
 80014b8:	409a      	lsls	r2, r3
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d018      	beq.n	80014fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d024      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	4798      	blx	r3
 80014ea:	e01f      	b.n	800152c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01b      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
 80014fc:	e016      	b.n	800152c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0208 	bic.w	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001530:	2220      	movs	r2, #32
 8001532:	409a      	lsls	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 808f 	beq.w	800165c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8087 	beq.w	800165c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001552:	2220      	movs	r2, #32
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b05      	cmp	r3, #5
 8001564:	d136      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0216 	bic.w	r2, r2, #22
 8001574:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001584:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_DMA_IRQHandler+0x1da>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0208 	bic.w	r2, r2, #8
 80015a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015aa:	223f      	movs	r2, #63	@ 0x3f
 80015ac:	409a      	lsls	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d07e      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
        }
        return;
 80015d2:	e079      	b.n	80016c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01d      	beq.n	800161e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d031      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	4798      	blx	r3
 8001600:	e02c      	b.n	800165c <HAL_DMA_IRQHandler+0x2a0>
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
 800161c:	e01e      	b.n	800165c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10f      	bne.n	800164c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0210 	bic.w	r2, r2, #16
 800163a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001660:	2b00      	cmp	r3, #0
 8001662:	d032      	beq.n	80016ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d022      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2205      	movs	r2, #5
 8001674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3301      	adds	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	d307      	bcc.n	80016a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f2      	bne.n	8001688 <HAL_DMA_IRQHandler+0x2cc>
 80016a2:	e000      	b.n	80016a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4798      	blx	r3
 80016c6:	e000      	b.n	80016ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80016c8:	bf00      	nop
    }
  }
}
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016de:	b2db      	uxtb	r3, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3b10      	subs	r3, #16
 80016fc:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <DMA_CalcBaseAndBitshift+0x64>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001706:	4a13      	ldr	r2, [pc, #76]	@ (8001754 <DMA_CalcBaseAndBitshift+0x68>)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d909      	bls.n	800172e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001722:	f023 0303 	bic.w	r3, r3, #3
 8001726:	1d1a      	adds	r2, r3, #4
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	659a      	str	r2, [r3, #88]	@ 0x58
 800172c:	e007      	b.n	800173e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	aaaaaaab 	.word	0xaaaaaaab
 8001754:	08006788 	.word	0x08006788

08001758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11f      	bne.n	80017b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d856      	bhi.n	8001826 <DMA_CheckFifoParam+0xce>
 8001778:	a201      	add	r2, pc, #4	@ (adr r2, 8001780 <DMA_CheckFifoParam+0x28>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001791 	.word	0x08001791
 8001784:	080017a3 	.word	0x080017a3
 8001788:	08001791 	.word	0x08001791
 800178c:	08001827 	.word	0x08001827
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001794:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d046      	beq.n	800182a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017a0:	e043      	b.n	800182a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017aa:	d140      	bne.n	800182e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b0:	e03d      	b.n	800182e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017ba:	d121      	bne.n	8001800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d837      	bhi.n	8001832 <DMA_CheckFifoParam+0xda>
 80017c2:	a201      	add	r2, pc, #4	@ (adr r2, 80017c8 <DMA_CheckFifoParam+0x70>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017df 	.word	0x080017df
 80017d0:	080017d9 	.word	0x080017d9
 80017d4:	080017f1 	.word	0x080017f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
      break;
 80017dc:	e030      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d025      	beq.n	8001836 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017ee:	e022      	b.n	8001836 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017f8:	d11f      	bne.n	800183a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017fe:	e01c      	b.n	800183a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d903      	bls.n	800180e <DMA_CheckFifoParam+0xb6>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d003      	beq.n	8001814 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800180c:	e018      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
      break;
 8001812:	e015      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00e      	beq.n	800183e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
      break;
 8001824:	e00b      	b.n	800183e <DMA_CheckFifoParam+0xe6>
      break;
 8001826:	bf00      	nop
 8001828:	e00a      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
      break;
 800182a:	bf00      	nop
 800182c:	e008      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
      break;
 800182e:	bf00      	nop
 8001830:	e006      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
      break;
 8001832:	bf00      	nop
 8001834:	e004      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
      break;
 8001836:	bf00      	nop
 8001838:	e002      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
      break;   
 800183a:	bf00      	nop
 800183c:	e000      	b.n	8001840 <DMA_CheckFifoParam+0xe8>
      break;
 800183e:	bf00      	nop
    }
  } 
  
  return status; 
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	@ 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	e177      	b.n	8001b5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	f040 8166 	bne.w	8001b56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d005      	beq.n	80018a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d130      	bne.n	8001904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 0201 	and.w	r2, r3, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b03      	cmp	r3, #3
 800190e:	d017      	beq.n	8001940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d123      	bne.n	8001994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3208      	adds	r2, #8
 8001954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3208      	adds	r2, #8
 800198e:	69b9      	ldr	r1, [r7, #24]
 8001990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80c0 	beq.w	8001b56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b66      	ldr	r3, [pc, #408]	@ (8001b74 <HAL_GPIO_Init+0x324>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	4a65      	ldr	r2, [pc, #404]	@ (8001b74 <HAL_GPIO_Init+0x324>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e6:	4b63      	ldr	r3, [pc, #396]	@ (8001b74 <HAL_GPIO_Init+0x324>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f2:	4a61      	ldr	r2, [pc, #388]	@ (8001b78 <HAL_GPIO_Init+0x328>)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a58      	ldr	r2, [pc, #352]	@ (8001b7c <HAL_GPIO_Init+0x32c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d037      	beq.n	8001a8e <HAL_GPIO_Init+0x23e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a57      	ldr	r2, [pc, #348]	@ (8001b80 <HAL_GPIO_Init+0x330>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d031      	beq.n	8001a8a <HAL_GPIO_Init+0x23a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a56      	ldr	r2, [pc, #344]	@ (8001b84 <HAL_GPIO_Init+0x334>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <HAL_GPIO_Init+0x236>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a55      	ldr	r2, [pc, #340]	@ (8001b88 <HAL_GPIO_Init+0x338>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x232>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a54      	ldr	r2, [pc, #336]	@ (8001b8c <HAL_GPIO_Init+0x33c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x22e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a53      	ldr	r2, [pc, #332]	@ (8001b90 <HAL_GPIO_Init+0x340>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x22a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <HAL_GPIO_Init+0x344>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x226>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a51      	ldr	r2, [pc, #324]	@ (8001b98 <HAL_GPIO_Init+0x348>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x222>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a50      	ldr	r2, [pc, #320]	@ (8001b9c <HAL_GPIO_Init+0x34c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x21e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba0 <HAL_GPIO_Init+0x350>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x21a>
 8001a66:	2309      	movs	r3, #9
 8001a68:	e012      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	e010      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a6e:	2308      	movs	r3, #8
 8001a70:	e00e      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e00c      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e00a      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	@ (8001b78 <HAL_GPIO_Init+0x328>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a34      	ldr	r2, [pc, #208]	@ (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b32      	ldr	r3, [pc, #200]	@ (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a29      	ldr	r2, [pc, #164]	@ (8001ba4 <HAL_GPIO_Init+0x354>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f ae84 	bls.w	800186c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	@ 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40022400 	.word	0x40022400
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb8:	787b      	ldrb	r3, [r7, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc4:	e003      	b.n	8001bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	041a      	lsls	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	619a      	str	r2, [r3, #24]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bec:	887a      	ldrh	r2, [r7, #2]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e12b      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fd2a 	bl	8000690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	@ 0x24
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c74:	f002 fe5e 	bl	8004934 <HAL_RCC_GetPCLK1Freq>
 8001c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a81      	ldr	r2, [pc, #516]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d807      	bhi.n	8001c94 <HAL_I2C_Init+0x84>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4a80      	ldr	r2, [pc, #512]	@ (8001e88 <HAL_I2C_Init+0x278>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	bf94      	ite	ls
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	2300      	movhi	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e006      	b.n	8001ca2 <HAL_I2C_Init+0x92>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a7d      	ldr	r2, [pc, #500]	@ (8001e8c <HAL_I2C_Init+0x27c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	bf94      	ite	ls
 8001c9c:	2301      	movls	r3, #1
 8001c9e:	2300      	movhi	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0e7      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a78      	ldr	r2, [pc, #480]	@ (8001e90 <HAL_I2C_Init+0x280>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0c9b      	lsrs	r3, r3, #18
 8001cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_I2C_Init+0xd4>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	e009      	b.n	8001cf8 <HAL_I2C_Init+0xe8>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a69      	ldr	r2, [pc, #420]	@ (8001e94 <HAL_I2C_Init+0x284>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	495c      	ldr	r1, [pc, #368]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001d14:	428b      	cmp	r3, r1
 8001d16:	d819      	bhi.n	8001d4c <HAL_I2C_Init+0x13c>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e59      	subs	r1, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d26:	1c59      	adds	r1, r3, #1
 8001d28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_I2C_Init+0x138>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1e59      	subs	r1, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	e051      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e04f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d111      	bne.n	8001d78 <HAL_I2C_Init+0x168>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e012      	b.n	8001d9e <HAL_I2C_Init+0x18e>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Init+0x196>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e022      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <HAL_I2C_Init+0x1bc>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e58      	subs	r0, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	440b      	add	r3, r1
 8001dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dca:	e00f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	0099      	lsls	r1, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6809      	ldr	r1, [r1, #0]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6911      	ldr	r1, [r2, #16]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	000186a0 	.word	0x000186a0
 8001e88:	001e847f 	.word	0x001e847f
 8001e8c:	003d08ff 	.word	0x003d08ff
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	10624dd3 	.word	0x10624dd3

08001e98 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	2b80      	cmp	r3, #128	@ 0x80
 8001eac:	d103      	bne.n	8001eb6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ede:	f7ff f85b 	bl	8000f98 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f040 80d9 	bne.w	80020a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2319      	movs	r3, #25
 8001ef8:	2201      	movs	r2, #1
 8001efa:	496d      	ldr	r1, [pc, #436]	@ (80020b0 <HAL_I2C_Mem_Write+0x1ec>)
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f001 fdf7 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e0cc      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_I2C_Mem_Write+0x56>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0c5      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d007      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2221      	movs	r2, #33	@ 0x21
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2240      	movs	r2, #64	@ 0x40
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	@ (80020b4 <HAL_I2C_Mem_Write+0x1f0>)
 8001f80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f82:	88f8      	ldrh	r0, [r7, #6]
 8001f84:	893a      	ldrh	r2, [r7, #8]
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4603      	mov	r3, r0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f001 fc6e 	bl	8003874 <I2C_RequestMemoryWrite>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d052      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e081      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f001 febc 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d107      	bne.n	8001fca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06b      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d11b      	bne.n	8002044 <HAL_I2C_Mem_Write+0x180>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d017      	beq.n	8002044 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1aa      	bne.n	8001fa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f001 feaf 	bl	8003db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	2b04      	cmp	r3, #4
 8002062:	d107      	bne.n	8002074 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002072:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e016      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e000      	b.n	80020a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	00100002 	.word	0x00100002
 80020b4:	ffff0000 	.word	0xffff0000

080020b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d003      	beq.n	80020f0 <HAL_I2C_EV_IRQHandler+0x38>
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b40      	cmp	r3, #64	@ 0x40
 80020ec:	f040 80b1 	bne.w	8002252 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10d      	bne.n	8002126 <HAL_I2C_EV_IRQHandler+0x6e>
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002110:	d003      	beq.n	800211a <HAL_I2C_EV_IRQHandler+0x62>
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002118:	d101      	bne.n	800211e <HAL_I2C_EV_IRQHandler+0x66>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_I2C_EV_IRQHandler+0x68>
 800211e:	2300      	movs	r3, #0
 8002120:	2b01      	cmp	r3, #1
 8002122:	f000 8114 	beq.w	800234e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_I2C_EV_IRQHandler+0x90>
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f001 fee3 	bl	8003f06 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fd7a 	bl	8002c3a <I2C_Master_SB>
 8002146:	e083      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0xac>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fdf2 	bl	8002d46 <I2C_Master_ADD10>
 8002162:	e075      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_I2C_EV_IRQHandler+0xc8>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fe0e 	bl	8002d9a <I2C_Master_ADDR>
 800217e:	e067      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d036      	beq.n	80021f8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002198:	f000 80db 	beq.w	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x10a>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x10a>
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f9d6 	bl	800256c <I2C_MasterTransmit_TXE>
 80021c0:	e046      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80c2 	beq.w	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80bc 	beq.w	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80021da:	7bbb      	ldrb	r3, [r7, #14]
 80021dc:	2b21      	cmp	r3, #33	@ 0x21
 80021de:	d103      	bne.n	80021e8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fa5f 	bl	80026a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021e6:	e0b4      	b.n	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b40      	cmp	r3, #64	@ 0x40
 80021ec:	f040 80b1 	bne.w	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 facd 	bl	8002790 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021f6:	e0ac      	b.n	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002206:	f000 80a4 	beq.w	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <HAL_I2C_EV_IRQHandler+0x178>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_I2C_EV_IRQHandler+0x178>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fb49 	bl	80028c0 <I2C_MasterReceive_RXNE>
 800222e:	e00f      	b.n	8002250 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 808b 	beq.w	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8085 	beq.w	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fc01 	bl	8002a50 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800224e:	e080      	b.n	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
 8002250:	e07f      	b.n	8002352 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e007      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d011      	beq.n	80022a2 <HAL_I2C_EV_IRQHandler+0x1ea>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002298:	69b9      	ldr	r1, [r7, #24]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 ffcc 	bl	8003238 <I2C_Slave_ADDR>
 80022a0:	e05a      	b.n	8002358 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_I2C_EV_IRQHandler+0x206>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f001 f806 	bl	80032c8 <I2C_Slave_STOPF>
 80022bc:	e04c      	b.n	8002358 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022be:	7bbb      	ldrb	r3, [r7, #14]
 80022c0:	2b21      	cmp	r3, #33	@ 0x21
 80022c2:	d002      	beq.n	80022ca <HAL_I2C_EV_IRQHandler+0x212>
 80022c4:	7bbb      	ldrb	r3, [r7, #14]
 80022c6:	2b29      	cmp	r3, #41	@ 0x29
 80022c8:	d120      	bne.n	800230c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_I2C_EV_IRQHandler+0x238>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_I2C_EV_IRQHandler+0x238>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d103      	bne.n	80022f0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fee7 	bl	80030bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022ee:	e032      	b.n	8002356 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d02d      	beq.n	8002356 <HAL_I2C_EV_IRQHandler+0x29e>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002300:	2b00      	cmp	r3, #0
 8002302:	d028      	beq.n	8002356 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 ff16 	bl	8003136 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800230a:	e024      	b.n	8002356 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0x27a>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_I2C_EV_IRQHandler+0x27a>
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 ff24 	bl	8003178 <I2C_SlaveReceive_RXNE>
 8002330:	e012      	b.n	8002358 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <HAL_I2C_EV_IRQHandler+0x2a0>
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 ff54 	bl	80031f4 <I2C_SlaveReceive_BTF>
 800234c:	e004      	b.n	8002358 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800234e:	bf00      	nop
 8002350:	e002      	b.n	8002358 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002352:	bf00      	nop
 8002354:	e000      	b.n	8002358 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002356:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b08a      	sub	sp, #40	@ 0x28
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002380:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00d      	beq.n	80023a8 <HAL_I2C_ER_IRQHandler+0x4a>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80023a6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00d      	beq.n	80023ce <HAL_I2C_ER_IRQHandler+0x70>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80023cc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d03e      	beq.n	8002456 <HAL_I2C_ER_IRQHandler+0xf8>
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d039      	beq.n	8002456 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80023e2:	7efb      	ldrb	r3, [r7, #27]
 80023e4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80023fc:	7ebb      	ldrb	r3, [r7, #26]
 80023fe:	2b20      	cmp	r3, #32
 8002400:	d112      	bne.n	8002428 <HAL_I2C_ER_IRQHandler+0xca>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10f      	bne.n	8002428 <HAL_I2C_ER_IRQHandler+0xca>
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	2b21      	cmp	r3, #33	@ 0x21
 800240c:	d008      	beq.n	8002420 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b29      	cmp	r3, #41	@ 0x29
 8002412:	d005      	beq.n	8002420 <HAL_I2C_ER_IRQHandler+0xc2>
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b28      	cmp	r3, #40	@ 0x28
 8002418:	d106      	bne.n	8002428 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b21      	cmp	r3, #33	@ 0x21
 800241e:	d103      	bne.n	8002428 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f001 f881 	bl	8003528 <I2C_Slave_AF>
 8002426:	e016      	b.n	8002456 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002430:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800243a:	7efb      	ldrb	r3, [r7, #27]
 800243c:	2b10      	cmp	r3, #16
 800243e:	d002      	beq.n	8002446 <HAL_I2C_ER_IRQHandler+0xe8>
 8002440:	7efb      	ldrb	r3, [r7, #27]
 8002442:	2b40      	cmp	r3, #64	@ 0x40
 8002444:	d107      	bne.n	8002456 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002454:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <HAL_I2C_ER_IRQHandler+0x11e>
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800247a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f001 f8be 	bl	8003610 <I2C_ITError>
  }
}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
 80024f8:	4613      	mov	r3, r2
 80024fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002582:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002588:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	d150      	bne.n	8002634 <I2C_MasterTransmit_TXE+0xc8>
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b21      	cmp	r3, #33	@ 0x21
 8002596:	d14d      	bne.n	8002634 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b08      	cmp	r3, #8
 800259c:	d01d      	beq.n	80025da <I2C_MasterTransmit_TXE+0x6e>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d01a      	beq.n	80025da <I2C_MasterTransmit_TXE+0x6e>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025aa:	d016      	beq.n	80025da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2211      	movs	r2, #17
 80025c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff62 	bl	800249c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025d8:	e060      	b.n	800269c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b40      	cmp	r3, #64	@ 0x40
 8002612:	d107      	bne.n	8002624 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff7d 	bl	800251c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002622:	e03b      	b.n	800269c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff35 	bl	800249c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002632:	e033      	b.n	800269c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b21      	cmp	r3, #33	@ 0x21
 8002638:	d005      	beq.n	8002646 <I2C_MasterTransmit_TXE+0xda>
 800263a:	7bbb      	ldrb	r3, [r7, #14]
 800263c:	2b40      	cmp	r3, #64	@ 0x40
 800263e:	d12d      	bne.n	800269c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b22      	cmp	r3, #34	@ 0x22
 8002644:	d12a      	bne.n	800269c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002660:	e01c      	b.n	800269c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b40      	cmp	r3, #64	@ 0x40
 800266c:	d103      	bne.n	8002676 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f88e 	bl	8002790 <I2C_MemoryTransmit_TXE_BTF>
}
 8002674:	e012      	b.n	800269c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800269a:	e7ff      	b.n	800269c <I2C_MasterTransmit_TXE+0x130>
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b21      	cmp	r3, #33	@ 0x21
 80026bc:	d164      	bne.n	8002788 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d012      	beq.n	80026ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80026ec:	e04c      	b.n	8002788 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d01d      	beq.n	8002730 <I2C_MasterTransmit_BTF+0x8c>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d01a      	beq.n	8002730 <I2C_MasterTransmit_BTF+0x8c>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002700:	d016      	beq.n	8002730 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002710:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2211      	movs	r2, #17
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff feb7 	bl	800249c <HAL_I2C_MasterTxCpltCallback>
}
 800272e:	e02b      	b.n	8002788 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800273e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800274e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b40      	cmp	r3, #64	@ 0x40
 8002768:	d107      	bne.n	800277a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fed2 	bl	800251c <HAL_I2C_MemTxCpltCallback>
}
 8002778:	e006      	b.n	8002788 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fe8a 	bl	800249c <HAL_I2C_MasterTxCpltCallback>
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11d      	bne.n	80027e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d10b      	bne.n	80027c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c0:	1c9a      	adds	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80027c6:	e077      	b.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	121b      	asrs	r3, r3, #8
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80027e2:	e069      	b.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10b      	bne.n	8002804 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002802:	e059      	b.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002808:	2b02      	cmp	r3, #2
 800280a:	d152      	bne.n	80028b2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b22      	cmp	r3, #34	@ 0x22
 8002810:	d10d      	bne.n	800282e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002820:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800282c:	e044      	b.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b21      	cmp	r3, #33	@ 0x21
 800283c:	d112      	bne.n	8002864 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002862:	e029      	b.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d124      	bne.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	2b21      	cmp	r3, #33	@ 0x21
 8002872:	d121      	bne.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002882:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002892:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fe36 	bl	800251c <HAL_I2C_MemTxCpltCallback>
}
 80028b0:	e002      	b.n	80028b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff faf0 	bl	8001e98 <I2C_Flush_DR>
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b22      	cmp	r3, #34	@ 0x22
 80028d2:	f040 80b9 	bne.w	8002a48 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d921      	bls.n	800292e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b03      	cmp	r3, #3
 8002918:	f040 8096 	bne.w	8002a48 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800292a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800292c:	e08c      	b.n	8002a48 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	2b02      	cmp	r3, #2
 8002934:	d07f      	beq.n	8002a36 <I2C_MasterReceive_RXNE+0x176>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d002      	beq.n	8002942 <I2C_MasterReceive_RXNE+0x82>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d179      	bne.n	8002a36 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f001 fa7e 	bl	8003e44 <I2C_WaitOnSTOPRequestThroughIT>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d14c      	bne.n	80029e8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800295c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800296c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b40      	cmp	r3, #64	@ 0x40
 80029a6:	d10a      	bne.n	80029be <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fdba 	bl	8002530 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029bc:	e044      	b.n	8002a48 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d002      	beq.n	80029d2 <I2C_MasterReceive_RXNE+0x112>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d103      	bne.n	80029da <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80029d8:	e002      	b.n	80029e0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2212      	movs	r2, #18
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fd65 	bl	80024b0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029e6:	e02f      	b.n	8002a48 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fd88 	bl	8002544 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a34:	e008      	b.n	8002a48 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a44:	605a      	str	r2, [r3, #4]
}
 8002a46:	e7ff      	b.n	8002a48 <I2C_MasterReceive_RXNE+0x188>
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d11b      	bne.n	8002aa0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a76:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002a9e:	e0c8      	b.n	8002c32 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d129      	bne.n	8002afe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d00a      	beq.n	8002ad6 <I2C_MasterReceive_BTF+0x86>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d007      	beq.n	8002ad6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002afc:	e099      	b.n	8002c32 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	f040 8081 	bne.w	8002c0c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d002      	beq.n	8002b16 <I2C_MasterReceive_BTF+0xc6>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d108      	bne.n	8002b28 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e019      	b.n	8002b5c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d002      	beq.n	8002b34 <I2C_MasterReceive_BTF+0xe4>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d108      	bne.n	8002b46 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e00a      	b.n	8002b5c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d007      	beq.n	8002b5c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002bb6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b40      	cmp	r3, #64	@ 0x40
 8002bca:	d10a      	bne.n	8002be2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff fca8 	bl	8002530 <HAL_I2C_MemRxCpltCallback>
}
 8002be0:	e027      	b.n	8002c32 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d002      	beq.n	8002bf6 <I2C_MasterReceive_BTF+0x1a6>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d103      	bne.n	8002bfe <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bfc:	e002      	b.n	8002c04 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2212      	movs	r2, #18
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff fc53 	bl	80024b0 <HAL_I2C_MasterRxCpltCallback>
}
 8002c0a:	e012      	b.n	8002c32 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b40      	cmp	r3, #64	@ 0x40
 8002c4c:	d117      	bne.n	8002c7e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c66:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002c68:	e067      	b.n	8002d3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]
}
 8002c7c:	e05d      	b.n	8002d3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c86:	d133      	bne.n	8002cf0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b21      	cmp	r3, #33	@ 0x21
 8002c92:	d109      	bne.n	8002ca8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ca4:	611a      	str	r2, [r3, #16]
 8002ca6:	e008      	b.n	8002cba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <I2C_Master_SB+0x92>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d108      	bne.n	8002cde <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d032      	beq.n	8002d3a <I2C_Master_SB+0x100>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d02d      	beq.n	8002d3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cec:	605a      	str	r2, [r3, #4]
}
 8002cee:	e024      	b.n	8002d3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10e      	bne.n	8002d16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	11db      	asrs	r3, r3, #7
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0306 	and.w	r3, r3, #6
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f063 030f 	orn	r3, r3, #15
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]
}
 8002d14:	e011      	b.n	8002d3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10d      	bne.n	8002d3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	11db      	asrs	r3, r3, #7
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0306 	and.w	r3, r3, #6
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f063 030e 	orn	r3, r3, #14
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	611a      	str	r2, [r3, #16]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <I2C_Master_ADD10+0x26>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <I2C_Master_ADD10+0x48>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d8c:	605a      	str	r2, [r3, #4]
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b091      	sub	sp, #68	@ 0x44
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002da8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b22      	cmp	r3, #34	@ 0x22
 8002dc2:	f040 8169 	bne.w	8003098 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <I2C_Master_ADDR+0x54>
 8002dce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002dd2:	2b40      	cmp	r3, #64	@ 0x40
 8002dd4:	d10b      	bne.n	8002dee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	e160      	b.n	80030b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11d      	bne.n	8002e32 <I2C_Master_ADDR+0x98>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002dfe:	d118      	bne.n	8002e32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e00:	2300      	movs	r3, #0
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e30:	e13e      	b.n	80030b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d113      	bne.n	8002e64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e115      	b.n	8003090 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	f040 808a 	bne.w	8002f84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e76:	d137      	bne.n	8002ee8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e96:	d113      	bne.n	8002ec0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	e0e7      	b.n	8003090 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	623b      	str	r3, [r7, #32]
 8002ed4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e0d3      	b.n	8003090 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d02e      	beq.n	8002f4c <I2C_Master_ADDR+0x1b2>
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d02b      	beq.n	8002f4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef6:	2b12      	cmp	r3, #18
 8002ef8:	d102      	bne.n	8002f00 <I2C_Master_ADDR+0x166>
 8002efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d125      	bne.n	8002f4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d00e      	beq.n	8002f24 <I2C_Master_ADDR+0x18a>
 8002f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d00b      	beq.n	8002f24 <I2C_Master_ADDR+0x18a>
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d008      	beq.n	8002f24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e007      	b.n	8002f34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	e0a1      	b.n	8003090 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e085      	b.n	8003090 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d14d      	bne.n	800302a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d016      	beq.n	8002fc2 <I2C_Master_ADDR+0x228>
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d013      	beq.n	8002fc2 <I2C_Master_ADDR+0x228>
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d010      	beq.n	8002fc2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e007      	b.n	8002fd2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fd0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fe0:	d117      	bne.n	8003012 <I2C_Master_ADDR+0x278>
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fe8:	d00b      	beq.n	8003002 <I2C_Master_ADDR+0x268>
 8002fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d008      	beq.n	8003002 <I2C_Master_ADDR+0x268>
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d005      	beq.n	8003002 <I2C_Master_ADDR+0x268>
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d002      	beq.n	8003002 <I2C_Master_ADDR+0x268>
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d107      	bne.n	8003012 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003010:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	e032      	b.n	8003090 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003038:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003048:	d117      	bne.n	800307a <I2C_Master_ADDR+0x2e0>
 800304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003050:	d00b      	beq.n	800306a <I2C_Master_ADDR+0x2d0>
 8003052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003054:	2b01      	cmp	r3, #1
 8003056:	d008      	beq.n	800306a <I2C_Master_ADDR+0x2d0>
 8003058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305a:	2b08      	cmp	r3, #8
 800305c:	d005      	beq.n	800306a <I2C_Master_ADDR+0x2d0>
 800305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003060:	2b10      	cmp	r3, #16
 8003062:	d002      	beq.n	800306a <I2C_Master_ADDR+0x2d0>
 8003064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003066:	2b20      	cmp	r3, #32
 8003068:	d107      	bne.n	800307a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003078:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003096:	e00b      	b.n	80030b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
}
 80030ae:	e7ff      	b.n	80030b0 <I2C_Master_ADDR+0x316>
 80030b0:	bf00      	nop
 80030b2:	3744      	adds	r7, #68	@ 0x44
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d02b      	beq.n	800312e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d114      	bne.n	800312e <I2C_SlaveTransmit_TXE+0x72>
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b29      	cmp	r3, #41	@ 0x29
 8003108:	d111      	bne.n	800312e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003118:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2221      	movs	r2, #33	@ 0x21
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2228      	movs	r2, #40	@ 0x28
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff f9cb 	bl	80024c4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d011      	beq.n	800316c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003186:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02c      	beq.n	80031ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d114      	bne.n	80031ec <I2C_SlaveReceive_RXNE+0x74>
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80031c6:	d111      	bne.n	80031ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2222      	movs	r2, #34	@ 0x22
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2228      	movs	r2, #40	@ 0x28
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff f976 	bl	80024d8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003252:	2b28      	cmp	r3, #40	@ 0x28
 8003254:	d125      	bne.n	80032a2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003264:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	81bb      	strh	r3, [r7, #12]
 8003284:	e002      	b.n	800328c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003294:	89ba      	ldrh	r2, [r7, #12]
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff f926 	bl	80024ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80032a0:	e00e      	b.n	80032c0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003314:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003324:	d172      	bne.n	800340c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b22      	cmp	r3, #34	@ 0x22
 800332a:	d002      	beq.n	8003332 <I2C_Slave_STOPF+0x6a>
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003330:	d135      	bne.n	800339e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003364:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe f9b0 	bl	80016d0 <HAL_DMA_GetState>
 8003370:	4603      	mov	r3, r0
 8003372:	2b01      	cmp	r3, #1
 8003374:	d049      	beq.n	800340a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337a:	4a69      	ldr	r2, [pc, #420]	@ (8003520 <I2C_Slave_STOPF+0x258>)
 800337c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fff8 	bl	8001378 <HAL_DMA_Abort_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d03d      	beq.n	800340a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003398:	4610      	mov	r0, r2
 800339a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800339c:	e035      	b.n	800340a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	f043 0204 	orr.w	r2, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe f97a 	bl	80016d0 <HAL_DMA_GetState>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d014      	beq.n	800340c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003520 <I2C_Slave_STOPF+0x258>)
 80033e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd ffc2 	bl	8001378 <HAL_DMA_Abort_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003404:	4610      	mov	r0, r2
 8003406:	4798      	blx	r3
 8003408:	e000      	b.n	800340c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800340a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03e      	beq.n	8003494 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d112      	bne.n	800344a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d112      	bne.n	800347e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f8b7 	bl	8003610 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80034a2:	e039      	b.n	8003518 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80034a8:	d109      	bne.n	80034be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2228      	movs	r2, #40	@ 0x28
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff f80d 	bl	80024d8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b28      	cmp	r3, #40	@ 0x28
 80034c8:	d111      	bne.n	80034ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a15      	ldr	r2, [pc, #84]	@ (8003524 <I2C_Slave_STOPF+0x25c>)
 80034ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff f80e 	bl	8002508 <HAL_I2C_ListenCpltCallback>
}
 80034ec:	e014      	b.n	8003518 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	2b22      	cmp	r3, #34	@ 0x22
 80034f4:	d002      	beq.n	80034fc <I2C_Slave_STOPF+0x234>
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	2b22      	cmp	r3, #34	@ 0x22
 80034fa:	d10d      	bne.n	8003518 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe ffe0 	bl	80024d8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	080039a1 	.word	0x080039a1
 8003524:	ffff0000 	.word	0xffff0000

08003528 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d002      	beq.n	800354a <I2C_Slave_AF+0x22>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d129      	bne.n	800359e <I2C_Slave_AF+0x76>
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b28      	cmp	r3, #40	@ 0x28
 800354e:	d126      	bne.n	800359e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a2e      	ldr	r2, [pc, #184]	@ (800360c <I2C_Slave_AF+0xe4>)
 8003554:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003564:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800356e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800357e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe ffb6 	bl	8002508 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800359c:	e031      	b.n	8003602 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b21      	cmp	r3, #33	@ 0x21
 80035a2:	d129      	bne.n	80035f8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a19      	ldr	r2, [pc, #100]	@ (800360c <I2C_Slave_AF+0xe4>)
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2221      	movs	r2, #33	@ 0x21
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe fc54 	bl	8001e98 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fe ff67 	bl	80024c4 <HAL_I2C_SlaveTxCpltCallback>
}
 80035f6:	e004      	b.n	8003602 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003600:	615a      	str	r2, [r3, #20]
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	ffff0000 	.word	0xffff0000

08003610 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800361e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003626:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	2b10      	cmp	r3, #16
 800362c:	d002      	beq.n	8003634 <I2C_ITError+0x24>
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	2b40      	cmp	r3, #64	@ 0x40
 8003632:	d10a      	bne.n	800364a <I2C_ITError+0x3a>
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b22      	cmp	r3, #34	@ 0x22
 8003638:	d107      	bne.n	800364a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003648:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003650:	2b28      	cmp	r3, #40	@ 0x28
 8003652:	d107      	bne.n	8003664 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2228      	movs	r2, #40	@ 0x28
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003662:	e015      	b.n	8003690 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800366e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003672:	d00a      	beq.n	800368a <I2C_ITError+0x7a>
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b60      	cmp	r3, #96	@ 0x60
 8003678:	d007      	beq.n	800368a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800369a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800369e:	d162      	bne.n	8003766 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d020      	beq.n	8003700 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c2:	4a6a      	ldr	r2, [pc, #424]	@ (800386c <I2C_ITError+0x25c>)
 80036c4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fe54 	bl	8001378 <HAL_DMA_Abort_IT>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8089 	beq.w	80037ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036fa:	4610      	mov	r0, r2
 80036fc:	4798      	blx	r3
 80036fe:	e074      	b.n	80037ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	4a59      	ldr	r2, [pc, #356]	@ (800386c <I2C_ITError+0x25c>)
 8003706:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fe33 	bl	8001378 <HAL_DMA_Abort_IT>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d068      	beq.n	80037ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003722:	2b40      	cmp	r3, #64	@ 0x40
 8003724:	d10b      	bne.n	800373e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003760:	4610      	mov	r0, r2
 8003762:	4798      	blx	r3
 8003764:	e041      	b.n	80037ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b60      	cmp	r3, #96	@ 0x60
 8003770:	d125      	bne.n	80037be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378a:	2b40      	cmp	r3, #64	@ 0x40
 800378c:	d10b      	bne.n	80037a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fe fece 	bl	8002558 <HAL_I2C_AbortCpltCallback>
 80037bc:	e015      	b.n	80037ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c8:	2b40      	cmp	r3, #64	@ 0x40
 80037ca:	d10b      	bne.n	80037e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fe fead 	bl	8002544 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800380a:	2b00      	cmp	r3, #0
 800380c:	d104      	bne.n	8003818 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003826:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d113      	bne.n	8003864 <I2C_ITError+0x254>
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	2b28      	cmp	r3, #40	@ 0x28
 8003840:	d110      	bne.n	8003864 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <I2C_ITError+0x260>)
 8003846:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe fe52 	bl	8002508 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	080039a1 	.word	0x080039a1
 8003870:	ffff0000 	.word	0xffff0000

08003874 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	461a      	mov	r2, r3
 8003882:	4603      	mov	r3, r0
 8003884:	817b      	strh	r3, [r7, #10]
 8003886:	460b      	mov	r3, r1
 8003888:	813b      	strh	r3, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800389c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f920 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c4:	d103      	bne.n	80038ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e05f      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	492d      	ldr	r1, [pc, #180]	@ (800399c <I2C_RequestMemoryWrite+0x128>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f97b 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e04c      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fa06 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2b04      	cmp	r3, #4
 8003924:	d107      	bne.n	8003936 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e02b      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	e021      	b.n	8003990 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800394c:	893b      	ldrh	r3, [r7, #8]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	b29b      	uxth	r3, r3
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	6a39      	ldr	r1, [r7, #32]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f9e0 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	2b04      	cmp	r3, #4
 8003970:	d107      	bne.n	8003982 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003980:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e005      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	00010002 	.word	0x00010002

080039a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039ba:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae8 <I2C_DMAAbort+0x148>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	08db      	lsrs	r3, r3, #3
 80039c0:	4a4a      	ldr	r2, [pc, #296]	@ (8003aec <I2C_DMAAbort+0x14c>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0a1a      	lsrs	r2, r3, #8
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00da      	lsls	r2, r3, #3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80039e6:	e00a      	b.n	80039fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039fc:	d0ea      	beq.n	80039d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a40:	2200      	movs	r2, #0
 8003a42:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	2200      	movs	r2, #0
 8003a52:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b60      	cmp	r3, #96	@ 0x60
 8003a6e:	d10e      	bne.n	8003a8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a86:	6978      	ldr	r0, [r7, #20]
 8003a88:	f7fe fd66 	bl	8002558 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a8c:	e027      	b.n	8003ade <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a94:	2b28      	cmp	r3, #40	@ 0x28
 8003a96:	d117      	bne.n	8003ac8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ab6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2228      	movs	r2, #40	@ 0x28
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ac6:	e007      	b.n	8003ad8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f7fe fd33 	bl	8002544 <HAL_I2C_ErrorCallback>
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	14f8b589 	.word	0x14f8b589

08003af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b00:	e048      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b08:	d044      	beq.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fd fa45 	bl	8000f98 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d139      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10d      	bne.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	e00c      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d116      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e023      	b.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10d      	bne.n	8003bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	e00c      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d093      	beq.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf2:	e071      	b.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c02:	d123      	bne.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e067      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c52:	d041      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7fd f9a0 	bl	8000f98 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d136      	bne.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10c      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e00b      	b.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	43da      	mvns	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e021      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10c      	bne.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e00b      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	2300      	moveq	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f47f af6d 	bne.w	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d30:	e034      	b.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8b8 	bl	8003ea8 <I2C_IsAcknowledgeFailed>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e034      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d48:	d028      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fd f925 	bl	8000f98 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	2b80      	cmp	r3, #128	@ 0x80
 8003d6c:	d016      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e007      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da6:	2b80      	cmp	r3, #128	@ 0x80
 8003da8:	d1c3      	bne.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc0:	e034      	b.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f870 	bl	8003ea8 <I2C_IsAcknowledgeFailed>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e034      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dd8:	d028      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fd f8dd 	bl	8000f98 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d016      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d1c3      	bne.n	8003dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e50:	4b13      	ldr	r3, [pc, #76]	@ (8003ea0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	0a1a      	lsrs	r2, r3, #8
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e008      	b.n	8003e94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e90:	d0e9      	beq.n	8003e66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	14f8b589 	.word	0x14f8b589

08003ea8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ebe:	d11b      	bne.n	8003ef8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ec8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	f043 0204 	orr.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003f16:	d103      	bne.n	8003f20 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f1e:	e007      	b.n	8003f30 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003f28:	d102      	bne.n	8003f30 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d129      	bne.n	8003fa6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2224      	movs	r2, #36	@ 0x24
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0210 	bic.w	r2, r2, #16
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d12a      	bne.n	8004024 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2224      	movs	r2, #36	@ 0x24
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	f023 030f 	bic.w	r3, r3, #15
 8003ff4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	89fa      	ldrh	r2, [r7, #14]
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	4b20      	ldr	r3, [pc, #128]	@ (80040c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	4a1f      	ldr	r2, [pc, #124]	@ (80040c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	@ 0x40
 800404e:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800405a:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004060:	f7fc ff9a 	bl	8000f98 <HAL_GetTick>
 8004064:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004066:	e009      	b.n	800407c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004068:	f7fc ff96 	bl	8000f98 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004076:	d901      	bls.n	800407c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e01f      	b.n	80040bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <HAL_PWREx_EnableOverDrive+0x98>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004088:	d1ee      	bne.n	8004068 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800408a:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004090:	f7fc ff82 	bl	8000f98 <HAL_GetTick>
 8004094:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004096:	e009      	b.n	80040ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004098:	f7fc ff7e 	bl	8000f98 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040a6:	d901      	bls.n	80040ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e007      	b.n	80040bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040ac:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <HAL_PWREx_EnableOverDrive+0x98>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040b8:	d1ee      	bne.n	8004098 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	420e0040 	.word	0x420e0040
 80040cc:	40007000 	.word	0x40007000
 80040d0:	420e0044 	.word	0x420e0044

080040d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e267      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d075      	beq.n	80041de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040f2:	4b88      	ldr	r3, [pc, #544]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d00c      	beq.n	8004118 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fe:	4b85      	ldr	r3, [pc, #532]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004106:	2b08      	cmp	r3, #8
 8004108:	d112      	bne.n	8004130 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800410a:	4b82      	ldr	r3, [pc, #520]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004116:	d10b      	bne.n	8004130 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	4b7e      	ldr	r3, [pc, #504]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d05b      	beq.n	80041dc <HAL_RCC_OscConfig+0x108>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d157      	bne.n	80041dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e242      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004138:	d106      	bne.n	8004148 <HAL_RCC_OscConfig+0x74>
 800413a:	4b76      	ldr	r3, [pc, #472]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a75      	ldr	r2, [pc, #468]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e01d      	b.n	8004184 <HAL_RCC_OscConfig+0xb0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x98>
 8004152:	4b70      	ldr	r3, [pc, #448]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a6f      	ldr	r2, [pc, #444]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b6d      	ldr	r3, [pc, #436]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a6c      	ldr	r2, [pc, #432]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e00b      	b.n	8004184 <HAL_RCC_OscConfig+0xb0>
 800416c:	4b69      	ldr	r3, [pc, #420]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a68      	ldr	r2, [pc, #416]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	4b66      	ldr	r3, [pc, #408]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a65      	ldr	r2, [pc, #404]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 800417e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d013      	beq.n	80041b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fc ff04 	bl	8000f98 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fc ff00 	bl	8000f98 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	@ 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e207      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0xc0>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fc fef0 	bl	8000f98 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fc feec 	bl	8000f98 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	@ 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1f3      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ce:	4b51      	ldr	r3, [pc, #324]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0xe8>
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d063      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f6:	4b47      	ldr	r3, [pc, #284]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d11c      	bne.n	800423c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004202:	4b44      	ldr	r3, [pc, #272]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d116      	bne.n	800423c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420e:	4b41      	ldr	r3, [pc, #260]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_RCC_OscConfig+0x152>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d001      	beq.n	8004226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e1c7      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004226:	4b3b      	ldr	r3, [pc, #236]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4937      	ldr	r1, [pc, #220]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004236:	4313      	orrs	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423a:	e03a      	b.n	80042b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d020      	beq.n	8004286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004244:	4b34      	ldr	r3, [pc, #208]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fc fea5 	bl	8000f98 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004252:	f7fc fea1 	bl	8000f98 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e1a8      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004264:	4b2b      	ldr	r3, [pc, #172]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4925      	ldr	r1, [pc, #148]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 8004280:	4313      	orrs	r3, r2
 8004282:	600b      	str	r3, [r1, #0]
 8004284:	e015      	b.n	80042b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004286:	4b24      	ldr	r3, [pc, #144]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fc fe84 	bl	8000f98 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004294:	f7fc fe80 	bl	8000f98 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e187      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d036      	beq.n	800432c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <HAL_RCC_OscConfig+0x248>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fc fe64 	bl	8000f98 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fc fe60 	bl	8000f98 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e167      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <HAL_RCC_OscConfig+0x240>)
 80042e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x200>
 80042f2:	e01b      	b.n	800432c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f4:	4b09      	ldr	r3, [pc, #36]	@ (800431c <HAL_RCC_OscConfig+0x248>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fa:	f7fc fe4d 	bl	8000f98 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004300:	e00e      	b.n	8004320 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004302:	f7fc fe49 	bl	8000f98 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d907      	bls.n	8004320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e150      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
 8004314:	40023800 	.word	0x40023800
 8004318:	42470000 	.word	0x42470000
 800431c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004320:	4b88      	ldr	r3, [pc, #544]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ea      	bne.n	8004302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8097 	beq.w	8004468 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433e:	4b81      	ldr	r3, [pc, #516]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10f      	bne.n	800436a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	4b7d      	ldr	r3, [pc, #500]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	4a7c      	ldr	r2, [pc, #496]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004358:	6413      	str	r3, [r2, #64]	@ 0x40
 800435a:	4b7a      	ldr	r3, [pc, #488]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436a:	4b77      	ldr	r3, [pc, #476]	@ (8004548 <HAL_RCC_OscConfig+0x474>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d118      	bne.n	80043a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004376:	4b74      	ldr	r3, [pc, #464]	@ (8004548 <HAL_RCC_OscConfig+0x474>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a73      	ldr	r2, [pc, #460]	@ (8004548 <HAL_RCC_OscConfig+0x474>)
 800437c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004382:	f7fc fe09 	bl	8000f98 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438a:	f7fc fe05 	bl	8000f98 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e10c      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439c:	4b6a      	ldr	r3, [pc, #424]	@ (8004548 <HAL_RCC_OscConfig+0x474>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d106      	bne.n	80043be <HAL_RCC_OscConfig+0x2ea>
 80043b0:	4b64      	ldr	r3, [pc, #400]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b4:	4a63      	ldr	r2, [pc, #396]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80043bc:	e01c      	b.n	80043f8 <HAL_RCC_OscConfig+0x324>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b05      	cmp	r3, #5
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x30c>
 80043c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d6:	4a5b      	ldr	r2, [pc, #364]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0x324>
 80043e0:	4b58      	ldr	r3, [pc, #352]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	4a57      	ldr	r2, [pc, #348]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ec:	4b55      	ldr	r3, [pc, #340]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f0:	4a54      	ldr	r2, [pc, #336]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80043f2:	f023 0304 	bic.w	r3, r3, #4
 80043f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fc fdca 	bl	8000f98 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004406:	e00a      	b.n	800441e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004408:	f7fc fdc6 	bl	8000f98 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0cb      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441e:	4b49      	ldr	r3, [pc, #292]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0ee      	beq.n	8004408 <HAL_RCC_OscConfig+0x334>
 800442a:	e014      	b.n	8004456 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442c:	f7fc fdb4 	bl	8000f98 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004432:	e00a      	b.n	800444a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fc fdb0 	bl	8000f98 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0b5      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444a:	4b3e      	ldr	r3, [pc, #248]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ee      	bne.n	8004434 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d105      	bne.n	8004468 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445c:	4b39      	ldr	r3, [pc, #228]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	4a38      	ldr	r2, [pc, #224]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 8004462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004466:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a1 	beq.w	80045b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004472:	4b34      	ldr	r3, [pc, #208]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	2b08      	cmp	r3, #8
 800447c:	d05c      	beq.n	8004538 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d141      	bne.n	800450a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004486:	4b31      	ldr	r3, [pc, #196]	@ (800454c <HAL_RCC_OscConfig+0x478>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fc fd84 	bl	8000f98 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fc fd80 	bl	8000f98 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e087      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a6:	4b27      	ldr	r3, [pc, #156]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	019b      	lsls	r3, r3, #6
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	3b01      	subs	r3, #1
 80044cc:	041b      	lsls	r3, r3, #16
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	061b      	lsls	r3, r3, #24
 80044d6:	491b      	ldr	r1, [pc, #108]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044dc:	4b1b      	ldr	r3, [pc, #108]	@ (800454c <HAL_RCC_OscConfig+0x478>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7fc fd59 	bl	8000f98 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ea:	f7fc fd55 	bl	8000f98 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e05c      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fc:	4b11      	ldr	r3, [pc, #68]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x416>
 8004508:	e054      	b.n	80045b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450a:	4b10      	ldr	r3, [pc, #64]	@ (800454c <HAL_RCC_OscConfig+0x478>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fc fd42 	bl	8000f98 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004518:	f7fc fd3e 	bl	8000f98 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e045      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_OscConfig+0x470>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x444>
 8004536:	e03d      	b.n	80045b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d107      	bne.n	8004550 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e038      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
 8004544:	40023800 	.word	0x40023800
 8004548:	40007000 	.word	0x40007000
 800454c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004550:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <HAL_RCC_OscConfig+0x4ec>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d028      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d121      	bne.n	80045b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d11a      	bne.n	80045b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004586:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004588:	4293      	cmp	r3, r2
 800458a:	d111      	bne.n	80045b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	3b01      	subs	r3, #1
 800459a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0cc      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d8:	4b68      	ldr	r3, [pc, #416]	@ (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d90c      	bls.n	8004600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b65      	ldr	r3, [pc, #404]	@ (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b63      	ldr	r3, [pc, #396]	@ (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0b8      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d020      	beq.n	800464e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004618:	4b59      	ldr	r3, [pc, #356]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a58      	ldr	r2, [pc, #352]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004630:	4b53      	ldr	r3, [pc, #332]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a52      	ldr	r2, [pc, #328]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800463a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463c:	4b50      	ldr	r3, [pc, #320]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	494d      	ldr	r1, [pc, #308]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d044      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	4b47      	ldr	r3, [pc, #284]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d119      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e07f      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d003      	beq.n	8004682 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467e:	2b03      	cmp	r3, #3
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004682:	4b3f      	ldr	r3, [pc, #252]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e06f      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004692:	4b3b      	ldr	r3, [pc, #236]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e067      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a2:	4b37      	ldr	r3, [pc, #220]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f023 0203 	bic.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4934      	ldr	r1, [pc, #208]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b4:	f7fc fc70 	bl	8000f98 <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046bc:	f7fc fc6c 	bl	8000f98 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e04f      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 020c 	and.w	r2, r3, #12
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d1eb      	bne.n	80046bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046e4:	4b25      	ldr	r3, [pc, #148]	@ (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d20c      	bcs.n	800470c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b22      	ldr	r3, [pc, #136]	@ (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b20      	ldr	r3, [pc, #128]	@ (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e032      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004718:	4b19      	ldr	r3, [pc, #100]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4916      	ldr	r1, [pc, #88]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	4313      	orrs	r3, r2
 8004728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004736:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	490e      	ldr	r1, [pc, #56]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800474a:	f000 f821 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800474e:	4602      	mov	r2, r0
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	490a      	ldr	r1, [pc, #40]	@ (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 800475c:	5ccb      	ldrb	r3, [r1, r3]
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004766:	4b09      	ldr	r3, [pc, #36]	@ (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc fbd0 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023c00 	.word	0x40023c00
 8004780:	40023800 	.word	0x40023800
 8004784:	08006770 	.word	0x08006770
 8004788:	20000000 	.word	0x20000000
 800478c:	20000004 	.word	0x20000004

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b090      	sub	sp, #64	@ 0x40
 8004796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a8:	4b59      	ldr	r3, [pc, #356]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x180>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d00d      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0x40>
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	f200 80a1 	bhi.w	80048fc <HAL_RCC_GetSysClockFreq+0x16c>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x34>
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d003      	beq.n	80047ca <HAL_RCC_GetSysClockFreq+0x3a>
 80047c2:	e09b      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c4:	4b53      	ldr	r3, [pc, #332]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x184>)
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047c8:	e09b      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ca:	4b53      	ldr	r3, [pc, #332]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x188>)
 80047cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047ce:	e098      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x180>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047da:	4b4d      	ldr	r3, [pc, #308]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x180>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d028      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x180>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	2200      	movs	r2, #0
 80047ee:	623b      	str	r3, [r7, #32]
 80047f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047f8:	2100      	movs	r1, #0
 80047fa:	4b47      	ldr	r3, [pc, #284]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x188>)
 80047fc:	fb03 f201 	mul.w	r2, r3, r1
 8004800:	2300      	movs	r3, #0
 8004802:	fb00 f303 	mul.w	r3, r0, r3
 8004806:	4413      	add	r3, r2
 8004808:	4a43      	ldr	r2, [pc, #268]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x188>)
 800480a:	fba0 1202 	umull	r1, r2, r0, r2
 800480e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004810:	460a      	mov	r2, r1
 8004812:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004816:	4413      	add	r3, r2
 8004818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800481a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481c:	2200      	movs	r2, #0
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	61fa      	str	r2, [r7, #28]
 8004822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004826:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800482a:	f7fb fcdf 	bl	80001ec <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4613      	mov	r3, r2
 8004834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004836:	e053      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004838:	4b35      	ldr	r3, [pc, #212]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x180>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	2200      	movs	r2, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	617a      	str	r2, [r7, #20]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800484a:	f04f 0b00 	mov.w	fp, #0
 800484e:	4652      	mov	r2, sl
 8004850:	465b      	mov	r3, fp
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	0159      	lsls	r1, r3, #5
 800485c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004860:	0150      	lsls	r0, r2, #5
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	ebb2 080a 	subs.w	r8, r2, sl
 800486a:	eb63 090b 	sbc.w	r9, r3, fp
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800487a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800487e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004882:	ebb2 0408 	subs.w	r4, r2, r8
 8004886:	eb63 0509 	sbc.w	r5, r3, r9
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	00eb      	lsls	r3, r5, #3
 8004894:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004898:	00e2      	lsls	r2, r4, #3
 800489a:	4614      	mov	r4, r2
 800489c:	461d      	mov	r5, r3
 800489e:	eb14 030a 	adds.w	r3, r4, sl
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	eb45 030b 	adc.w	r3, r5, fp
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048b6:	4629      	mov	r1, r5
 80048b8:	028b      	lsls	r3, r1, #10
 80048ba:	4621      	mov	r1, r4
 80048bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048c0:	4621      	mov	r1, r4
 80048c2:	028a      	lsls	r2, r1, #10
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ca:	2200      	movs	r2, #0
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	60fa      	str	r2, [r7, #12]
 80048d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d4:	f7fb fc8a 	bl	80001ec <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4613      	mov	r3, r2
 80048de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	3301      	adds	r3, #1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80048f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048fa:	e002      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x184>)
 80048fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004904:	4618      	mov	r0, r3
 8004906:	3740      	adds	r7, #64	@ 0x40
 8004908:	46bd      	mov	sp, r7
 800490a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	00f42400 	.word	0x00f42400
 8004918:	017d7840 	.word	0x017d7840

0800491c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004920:	4b03      	ldr	r3, [pc, #12]	@ (8004930 <HAL_RCC_GetHCLKFreq+0x14>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000000 	.word	0x20000000

08004934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004938:	f7ff fff0 	bl	800491c <HAL_RCC_GetHCLKFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	0a9b      	lsrs	r3, r3, #10
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	4903      	ldr	r1, [pc, #12]	@ (8004958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004950:	4618      	mov	r0, r3
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40023800 	.word	0x40023800
 8004958:	08006780 	.word	0x08006780

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800498c:	2b00      	cmp	r3, #0
 800498e:	d075      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004990:	4b91      	ldr	r3, [pc, #580]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004996:	f7fc faff 	bl	8000f98 <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800499e:	f7fc fafb 	bl	8000f98 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e189      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b0:	4b8a      	ldr	r3, [pc, #552]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f0      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	019a      	lsls	r2, r3, #6
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	071b      	lsls	r3, r3, #28
 80049d4:	4981      	ldr	r1, [pc, #516]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01f      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049e8:	4b7c      	ldr	r3, [pc, #496]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ee:	0f1b      	lsrs	r3, r3, #28
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	019a      	lsls	r2, r3, #6
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	431a      	orrs	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	071b      	lsls	r3, r3, #28
 8004a08:	4974      	ldr	r1, [pc, #464]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a10:	4b72      	ldr	r3, [pc, #456]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a16:	f023 021f 	bic.w	r2, r3, #31
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	496e      	ldr	r1, [pc, #440]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00d      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	019a      	lsls	r2, r3, #6
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	071b      	lsls	r3, r3, #28
 8004a48:	4964      	ldr	r1, [pc, #400]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a50:	4b61      	ldr	r3, [pc, #388]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a56:	f7fc fa9f 	bl	8000f98 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a5e:	f7fc fa9b 	bl	8000f98 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e129      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a70:	4b5a      	ldr	r3, [pc, #360]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d079      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a94:	4b52      	ldr	r3, [pc, #328]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9a:	f7fc fa7d 	bl	8000f98 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004aa2:	f7fc fa79 	bl	8000f98 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e107      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ab4:	4b49      	ldr	r3, [pc, #292]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ac0:	d0ef      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ace:	4b43      	ldr	r3, [pc, #268]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad4:	0f1b      	lsrs	r3, r3, #28
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	019a      	lsls	r2, r3, #6
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	493b      	ldr	r1, [pc, #236]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004af6:	4b39      	ldr	r3, [pc, #228]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004afc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	4934      	ldr	r1, [pc, #208]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01e      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b22:	0e1b      	lsrs	r3, r3, #24
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	019a      	lsls	r2, r3, #6
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	061b      	lsls	r3, r3, #24
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	071b      	lsls	r3, r3, #28
 8004b3c:	4927      	ldr	r1, [pc, #156]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b44:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	4922      	ldr	r1, [pc, #136]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b5a:	4b21      	ldr	r3, [pc, #132]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b60:	f7fc fa1a 	bl	8000f98 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b68:	f7fc fa16 	bl	8000f98 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0a4      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b7a:	4b18      	ldr	r3, [pc, #96]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b86:	d1ef      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 808b 	beq.w	8004cac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bbe:	f7fc f9eb 	bl	8000f98 <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bc4:	e010      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc6:	f7fc f9e7 	bl	8000f98 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d909      	bls.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e075      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004bd8:	42470068 	.word	0x42470068
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	42470070 	.word	0x42470070
 8004be4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004be8:	4b38      	ldr	r3, [pc, #224]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0e8      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bf4:	4b36      	ldr	r3, [pc, #216]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02f      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d028      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c12:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c22:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c28:	4a29      	ldr	r2, [pc, #164]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c2e:	4b28      	ldr	r3, [pc, #160]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d114      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c3a:	f7fc f9ad 	bl	8000f98 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fc f9a9 	bl	8000f98 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e035      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c58:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ee      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c70:	d10d      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004c72:	4b17      	ldr	r3, [pc, #92]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c86:	4912      	ldr	r1, [pc, #72]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	608b      	str	r3, [r1, #8]
 8004c8c:	e005      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004c8e:	4b10      	ldr	r3, [pc, #64]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4a0f      	ldr	r2, [pc, #60]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c94:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c98:	6093      	str	r3, [r2, #8]
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca6:	490a      	ldr	r1, [pc, #40]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d004      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004cbe:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cc0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40007000 	.word	0x40007000
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	42470e40 	.word	0x42470e40
 8004cd8:	424711e0 	.word	0x424711e0

08004cdc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e073      	b.n	8004dda <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	7f5b      	ldrb	r3, [r3, #29]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fb fea4 	bl	8000a50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d055      	beq.n	8004dc8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	22ca      	movs	r2, #202	@ 0xca
 8004d22:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2253      	movs	r2, #83	@ 0x53
 8004d2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fac7 	bl	80052c0 <RTC_EnterInitMode>
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d12c      	bne.n	8004d96 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d4e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68d2      	ldr	r2, [r2, #12]
 8004d76:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6919      	ldr	r1, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	041a      	lsls	r2, r3, #16
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 face 	bl	800532e <RTC_ExitInitMode>
 8004d92:	4603      	mov	r3, r0
 8004d94:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d110      	bne.n	8004dbe <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004daa:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	22ff      	movs	r2, #255	@ 0xff
 8004dc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8004dc6:	e001      	b.n	8004dcc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004de2:	b590      	push	{r4, r7, lr}
 8004de4:	b087      	sub	sp, #28
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	7f1b      	ldrb	r3, [r3, #28]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_RTC_SetTime+0x1c>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e087      	b.n	8004f0e <HAL_RTC_SetTime+0x12c>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d126      	bne.n	8004e5e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d102      	bne.n	8004e24 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 faa5 	bl	8005378 <RTC_ByteToBcd2>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa9e 	bl	8005378 <RTC_ByteToBcd2>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e40:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	789b      	ldrb	r3, [r3, #2]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fa96 	bl	8005378 <RTC_ByteToBcd2>
 8004e4c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004e4e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	78db      	ldrb	r3, [r3, #3]
 8004e56:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e018      	b.n	8004e90 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e7e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004e84:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	78db      	ldrb	r3, [r3, #3]
 8004e8a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	22ca      	movs	r2, #202	@ 0xca
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2253      	movs	r2, #83	@ 0x53
 8004e9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 fa0d 	bl	80052c0 <RTC_EnterInitMode>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d120      	bne.n	8004ef2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004eba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004ebe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ece:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6899      	ldr	r1, [r3, #8]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fa20 	bl	800532e <RTC_ExitInitMode>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ef2:	7cfb      	ldrb	r3, [r7, #19]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	22ff      	movs	r2, #255	@ 0xff
 8004f04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]

  return status;
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd90      	pop	{r4, r7, pc}

08004f16 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f16:	b590      	push	{r4, r7, lr}
 8004f18:	b087      	sub	sp, #28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	7f1b      	ldrb	r3, [r3, #28]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_RTC_SetDate+0x1c>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e071      	b.n	8005016 <HAL_RTC_SetDate+0x100>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10e      	bne.n	8004f62 <HAL_RTC_SetDate+0x4c>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	f023 0310 	bic.w	r3, r3, #16
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	330a      	adds	r3, #10
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11c      	bne.n	8004fa2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	78db      	ldrb	r3, [r3, #3]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fa03 	bl	8005378 <RTC_ByteToBcd2>
 8004f72:	4603      	mov	r3, r0
 8004f74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f9fc 	bl	8005378 <RTC_ByteToBcd2>
 8004f80:	4603      	mov	r3, r0
 8004f82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	789b      	ldrb	r3, [r3, #2]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f9f4 	bl	8005378 <RTC_ByteToBcd2>
 8004f90:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f92:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	e00e      	b.n	8004fc0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fae:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fb4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	22ca      	movs	r2, #202	@ 0xca
 8004fc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2253      	movs	r2, #83	@ 0x53
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f975 	bl	80052c0 <RTC_EnterInitMode>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10c      	bne.n	8004ffa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004fea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004fee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f99c 	bl	800532e <RTC_ExitInitMode>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	22ff      	movs	r2, #255	@ 0xff
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]

  return status;
 8005014:	7cfb      	ldrb	r3, [r7, #19]
}
 8005016:	4618      	mov	r0, r3
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}

0800501e <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800501e:	b590      	push	{r4, r7, lr}
 8005020:	b089      	sub	sp, #36	@ 0x24
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	7f1b      	ldrb	r3, [r3, #28]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_RTC_SetAlarm+0x24>
 800503e:	2302      	movs	r3, #2
 8005040:	e113      	b.n	800526a <HAL_RTC_SetAlarm+0x24c>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2202      	movs	r2, #2
 800504c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d137      	bne.n	80050c4 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2200      	movs	r2, #0
 8005066:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f983 	bl	8005378 <RTC_ByteToBcd2>
 8005072:	4603      	mov	r3, r0
 8005074:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f97c 	bl	8005378 <RTC_ByteToBcd2>
 8005080:	4603      	mov	r3, r0
 8005082:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005084:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	789b      	ldrb	r3, [r3, #2]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f974 	bl	8005378 <RTC_ByteToBcd2>
 8005090:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005092:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	78db      	ldrb	r3, [r3, #3]
 800509a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800509c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f966 	bl	8005378 <RTC_ByteToBcd2>
 80050ac:	4603      	mov	r3, r0
 80050ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80050b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80050b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80050be:	4313      	orrs	r3, r2
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e023      	b.n	800510c <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2200      	movs	r2, #0
 80050d6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80050e4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80050ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	78db      	ldrb	r3, [r3, #3]
 80050f0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80050f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80050fc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005102:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005108:	4313      	orrs	r3, r2
 800510a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	22ca      	movs	r2, #202	@ 0xca
 800511e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2253      	movs	r2, #83	@ 0x53
 8005126:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005130:	d148      	bne.n	80051c4 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005140:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005150:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005162:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005164:	f7fb ff18 	bl	8000f98 <HAL_GetTick>
 8005168:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800516a:	e013      	b.n	8005194 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800516c:	f7fb ff14 	bl	8000f98 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800517a:	d90b      	bls.n	8005194 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	22ff      	movs	r2, #255	@ 0xff
 8005182:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2203      	movs	r2, #3
 8005188:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e06a      	b.n	800526a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0e4      	beq.n	800516c <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051c0:	609a      	str	r2, [r3, #8]
 80051c2:	e047      	b.n	8005254 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051d2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051e2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80051f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051f6:	f7fb fecf 	bl	8000f98 <HAL_GetTick>
 80051fa:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80051fc:	e013      	b.n	8005226 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051fe:	f7fb fecb 	bl	8000f98 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800520c:	d90b      	bls.n	8005226 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	22ff      	movs	r2, #255	@ 0xff
 8005214:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2203      	movs	r2, #3
 800521a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e021      	b.n	800526a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0e4      	beq.n	80051fe <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005252:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	22ff      	movs	r2, #255	@ 0xff
 800525a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3724      	adds	r7, #36	@ 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd90      	pop	{r4, r7, pc}
	...

08005274 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0d      	ldr	r2, [pc, #52]	@ (80052bc <HAL_RTC_WaitForSynchro+0x48>)
 8005286:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005288:	f7fb fe86 	bl	8000f98 <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800528e:	e009      	b.n	80052a4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005290:	f7fb fe82 	bl	8000f98 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800529e:	d901      	bls.n	80052a4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e007      	b.n	80052b4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0ee      	beq.n	8005290 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	00017f5f 	.word	0x00017f5f

080052c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d122      	bne.n	8005324 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052ee:	f7fb fe53 	bl	8000f98 <HAL_GetTick>
 80052f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80052f4:	e00c      	b.n	8005310 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052f6:	f7fb fe4f 	bl	8000f98 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005304:	d904      	bls.n	8005310 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2204      	movs	r2, #4
 800530a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <RTC_EnterInitMode+0x64>
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d1e8      	bne.n	80052f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005348:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff8b 	bl	8005274 <HAL_RTC_WaitForSynchro>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2204      	movs	r2, #4
 8005368:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005386:	e005      	b.n	8005394 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	3b0a      	subs	r3, #10
 8005392:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	2b09      	cmp	r3, #9
 8005398:	d8f6      	bhi.n	8005388 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	b2db      	uxtb	r3, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <memset>:
 80053b4:	4402      	add	r2, r0
 80053b6:	4603      	mov	r3, r0
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d100      	bne.n	80053be <memset+0xa>
 80053bc:	4770      	bx	lr
 80053be:	f803 1b01 	strb.w	r1, [r3], #1
 80053c2:	e7f9      	b.n	80053b8 <memset+0x4>

080053c4 <__libc_init_array>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	4d0d      	ldr	r5, [pc, #52]	@ (80053fc <__libc_init_array+0x38>)
 80053c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005400 <__libc_init_array+0x3c>)
 80053ca:	1b64      	subs	r4, r4, r5
 80053cc:	10a4      	asrs	r4, r4, #2
 80053ce:	2600      	movs	r6, #0
 80053d0:	42a6      	cmp	r6, r4
 80053d2:	d109      	bne.n	80053e8 <__libc_init_array+0x24>
 80053d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005404 <__libc_init_array+0x40>)
 80053d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005408 <__libc_init_array+0x44>)
 80053d8:	f000 f818 	bl	800540c <_init>
 80053dc:	1b64      	subs	r4, r4, r5
 80053de:	10a4      	asrs	r4, r4, #2
 80053e0:	2600      	movs	r6, #0
 80053e2:	42a6      	cmp	r6, r4
 80053e4:	d105      	bne.n	80053f2 <__libc_init_array+0x2e>
 80053e6:	bd70      	pop	{r4, r5, r6, pc}
 80053e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ec:	4798      	blx	r3
 80053ee:	3601      	adds	r6, #1
 80053f0:	e7ee      	b.n	80053d0 <__libc_init_array+0xc>
 80053f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f6:	4798      	blx	r3
 80053f8:	3601      	adds	r6, #1
 80053fa:	e7f2      	b.n	80053e2 <__libc_init_array+0x1e>
 80053fc:	08006798 	.word	0x08006798
 8005400:	08006798 	.word	0x08006798
 8005404:	08006798 	.word	0x08006798
 8005408:	0800679c 	.word	0x0800679c

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
